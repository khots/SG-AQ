/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	Components
 *	Class: 		SingleNodeCustomFormulaNode
 *	Source: 	E:\workplace\AdvancedQueryForJoin_NewCP\flexclient\advQuery\dag\Components\SingleNodeCustomFormulaNode.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2009.04.07 12:38:45 GMT+05:30
 */

package Components
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.utils.IExternalizable;
import flash.xml.*;
import mx.binding.*;
import mx.containers.Box;
import mx.containers.HBox;
import mx.containers.VBox;
import mx.controls.Button;
import mx.controls.Label;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.styles.*;



public class SingleNodeCustomFormulaNode
	extends mx.containers.Box
	implements flash.utils.IExternalizable
{

	[Bindable]
/**
 * @private
 **/
	public var formulaLabel : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var sNodeFormula : mx.containers.HBox;




private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.Box
  ,
  propertiesFactory: function():Object { return {
    width: 330,
    height: 88,
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.HBox
        ,
        id: "sNodeFormula"
        ,
        stylesFactory: function():void {
          this.textAlign = "center";
          this.horizontalGap = 0;
        }
        ,
        propertiesFactory: function():Object { return {
          percentHeight: 100.0,
          percentWidth: 100.0,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Label
              ,
              id: "formulaLabel"
              ,
              propertiesFactory: function():Object { return {
                percentHeight: 100.0,
                percentWidth: 95.0
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.containers.VBox
              ,
              stylesFactory: function():void {
                this.verticalAlign = "middle";
              }
              ,
              propertiesFactory: function():Object { return {
                percentHeight: 100.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Button
                    ,
                    events: {
                      click: "___Button1_click"
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      label: ">",
                      percentWidth: 5.0
                    }}
                  })
                ]
              }}
            })
          ]
        }}
      })
    ]
  }}
})

    /**
     * @private
     **/
	public function SingleNodeCustomFormulaNode()
	{
		super();

		mx_internal::_document = this;

		//	our style settings
		//	initialize component styles
		if (!this.styleDeclaration)
		{
			this.styleDeclaration = new CSSStyleDeclaration();
		}

		this.styleDeclaration.defaultFactory = function():void
		{
			this.color = 0;
			this.backgroundColor = 16777215;
			this.borderColor = 255;
			this.borderStyle = "solid";
		};



		//	properties
		this.width = 330;
		this.height = 88;

		//	events

	}

    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);

		//	binding mgmt
		_SingleNodeCustomFormulaNode_bindingsSetup();

		var target:SingleNodeCustomFormulaNode = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_Components_SingleNodeCustomFormulaNodeWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					_bindings,
					_watchers);


		super.initialize();
	}


		import mx.controls.Menu;
        import mx.events.MenuEvent;        
        import Components.DAGConstants;
        import mx.rpc.events.ResultEvent;
        import mx.rpc.events.FaultEvent; 
	    import mx.controls.Alert;
	    [Bindable]
	    public var customFormulaString  : String = "";
	    
	    [Bindable]
  		public var currentCustomNode : SingleNodeCustomFormulaNode = null;
  		
	    
	    
	    [Bindable]
		public var myMenuData:Array = [	
		    {label: "Delete", type: "radio", toggled: false,enabled:true},
		    {label: "Edit", type: "radio", toggled: false,enabled:true}
		];
		
	    [Bindable]
		public var outputMenuData:Array = [	
			{label: "Edit", type: "radio", toggled: false,enabled:false},
			{label: "Delete", type: "radio", toggled: false,enabled:false}
		];
		 
		//private var  nodeName : String = "";
		
		//tHIS IS TO DISTINGUISH  WHEATHER IT'S SINGLE NODE TQ OR TWO NODE TQ 
		private var nodeType : String = "";
		private var attributeID : String = "";
		private var attributeType : String = "";
        private var attributeName : String = "";
        private var entityName : String = ""; //Name of the corresponding Entity
        private var nodeExpressionId : int = 0; //Expression id of the Entity
        private var selectedArithmeticOp : String = "";
        private var selectedLogicalOp : String = "";
        private var timeValue : String = "";
        private var timeInterval : String = ""; 
        private var lhsTimeValue : String = "";
        private var lhsTimeInterval : String = "";
        private var operation : String = "";
        private var customColumnName : String = "";
        private var nodeView : String = "";
        private var qAttrInterval: String = "";
        private var ccInterval : String = "";
        
        public function setCCInterval(ccInterval : String):void
        {
        	this.ccInterval = ccInterval;
        }
        public function getCCInterval() : String
        {
        	return this.ccInterval;
        }

        
        
        public function setQAttrInterval(qAttrInterval : String) : void
        {
        	this.qAttrInterval = qAttrInterval;
        }
        
        public function getQAttrInterval () : String
        {
        	return this.qAttrInterval;
        }

        
        public function setNodeView(nodeView : String) : void
        {
        	this.nodeView = nodeView;
        }
        
        public function getNodeView() : String
        {
        	return this.nodeView
        }
        	
        
       // private var customFormulaString : String = "";
        
        public function setCustomFormulaString(customFormulaString : String) : void
        {
           this.customFormulaString =  customFormulaString;      	
        }
        public function getCustomFormulaString()  : String
        {
        	return this.customFormulaString;
        }
         
        public function setLhsTimeValue(lhsTimeValue : String) : void
        {
        	this.lhsTimeValue = lhsTimeValue;
        }
        public function getLhsTimeValue() : String
        {
        	return lhsTimeValue;
        }
        
        public function setLhsTimeInterval(lhsTimeInterval : String) : void
        {
        	this.lhsTimeInterval = lhsTimeInterval;
        }
        
        public function getLhsTimeInterval() : String
        {
        	return lhsTimeInterval;
        }
        public function initializeNode(x:int,y:int,name :String) : void
  		{
  			this.x = x;
  			this.y = y;
  			this.name = name; 
  		}
        public function setCustomColumnName(customColumnName : String) : void
        {
        	this.customColumnName = customColumnName;
        }
        
        public function getCustomColumnName () : String
        {
        	return this.customColumnName;
        }
        public function setOperation(operation : String) : void
        {
         	this.operation = operation;
        }
        
        public function getOperation() : String
        {
            return this.operation;	
        } 
		
	    public function setNodeType(nodeType : String) : void
	    {
	    	this.nodeType = nodeType;
	    }
		public function getNodeType() : String
		{
		 	return this.nodeType;
		}
		
		public function setAttributeID(attributeID : String) : void
		{
			this.attributeID = attributeID;
		}
		
		public function getAttributeID() : String
		{
			return attributeID;
		}
		
		
		public function setAttributeType(attributeType : String) : void
		{
			this.attributeType = attributeType;
		}
		
		public function getAtributeType() : String
		{
			return attributeType;
		}

        public function setAttributeName(attributeName : String) : void
        {
        	this.attributeName =attributeName;
        }
        
		public function getAtributeName()  : String
		{
			return attributeName;	
		}
				
		public function setEntityName(entityName : String) : void
		{
		    this.entityName = entityName;	
		}
		public function	getEntityName() : String
		{
			return  entityName;
		}	 

        public function setNodeExpressionId(nodeExpressionId : int) : void
        {
        	this.nodeExpressionId = nodeExpressionId;
        }
        
        public function getNodeExpressionId() : int
        {
        	return nodeExpressionId;
        }
        
  		public function setSelectedArithmeticOp(selectedArithmeticOp : String) : void
  		{
  			this.selectedArithmeticOp = selectedArithmeticOp;
  		}
  		
  		public function getSelectedArithmeticOp() : String
  		{
  			return this.selectedArithmeticOp;
  		} 
  		
  		public function setSelectedLogicalOp(selectedLogicalOp : String) : void
  		{
  			this.selectedLogicalOp = selectedLogicalOp;
  		} 
  		public function getSelectedLogicalOp() : String
  		{
  			return this.selectedLogicalOp;
  		}
  		
  		public function setTimeValue(timeValue : String) : void
  		{
  			this.timeValue = timeValue;
  		}
  		public function getTimeValue() : String
  		{
  			return this.timeValue;
  		}
  		
  		public function setTimeInterval(timeInterval : String) : void
  		{
  			this.timeInterval = timeInterval;
  		}
  		public function getTimeInterval() : String
  		{
  			return this.timeInterval;
  		}
  		
  		
  		public function  readExternal(input:IDataInput):void 
  		{
  			this.name = input.readUTF();
  			nodeType = input.readUTF();
  			attributeID = input.readUTF();
  			attributeType = input.readUTF();
  			attributeName = input.readUTF();
  			entityName = input.readUTF();
  			nodeExpressionId = input.readInt();
  			selectedArithmeticOp = input.readUTF();
  			selectedLogicalOp = input.readUTF();
  			timeValue = input.readUTF();
  			timeInterval = input.readUTF();
  			lhsTimeValue = input.readUTF();
  			lhsTimeInterval = input.readUTF();
  			operation = input.readUTF();
  			customColumnName = input.readUTF();
  			customFormulaString = input.readUTF();
  			nodeView = input.readUTF();
            qAttrInterval = input.readUTF();
            ccInterval = input.readUTF();
  		} 
  		
       public function writeExternal(out:IDataOutput):void 
       {
       	  out.writeUTF(this.name);
       	  out.writeUTF(nodeType);
       	  out.writeUTF(attributeID);
       	  out.writeUTF(attributeType);
       	  out.writeUTF(attributeName);
       	  out.writeUTF(entityName);
       	  out.writeInt(nodeExpressionId);
       	  out.writeUTF(selectedArithmeticOp); 
       	  out.writeUTF(selectedLogicalOp);
       	  out.writeUTF(timeValue);
       	  out.writeUTF(timeInterval);
       	  out.writeUTF(lhsTimeValue);
       	  out.writeUTF(lhsTimeInterval);
       	  out.writeUTF(operation);
       	  out.writeUTF(customColumnName);
       	  out.writeUTF(customFormulaString);
       	  out.writeUTF(nodeView);
          out.writeUTF(qAttrInterval);
          out.writeUTF(ccInterval);
       }
       
       private function createMyMenu(event:MouseEvent):void
  	   {
  			var myNewMenu:Menu=null;
  			if(this.getNodeView() != this.parentApplication.view)
  			{
  				myNewMenu = Menu.createMenu(this, outputMenuData, true);
  			}
  			else
  			{
  				myNewMenu = Menu.createMenu(this, myMenuData, true);
  			}
  			//myNewMenu = Menu.createMenu(this, myMenuData, true);
  			myNewMenu.show(event.stageX,event.stageY);
			myNewMenu.addEventListener(MenuEvent.ITEM_CLICK,handleMenuEvent);
			myNewMenu.addEventListener(FaultEvent.FAULT, faultHandler);
  	   }
  	   
  	   private function handleMenuEvent(event:MenuEvent):void
  	   { 	
  	   	  if(event.label == DAGConstants.DELETE)
  	   	  {
  	   	      //To delete the Custom Formula Node	
  	   	      deleteCustomNode();
  	   	  }
  	   	  else
  	   	  {
  	   	  	 editCustomFormula();
  	   	  }
  	   }
  	   
      private function faultHandler (event:FaultEvent):void
	  {
		  AlertManager.showError(event.fault.faultString);
	  } 
	  
	  private function deleteNodeHandler(event : ResultEvent) : void
	  {
	  	  var customNodeName : String = this.name; 
	  	  var nodeExpressionId : int = this.nodeExpressionId;
	  	  var line : String = nodeExpressionId + "_" + customNodeName;
	  	   
	  	  this.parentApplication.deleteSingleNodeCustomNode(customNodeName,line); 
	  }

       private function deleteCustomNode() : void
       {
       	   var nodeName : String = this.name;
       	   this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT,deleteNodeHandler);
       	   this.parentApplication.rpcService.removeCustomFormula(nodeName);
       }
       
       private function editNodeHandler(event : ResultEvent) : void
       {
       	    this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,editNodeHandler); 
       	    this.parentApplication.createAndPopulateSingleNodeTq(event.result as Object, "edit", currentCustomNode); 
       	
       }
       private function editCustomFormula() : void
       {
       	   var node : SingleNodeCustomFormulaNode = this;
       	   currentCustomNode = node;
       	   this.parentApplication.operationforView="edit"; //to get popwindow fields values
       	   this.parentApplication.rpcService.getSingleNodeEditData(node);
       	   this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT,editNodeHandler);  
		   //this.parentApplication.rpcService.addEventListener(FaultEvent.FAULT, faultHandler);
       }
       /*private function changeBgColor() : void{
       	if(this.parentApplication.view=="Result"){
       		sNodeFormula.setStyle("backgroundColor","#e7ddfa");
       	}else{
       		sNodeFormula.setStyle("backgroundColor","#FFFFFF");
       	}       		
       } */
        			
		



    //	supporting function definitions for properties, events, styles, effects
/**
 * @private
 **/
public function ___Button1_click(event:flash.events.MouseEvent):void
{
	createMyMenu(event)
}


	//	binding mgmt
    private var _bindings:Array;
    private var _watchers:Array;
    private function _SingleNodeCustomFormulaNode_bindingsSetup():void
    {
        if (!_bindings)
        {
            _bindings = [];
        }

        if (!_watchers)
        {
            _watchers = [];
        }

        var binding:Binding;

        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (customFormulaString);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                formulaLabel.text = _sourceFunctionReturnValue;
            },
            "formulaLabel.text");
        _bindings[0] = binding;
    }

    private function _SingleNodeCustomFormulaNode_bindingExprs():void
    {
        var destination:*;
		[Binding(id='0')]
		destination = (customFormulaString);
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil):void
    {
        (SingleNodeCustomFormulaNode)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil;





    /**
     * @private
     **/
    public var _bindingsByDestination : Object;
    /**
     * @private
     **/
    public var _bindingsBeginWithWord : Object;

}

}
