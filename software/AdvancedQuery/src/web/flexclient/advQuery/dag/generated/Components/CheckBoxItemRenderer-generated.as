/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	Components
 *	Class: 		CheckBoxItemRenderer
 *	Source: 	E:\workplace\AdvancedQueryForJoin_NewCP\flexclient\advQuery\dag\Components\CheckBoxItemRenderer.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2009.04.07 12:38:45 GMT+05:30
 */

package Components
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.HBox;
import mx.controls.CheckBox;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.styles.*;



public class CheckBoxItemRenderer
	extends mx.containers.HBox
{

	[Bindable]
/**
 * @private
 **/
	public var cb : mx.controls.CheckBox;




private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.HBox
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.controls.CheckBox
        ,
        id: "cb"
        ,
        events: {
          click: "__cb_click"
        }
        ,
        propertiesFactory: function():Object { return {
          width: 15
        }}
      })
    ]
  }}
})

    /**
     * @private
     **/
	public function CheckBoxItemRenderer()
	{
		super();

		mx_internal::_document = this;

		//	our style settings
		//	initialize component styles
		if (!this.styleDeclaration)
		{
			this.styleDeclaration = new CSSStyleDeclaration();
		}

		this.styleDeclaration.defaultFactory = function():void
		{
			this.horizontalAlign = "center";
		};



		//	properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;

		//	events

	}

    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);



		super.initialize();
	}


			// this override is essential for preventing random (un)checking when your DataGrid is scrolled
			override public function set data(value:Object):void
			{
				if(value != null)
				{
					super.data = value;
					// set itemRenderer's state based on data value
					cb.selected = value.isSelected;
				}
			}
			
			// local click handler that dispatches the event
			// so it can be handled in a  more appropriate place (such as the document holding the DataGrid)
			private function onClick(e:MouseEvent):void
			{
				// attach our VO onto the event so that it can be manipulated in the handler
				// wherever that handler may be
				var evt:ClickEvent = new ClickEvent(super.data);
				dispatchEvent(evt);
			}
		



    //	supporting function definitions for properties, events, styles, effects
/**
 * @private
 **/
public function __cb_click(event:flash.events.MouseEvent):void
{
	onClick(event)
}


	//	binding mgmt





    /**
     * @private
     **/
    public var _bindingsByDestination : Object;
    /**
     * @private
     **/
    public var _bindingsBeginWithWord : Object;

}

}
