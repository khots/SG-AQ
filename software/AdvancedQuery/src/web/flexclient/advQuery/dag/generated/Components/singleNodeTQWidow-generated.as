/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	Components
 *	Class: 		singleNodeTQWidow
 *	Source: 	E:\workplace\AdvancedQueryForJoin_NewCP\flexclient\advQuery\dag\Components\singleNodeTQWidow.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2009.04.07 12:38:47 GMT+05:30
 */

package Components
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.FocusEvent;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.HBox;
import mx.containers.TitleWindow;
import mx.containers.VBox;
import mx.controls.Button;
import mx.controls.ComboBox;
import mx.controls.DateField;
import mx.controls.Label;
import mx.controls.Spacer;
import mx.controls.TextInput;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.CloseEvent;
import mx.events.DropdownEvent;
import mx.events.FlexEvent;
import mx.events.ListEvent;
import mx.formatters.DateFormatter;
import mx.styles.*;
import mx.validators.StringValidator;



public class singleNodeTQWidow
	extends mx.containers.TitleWindow
{

	[Bindable]
/**
 * @private
 **/
	public var arithmaticOpsCb : mx.controls.ComboBox;

	[Bindable]
/**
 * @private
 **/
	public var arithmeticOpLabel : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var attributesCb : mx.controls.ComboBox;

	[Bindable]
/**
 * @private
 **/
	public var cancelButton : mx.controls.Button;

	[Bindable]
/**
 * @private
 **/
	public var columnLabel : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var customColumnName : mx.controls.TextInput;

	[Bindable]
/**
 * @private
 **/
	public var datePicker : mx.controls.DateField;

	[Bindable]
/**
 * @private
 **/
	public var entityLabel : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var fieldVal : mx.validators.StringValidator;

	[Bindable]
/**
 * @private
 **/
	public var firstComboPlace : mx.containers.VBox;

	[Bindable]
/**
 * @private
 **/
	public var labelHBox : mx.containers.HBox;

	[Bindable]
/**
 * @private
 **/
	public var lb5 : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var lb6 : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var lb7 : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var leftDatePicker : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var myBox : mx.containers.HBox;

	[Bindable]
/**
 * @private
 **/
	public var relationalOpsCb : mx.controls.ComboBox;

	[Bindable]
/**
 * @private
 **/
	public var relationalOpsLabel : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var submitButton1 : mx.controls.Button;

	[Bindable]
/**
 * @private
 **/
	public var timeFormatter : mx.formatters.DateFormatter;

	[Bindable]
/**
 * @private
 **/
	public var timeInputBox : mx.controls.TextInput;

	[Bindable]
/**
 * @private
 **/
	public var timeIntervalCb : mx.controls.ComboBox;

	[Bindable]
/**
 * @private
 **/
	public var timeIntervalCb6 : mx.controls.ComboBox;




private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.TitleWindow
  ,
  propertiesFactory: function():Object { return {
    width: 700,
    height: 255,
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.VBox
        ,
        stylesFactory: function():void {
          this.bottom = 15;
          this.top = 15;
          this.right = 15;
          this.left = 15;
        }
        ,
        propertiesFactory: function():Object { return {
          x: 20,
          y: 20,
          percentWidth: 100.0,
          percentHeight: 100.0,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.containers.HBox
              ,
              id: "labelHBox"
              ,
              propertiesFactory: function():Object { return {
                x: 20,
                y: 20,
                percentWidth: 100.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Label
                    ,
                    id: "leftDatePicker"
                    ,
                    stylesFactory: function():void {
                      this.color = 255;
                      this.fontStyle = "normal";
                      this.fontWeight = "bold";
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "leftDatePickerLabel",
                      width: 100,
                      height: 50,
                      buttonMode: true
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Label
                    ,
                    id: "arithmeticOpLabel"
                    ,
                    stylesFactory: function():void {
                      this.color = 255;
                      this.fontStyle = "normal";
                      this.fontWeight = "bold";
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "arithmeticOpLabel",
                      width: 100,
                      height: 50,
                      buttonMode: true
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Label
                    ,
                    id: "entityLabel"
                    ,
                    stylesFactory: function():void {
                      this.color = 255;
                      this.fontStyle = "normal";
                      this.fontWeight = "bold";
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "entityLabel",
                      width: 100,
                      height: 50,
                      buttonMode: true
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Label
                    ,
                    id: "relationalOpsLabel"
                    ,
                    stylesFactory: function():void {
                      this.color = 255;
                      this.fontStyle = "normal";
                      this.fontWeight = "bold";
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "relationalOpsLabel",
                      width: 100,
                      height: 50,
                      buttonMode: true
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Label
                    ,
                    id: "lb5"
                    ,
                    stylesFactory: function():void {
                      this.color = 255;
                      this.fontStyle = "normal";
                      this.fontWeight = "bold";
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "label5",
                      width: 100,
                      height: 50
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Label
                    ,
                    id: "lb6"
                    ,
                    stylesFactory: function():void {
                      this.color = 255;
                      this.fontStyle = "normal";
                      this.fontWeight = "bold";
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "label6",
                      width: 100,
                      height: 50
                    }}
                  })
                ]
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.containers.HBox
              ,
              id: "myBox"
              ,
              events: {
                creationComplete: "__myBox_creationComplete"
              }
              ,
              propertiesFactory: function():Object { return {
                x: 20,
                y: 60,
                percentWidth: 100.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.DateField
                    ,
                    id: "datePicker"
                    ,
                    events: {
                      creationComplete: "__datePicker_creationComplete"
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "leftDatePicker",
                      width: 100,
                      showToday: true,
                      formatString: "MM/DD/YYYY",
                      yearNavigationEnabled: true
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.ComboBox
                    ,
                    id: "arithmaticOpsCb"
                    ,
                    events: {
                      change: "__arithmaticOpsCb_change",
                      close: "__arithmaticOpsCb_close"
                    }
                    ,
                    stylesFactory: function():void {
                      this.textAlign = "center";
                      this.borderThickness = 0;
                      this.borderColor = 255;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      width: 100,
                      prompt: "--Select--",
                      itemRenderer: _ClassFactory1_c(),
                      rowCount: 10,
                      toolTip: ""
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.VBox
                    ,
                    id: "firstComboPlace"
                    ,
                    stylesFactory: function():void {
                      this.horizontalGap = 0;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      width: 100,
                      percentHeight: 100.0,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.ComboBox
                          ,
                          id: "attributesCb"
                          ,
                          events: {
                            change: "__attributesCb_change",
                            close: "__attributesCb_close"
                          }
                          ,
                          stylesFactory: function():void {
                            this.borderThickness = 0;
                            this.borderColor = 255;
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            width: 100,
                            prompt: "--Select--",
                            itemRenderer: _ClassFactory2_c(),
                            rowCount: 10,
                            toolTip: ""
                          }}
                        })
                      ]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.ComboBox
                    ,
                    id: "relationalOpsCb"
                    ,
                    events: {
                      close: "__relationalOpsCb_close"
                    }
                    ,
                    stylesFactory: function():void {
                      this.borderThickness = 0;
                      this.borderColor = 255;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      width: 100,
                      prompt: "--Select--",
                      itemRenderer: _ClassFactory3_c(),
                      rowCount: 10,
                      toolTip: ""
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.TextInput
                    ,
                    id: "timeInputBox"
                    ,
                    stylesFactory: function():void {
                      this.borderColor = 255;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "timeInputBox",
                      width: 100,
                      restrict: "0-9"
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.ComboBox
                    ,
                    id: "timeIntervalCb"
                    ,
                    events: {
                      close: "__timeIntervalCb_close"
                    }
                    ,
                    stylesFactory: function():void {
                      this.borderThickness = 0;
                      this.borderColor = 255;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "timeIntervalCb",
                      width: 100,
                      prompt: "--Select--",
                      itemRenderer: _ClassFactory4_c(),
                      rowCount: 10,
                      toolTip: ""
                    }}
                  })
                ]
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Spacer
              ,
              propertiesFactory: function():Object { return {
                height: 5
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.containers.HBox
              ,
              stylesFactory: function():void {
                this.horizontalGap = 6;
              }
              ,
              propertiesFactory: function():Object { return {
                x: 20,
                percentWidth: 100.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Label
                    ,
                    id: "columnLabel"
                    ,
                    stylesFactory: function():void {
                      this.fontWeight = "bold";
                      this.color = 255;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      width: 170,
                      text: "Please Enter Column Name :"
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.TextInput
                    ,
                    id: "customColumnName"
                    ,
                    events: {
                      focusOut: "__customColumnName_focusOut"
                    }
                    ,
                    stylesFactory: function():void {
                      this.borderColor = 255;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      width: 250,
                      restrict: "0-9 A-Z a-z"
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.ComboBox
                    ,
                    id: "timeIntervalCb6"
                    ,
                    events: {
                      close: "__timeIntervalCb6_close"
                    }
                    ,
                    stylesFactory: function():void {
                      this.borderThickness = 0;
                      this.borderColor = 255;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "timeIntervalCb6",
                      width: 100,
                      prompt: "--Select--",
                      itemRenderer: _ClassFactory5_c(),
                      rowCount: 10,
                      toolTip: "",
                      visible: false
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Label
                    ,
                    id: "lb7"
                    ,
                    stylesFactory: function():void {
                      this.color = 255;
                      this.fontStyle = "normal";
                      this.fontWeight = "bold";
                      this.paddingTop = 0;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "label6",
                      width: 100,
                      height: 50,
                      visible: false
                    }}
                  })
                ]
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.containers.HBox
              ,
              propertiesFactory: function():Object { return {
                x: 20,
                y: 50,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Button
                    ,
                    id: "submitButton1"
                    ,
                    events: {
                      click: "__submitButton1_click"
                    }
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Button
                    ,
                    id: "cancelButton"
                    ,
                    events: {
                      click: "__cancelButton_click"
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      label: "Cancel"
                    }}
                  })
                ]
              }}
            })
          ]
        }}
      })
    ]
  }}
})

    /**
     * @private
     **/
	public function singleNodeTQWidow()
	{
		super();

		mx_internal::_document = this;

		//	our style settings
		//	initialize component styles
		if (!this.styleDeclaration)
		{
			this.styleDeclaration = new CSSStyleDeclaration();
		}

		this.styleDeclaration.defaultFactory = function():void
		{
			this.borderColor = 255;
			this.backgroundColor = 16777215;
			this.left = 0;
			this.right = 0;
			this.borderThicknessLeft = 2;
			this.borderThicknessRight = 2;
			this.borderThicknessBottom = 2;
			this.borderThicknessTop = 5;
		};



		//	properties
		this.layout = "absolute";
		this.width = 700;
		this.height = 255;
		this.showCloseButton = true;
		_StringValidator1_i();
		_DateFormatter1_i();

		//	events
		this.addEventListener("close", ___TitleWindow1_close);
		this.addEventListener("creationComplete", ___TitleWindow1_creationComplete);

	}

    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);

		//	binding mgmt
		_singleNodeTQWidow_bindingsSetup();

		var target:singleNodeTQWidow = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_Components_singleNodeTQWidowWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					_bindings,
					_watchers);


		super.initialize();
	}


		import mx.states.SetStyle;
		import mx.events.ChildExistenceChangedEvent;
		import mx.events.FlexEvent;
		import mx.events.ValidationResultEvent;
		import mx.validators.StringValidator;
		import mx.rpc.events.ResultEvent;
		import mx.collections.ArrayCollection;
		import Components.DAGConstants;
		import mx.managers.PopUpManager;
		import mx.controls.List;		
		 [Bindable]
		 public var entityLabelString : String = null;	
		
		 [Bindable]
		 public var buttonLabel : String = "OK"; 
		
		 [Bindable]
		 public var datePickerLabel : String = "Select Date";
		 
		 [Bindable]
		 public var entityName : String = "";
		 
		 [Bindable]
		 public var entityExpressionId  : int = 0; 
		 
		 [Bindable]
		 public var customNodeName : String = "";
		
		[Bindable]
		public var arithmeticOpDp : ArrayCollection ;
		[Bindable]
		public var attributesDp : ArrayCollection;
		[Bindable]
		public var relationalDp : ArrayCollection;
		[Bindable]
		public var timeIntervalsDp : ArrayCollection;
		
		[Bindable]
		public var entityDp : Object;
		
		[Bindable]
	 	private var arithmeticLabel : String = "Arithmetic" + "\n" +"Operators"; 
	 	    
	 	[Bindable]
	 	private var relationalLabel : String  = "Relational" + "\n" + "Operators";
	 	    
	 	[Bindable]
	 	private var timeValueLabel : String = "Time" + "\n" + "Value";
	 	    
	 	[Bindable]
	 	private var timeIntrvalLabel : String = "Time" + "\n" + "Interval" ;
	      		
     	private var existingTextBox : TextInput = null;	
        private var existingTimeIntervalCb : ComboBox = null;
	    private var existingValueLabel : Label = null;
	 	private var existingIntervalLabel : Label = null; 
	 	private var existingRHSDatePicker : DateField = null;
	    private var existingRHSPickerLabel : Label = null; 
	 	private var existingLHSDatePicker : DateField =  null;  
		private var existingfirstOpComboBox : ComboBox = null;
		private var existingTimeStampText : TextInput = null;
		private var existingTimeLabel : Label = null;
		
		public function removeMe():void 
	 	{
           PopUpManager.removePopUp(this);
           this.parentApplication.operationforView=""; //to overcome from edit mode
        }
		
		private function submitData() : void
		{
			var flag:Boolean = validateColumnName();
           	  if(flag == false) 
           	  	 return;           	  	 
           	  	 
			var rhsTimeValue : String = "";
          	var rhsTimeIntervalValue : String =  "";
           	var customFormulaString : String = "";
            
            var lhsTimeValue : String = "";
            var lhsTimeIntervalValue : String = "";
            var month : String =  "";
            var day : String = "";
            var singleNodeCustomFormula : SingleNodeCustomFormulaNode = new SingleNodeCustomFormulaNode(); 
            existingLHSDatePicker = myBox.getChildByName("leftDatePicker")as DateField;
            
            if(existingLHSDatePicker != null)
             {
             	//If there exists date Picker on Lefty hand side, the lhs time value will be Date only
             	 month = (existingLHSDatePicker.selectedDate.getMonth()+1).toString();
           	 	 if(month.length == 1)
           	 	 {
           	 	    month = "0"+month;
           	 	 }
           	 	    
           	 	 day = existingLHSDatePicker.selectedDate.getDate().toString();
           	 	 if(day.length == 1)
           	 	 {
           	 	     day = "0"+day;
           	 	 }
           	 	 lhsTimeValue = month + "/" + day +"/" + existingLHSDatePicker.selectedDate.getFullYear();
                 singleNodeCustomFormula.setLhsTimeValue(lhsTimeValue);
                 singleNodeCustomFormula.setLhsTimeInterval("null");
             }
             else
             {
             
             }	   
		     
		     //Setting the selected arithmatic op
		     singleNodeCustomFormula.setSelectedArithmeticOp(arithmaticOpsCb.selectedItem.toString());

             //Setting the attribute's properties
             singleNodeCustomFormula.setAttributeName(attributesCb.selectedItem.toString());
             
             var attributeDataList : ArrayCollection = entityDp[attributesCb.selectedItem.toString()];
             singleNodeCustomFormula.setAttributeType(String(attributeDataList.getItemAt(1)));
             singleNodeCustomFormula.setAttributeID(String(attributeDataList.getItemAt(0)));
             //Setting the Entity Datails
             singleNodeCustomFormula.setEntityName(entityName);
             singleNodeCustomFormula.setNodeExpressionId(entityExpressionId);
             
             if(this.parentApplication.view == "Result")
             {
	             //Setting the relational Op blank for calculate query
	             singleNodeCustomFormula.setSelectedLogicalOp("null");
             }else
             {
             	//Setting the relational Op
	             singleNodeCustomFormula.setSelectedLogicalOp(relationalOpsCb.selectedItem.toString());
             }
             
             //Handling RHS time value and Intervals
             existingTextBox = myBox.getChildByName("timeInputBox") as TextInput;
             if(existingTextBox != null)
             {
             	if(this.parentApplication.view == "Result")
             	{
             		singleNodeCustomFormula.setTimeValue("null");
             		singleNodeCustomFormula.setTimeInterval("null");
             	}else
             	{
	             	//Means there exists the Time Intervals also
	             	rhsTimeValue = existingTextBox.text;
	             	singleNodeCustomFormula.setTimeValue(rhsTimeValue);
	             	existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox;
	               	if(existingTimeIntervalCb != null)
	                {
	                   rhsTimeIntervalValue = existingTimeIntervalCb.selectedItem.toString();
	                   singleNodeCustomFormula.setTimeInterval(rhsTimeIntervalValue);
	                }
	                else
	                {
	                	//This condition should not exist if text Input is there 
	                	singleNodeCustomFormula.setTimeInterval("null");
	                }	                
                }
             }
             else
             {
             	if(this.parentApplication.view == "Result")
             	{
           	  	   singleNodeCustomFormula.setTimeValue("null");
           	  	   singleNodeCustomFormula.setTimeInterval("null");
           	  	}else
           	  	{
	             	//Means there exists the Date Picker, so get the Date Picker
	             	existingRHSDatePicker = myBox.getChildByName("rhsDatePicker") as DateField;
	             	existingTimeStampText = myBox.getChildByName("iTimeStampText") as TextInput;
	                if(existingRHSDatePicker != null)
	                {
	                	month = (existingRHSDatePicker.selectedDate.getMonth()+1).toString();
	           	 	 	if(month.length == 1)
	           	 	 	{
	           	 	    	month = "0"+month;
	           	 	 	}
	           	 	    
	           	 	 	day = existingRHSDatePicker.selectedDate.getDate().toString();
	           	 	 	if(day.length == 1)
	           	 	 	{
	           	 	    	 day = "0"+day;
	           	 	 	}
						//timeStamp is added to the datePicker	
						if(existingTimeStampText != null){           	 	 
	           	 	 		rhsTimeValue = month + "/" + day +"/" + existingRHSDatePicker.selectedDate.getFullYear() + " " + existingTimeStampText.text;
	     				}else{
	     					rhsTimeValue = month + "/" + day +"/" + existingRHSDatePicker.selectedDate.getFullYear();
	     				}	           	 	 	
	           	 	 	singleNodeCustomFormula.setTimeValue(rhsTimeValue);
	           	 	 	singleNodeCustomFormula.setTimeInterval("null");
	                }
                }             	
             	
             }
             
            
	             var lhsTime :  String = "";
	             //Creating custom Formula String 
	             if(lhsTimeIntervalValue != null && lhsTimeIntervalValue != "")
	             {
	             	lhsTime = lhsTimeValue + "\n" +  lhsTimeIntervalValue;
	             }
	             else
	             {
	             	lhsTime = lhsTimeValue;
	             }
	             
	             if(this.parentApplication.view != "Result") 
	             {
		             var rhsTime : String = "";
		             if(rhsTimeIntervalValue != null && rhsTimeIntervalValue != "")
		             {
		             	rhsTime = rhsTimeValue + rhsTimeIntervalValue;
		             }
		             else
		             {
		             	rhsTime = rhsTimeValue;
		             }
		             customFormulaString =  lhsTimeValue + "\n" + arithmaticOpsCb.selectedItem.toString() + "\n" 
		             +  entityName + "." + attributesCb.selectedItem.toString() + "\n" + relationalOpsCb.selectedItem.toString() 
		             + "\n" + rhsTime;
	             	 
	             	 //Setting the custom Column Name             
	             	 singleNodeCustomFormula.setCustomColumnName(customColumnName.text);
	             	 singleNodeCustomFormula.setCCInterval("null");
	             }
	             else
	             {
	             	customFormulaString = lhsTimeValue + "\n" + arithmaticOpsCb.selectedItem.toString() + "\n" +entityName;
    	            //Setting the custom Column Name and customformula interval            
		            singleNodeCustomFormula.setCustomColumnName(customColumnName.text);
		            singleNodeCustomFormula.setCCInterval(timeIntervalCb6.selectedItem.toString());
	             }
             
             this.parentApplication.singleNodecustomFormulaString = customFormulaString;
             singleNodeCustomFormula.setCustomFormulaString(customFormulaString);
              
             singleNodeCustomFormula.name = customNodeName;
             
             //Setting node Type
             singleNodeCustomFormula.setNodeType("singleNodeCustomNode");
             

             existingfirstOpComboBox= firstComboPlace.getChildByName("fstOpComboBox") as ComboBox;             
			 if(existingfirstOpComboBox != null)
			 {
			 	singleNodeCustomFormula.setQAttrInterval(existingfirstOpComboBox.selectedItem.toString());	
			 }
			 else
			 {
			 	singleNodeCustomFormula.setQAttrInterval("null");	
			 }
			 
			  //Setting the node view
             singleNodeCustomFormula.setNodeView(this.parentApplication.view);
             
             //Invoking the RPC Method
             if(submitButton1.label == "OK")
             {
             	
             	this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, createCustomNodeHandler);
             	singleNodeCustomFormula.setOperation("create");
             	this.parentApplication.rpcService.formSingleNodeFormula(singleNodeCustomFormula, "add");
             }
             else
             {
             	this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, editCustomNodeHandler);
             	singleNodeCustomFormula.setOperation("edit");
             	this.parentApplication.rpcService.formSingleNodeFormula(singleNodeCustomFormula, "edit");
             	this.parentApplication.operationforView=""; //to overcome from edit mode
             }
             
		}
		private function editCustomNodeHandler(event : ResultEvent) : void
		{
			var node  : SingleNodeCustomFormulaNode = event.result as SingleNodeCustomFormulaNode;
			this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT, editCustomNodeHandler);
			this.parentApplication.addSingleNodeCustomNode(node); 
		}
		
		private function createCustomNodeHandler(event : ResultEvent) : void
		{					
			var node  : SingleNodeCustomFormulaNode = event.result as SingleNodeCustomFormulaNode;
            this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT, createCustomNodeHandler);
            this.parentApplication.addSingleNodeCustomNode(node);
            			
		}
		private function validate() : void
		{
			var operandType : String  = null;  //Specifies the type of Attribute either date or NonDate 
			var operand : String = ""; //Specifies selected attrinbute 
			var nodeAttributeId : String = null; //
			var nodeList : ArrayCollection =  null;
			var arithmeticOperand : String = null;
			
			if(attributesCb.selectedIndex > -1){
		 		operand  =  attributesCb.selectedItem.toString();
				nodeList = entityDp[operand];
				operandType = String(nodeList.getItemAt(1));
       		}       		
       		           		
       	 	if(operandType == "Integer") 
       	 	{
       	 	    //Creating the ComboBox
          			existingfirstOpComboBox= firstComboPlace.getChildByName("fstOpComboBox") as ComboBox;
          			if(existingfirstOpComboBox == null)
    	        	{
    	        		var firstOpComboBox : ComboBox =  new ComboBox();
	   	       			firstOpComboBox.id = "fstOpComboBox";
	   	       			firstOpComboBox.name = "fstOpComboBox";
	   	       			firstOpComboBox.dataProvider = timeIntervalsDp;       	       		  	              
	   	              	firstOpComboBox.rowCount = 10;
	   	       			//Adding datePicket as childs
	   	 	   			firstComboPlace.addChild(firstOpComboBox);       	 	   			 
    	     		}	
       	 	}else{
       	 		existingfirstOpComboBox= firstComboPlace.getChildByName("fstOpComboBox") as ComboBox;
				if(existingfirstOpComboBox != null){  
    	        		firstComboPlace.removeChild(existingfirstOpComboBox);
    				}
       	 	}
       	 	
			if(arithmaticOpsCb.selectedIndex > -1 && attributesCb.selectedIndex > -1)
			{
				operand  =  attributesCb.selectedItem.toString();
				nodeList = entityDp[operand];
				operandType = String(nodeList.getItemAt(1));				
			    arithmeticOperand = arithmaticOpsCb.selectedItem.toString();
           	 		
			    existingLHSDatePicker = myBox.getChildByName("leftDatePicker") as DateField;
			    if(existingLHSDatePicker != null)
			    {   
			    	if(arithmeticOperand == "+" && operandType == "Date")
				    {
				    	AlertManager.showWarning("A date/timestamp may only be subtracted from another date/timestamp.  Please change the operator to a minus sign.");
           	 	    	        createBigTip("A date/timestamp may only be subtracted from another date/timestamp.  Please change the operator to a minus sign.");
        			}else if (arithmeticOperand == "-" && operandType == "Date")
        			{
					    		destroyBigTip();
							    //Selected attribute type is of Date type , then on LHS it should be a text Input and TimeInterval drop down 
							    addTextAndTimeIntervals();    
					    	
        			}else if(operandType == "Integer")
				    {
				    	destroyBigTip();
					 	//If Selected attribute type is not of Date type
                    	//Removing the Text boxes and Time Intervals 
                    	removeLHSTxtAndIntervals();
                    	if(this.parentApplication.view != "Result"){
	                    	//Add Date Picker for RHS 
	                    	addRHSDatePicker();
                    	}
					}
        			else if(operandType == "TimeStamp")
				    {
				    	destroyBigTip();
					 	//If Selected attribute type is not of Date type
                    	//Removing the Text boxes and Time Intervals 
                    	removeLHSTxtAndIntervals();
                    	if(this.parentApplication.view != "Result"){
	                    	//Add Date Picker for RHS 
	                    	addRHSDatePicker();
	                    	addRHSTimePicker();
                    	}
					}else{
						destroyBigTip();						
					}
					
			    }
			    else
			    {
			    	//If there dosen't exists any date Picker on left hand side
			    }
			}
			else
			{
			}
		}
		
		private function addTextAndTimeIntervals() : void
		{
			
			 //Remove Date Picker and corresponding Labels
			 existingRHSDatePicker = myBox.getChildByName("rhsDatePicker") as DateField;
			 if(existingRHSDatePicker != null)
			 {
			 	myBox.removeChild(existingRHSDatePicker);
			 }
			 
			 //IN case of subtraction of two dates, it should be something integer
           	 existingTimeStampText = myBox.getChildByName("iTimeStampText") as TextInput;
           	 existingTimeLabel = labelHBox.getChildByName("rhsTimeLabel") as Label;
           	 if(existingTimeStampText != null)
			 {
	           	 myBox.removeChild(existingTimeStampText);
	           	 labelHBox.removeChild(existingTimeLabel);
	   		 }
			 
			 existingRHSPickerLabel = labelHBox.getChildByName("rhsDatePickerLabel") as Label;
			 if(existingRHSPickerLabel != null)
			 {
			 	labelHBox.removeChild(existingRHSPickerLabel);
			 }
			 
			 //Add Text Input box and Time Interval Labels
           	 existingValueLabel = labelHBox.getChildByName("label5") as Label;
           	 if(existingValueLabel == null)
           	 {
           	 	 //Add New label
           	 	 var valueLabel  : Label= new Label();
           	 	 valueLabel.id = "lb5";
           	 	 valueLabel.name = "label5";
           	 	 valueLabel.text = "Time Value";
           	 	 valueLabel.width = 100;
           	 	 valueLabel.buttonMode = true;
           	 	 valueLabel.setStyle("color","#0000FF");   				
   				 valueLabel.setStyle("fontWeight","bold");           	 	  
           	 	 labelHBox.addChild(valueLabel);
           	 }
             existingIntervalLabel = labelHBox.getChildByName("label6") as Label;
           	 if(existingIntervalLabel == null)
           	 {
           	 	 var intervalLabel : Label = new Label();
           	 	 intervalLabel.id = "lb6";
           	 	 intervalLabel.name ="label6";
           	 	 intervalLabel.text = "Time Interval";
           	 	 intervalLabel.width = 100;
           	 	 intervalLabel.buttonMode = true; 
           	 	 intervalLabel.setStyle("color","#0000FF");   				
   				 intervalLabel.setStyle("fontWeight","bold");          	 	          
           	 	 labelHBox.addChild(intervalLabel);
           	 }
           	 
           	 //Adding text Input Box and Time Intervals 
           	 existingTextBox = myBox.getChildByName("timeInputBox") as TextInput;
           	 if(existingTextBox == null)
             {
           	 	//If no text input exists, create text input
           	 	var textBox : TextInput = new TextInput();
           	    textBox.id = "timeInputBox";
           	    textBox.name = "timeInputBox"
			 	textBox.width = 100;
			 	textBox.setStyle("borderColor","#000FF");
           	    myBox.addChild(textBox);
           	}
           	existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox;   
            if(existingTimeIntervalCb == null)
            {
                var comboBox : ComboBox = new ComboBox();
                comboBox.id = "cb5";
                comboBox.name = "timeIntervalCb";
                comboBox.width = 100;
                comboBox.dataProvider = timeIntervalsDp;
                comboBox.rowCount = 10;
                comboBox.setStyle("borderColor","#000FF");
                myBox.addChild(comboBox);
           }
		}
		
		//This method is made public as it is invoked from Parent class to remove TextInput etc in case of EDIT
		public function removeLHSTxtAndIntervals() : void
		{
			//Removing text Box
           	existingTextBox = myBox.getChildByName("timeInputBox") as TextInput;
           	var value : String =  null;
           	if(existingTextBox != null)
           	{
           	    value = existingTextBox.text;
           	   	myBox.removeChild(existingTextBox);
           	   	   				
           	   	 //Remove the Time Value Label
	           	 existingValueLabel = labelHBox.getChildByName("label5") as Label;
	           	 if(existingValueLabel != null)
	           	 {
	           	 	 labelHBox.removeChild(existingValueLabel);
	           	 }
           	}
           	        	
           	//Removing time interval ComboBox
            existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox; 
            if(existingTimeIntervalCb != null)
           	{
           	   myBox.removeChild(existingTimeIntervalCb);
           	       				
           	   //Remove the Time Interval Label
           	   existingIntervalLabel = labelHBox.getChildByName("label6") as Label;
           	   if(existingIntervalLabel != null)
           	    {
           	        labelHBox.removeChild(existingIntervalLabel);	
           	    }
           	}
		} 
		
		public function addRHSDatePicker() : DateField
		{
			existingRHSDatePicker= myBox.getChildByName("rhsDatePicker") as DateField;
           	var datePicker : DateField = null;
           	if(existingRHSDatePicker == null)
           	{
           	 	datePicker =  new DateField();
	           	datePicker.id = "rhsDatePicker";
	           	datePicker.name = "rhsDatePicker";
	           	datePicker.width = 100;
	           	datePicker.focusEnabled = true;
	           	datePicker.formatString = "MM/DD/YYYY";
	           	datePicker.showToday = true;
	           	datePicker.yearNavigationEnabled = true;
	           	datePicker.setStyle("borderColor","#0000FF");   				
	           	datePicker.addEventListener(FlexEvent.CREATION_COMPLETE,showTodayDateHandler);    	
	           	
	           	//Adding datePicket as childs
	            myBox.addChild(datePicker); 
	         }
	         //Creating the DatePicker Label
	         existingRHSPickerLabel = labelHBox.getChildByName("rhsDatePickerLabel") as Label;
           	 if(existingRHSPickerLabel == null)
           	 {
           	 	var pickerLabel : Label = new Label();
           	 	pickerLabel.name = "rhsDatePickerLabel";
           	 	pickerLabel.text = "Select Date"; 	 	   				
   				pickerLabel.setStyle("color","#0000FF");   				
   				pickerLabel.setStyle("fontWeight","bold");
           	 	labelHBox.addChild(pickerLabel);
           	 }
           	 
           	 return datePicker;
		}	
		public function addRHSTimePicker() : TextInput
		{
			existingTimeStampText= myBox.getChildByName("iTimeStampText") as TextInput;
           	var timeStampText : TextInput = null;
           	if(existingRHSDatePicker == null)
           	{  	
	           	timeStampText =  new TextInput();
      			timeStampText.id = "iTimeStampText";
      			timeStampText.name = "iTimeStampText";
      			timeStampText.width = 100;
      			timeStampText.focusEnabled = true;
      			timeStampText.text = "00:00:00";
      			timeStampText.setStyle("borderColor","#0000FF");
      			//Adding datePicket as childs	            
	            myBox.addChild(timeStampText);
	             
      			var pickerLabel : Label = new Label();
           	 	pickerLabel.name = "rhsTimeLabel";
           	 	pickerLabel.text = "Select Time(HH:MM:SS)";
           	 	pickerLabel.width = 100; 	 	   				
   				pickerLabel.setStyle("color","#0000FF");   				
   				pickerLabel.setStyle("fontWeight","bold");
   				//Adding label as childs
           	 	labelHBox.addChild(pickerLabel);             
	           	
	         }          	 
           	 return timeStampText;
		}	
           
        private function myDataTipFunction(item:Object):String
        { 
            return String(item);       
       
        }
        
        /**
			   truncateLongText function is doing the truncatation of Label and create a elipses like "..." 
			   and set value to comboBox text.  
			*/				
    		public function truncateLongText(e : Event):void{   
    					 
    			var txt:String = e.currentTarget.itemToLabel(e.currentTarget.selectedItem);  			
    			e.currentTarget.toolTip=txt; 
    			if(txt.length >= 11)
    				e.currentTarget.text =  txt.substring(0,9).toString() + "...";    			 		   		       		    
    		}
    		
    		/**
    			validateComboboxText function is create to validate first element of arraylist
    			here if a dropdown list contains only on item then it will show in comboBox as selected item
    			if item length is more than 1 then i will show prompt like "-select-" and store item text to myToolTip variable for further refrence.    			 
    		*/ 		
    		public function validateComboboxText():void{    			
    			if(this.parentApplication.operationforView==""){ 	     			   			
	    			 if(arithmeticOpDp.length <= 1){
		    			 arithmaticOpsCb.selectedIndex = 0;
		    			 arithmaticOpsCb.toolTip=arithmaticOpsCb.selectedLabel.toString();
		    		 }else{
	    				arithmaticOpsCb.selectedIndex = -1;
	    				arithmaticOpsCb.toolTip=arithmaticOpsCb.selectedLabel.toString();
		    		 }
	    			 
	    			 if(attributesDp.length <= 1){
	    				attributesCb.selectedIndex = 0;
	    				attributesCb.toolTip=attributesCb.selectedLabel.toString();
	    			 }else{
	    				attributesCb.selectedIndex = -1;
	    				attributesCb.toolTip=attributesCb.selectedLabel.toString();
	    			 }
	    			    			 
	    			 if(relationalDp.length <= 1){
	    				relationalOpsCb.selectedIndex = 0;
	    				relationalOpsCb.toolTip=relationalOpsCb.selectedLabel.toString();
	    			 }else{
	    				relationalOpsCb.selectedIndex = -1;
	    				relationalOpsCb.toolTip=relationalOpsCb.selectedLabel.toString();
	    			 }
	    			
	    			 if(timeIntervalsDp.length <= 1){
	    				timeIntervalCb.selectedIndex = 0;
	    				timeIntervalCb.toolTip=timeIntervalCb.selectedLabel.toString();
	    			 }else{
	    				timeIntervalCb.selectedIndex = -1;
	    				timeIntervalCb.toolTip=timeIntervalCb.selectedLabel.toString();
	    			 }
	    		}
    		}
    		
    		private function validateColumnName():Boolean{    			
    			var strVal:StringValidator = new StringValidator();    			
                strVal.source = customColumnName;
                strVal.property = "text";
                strVal.required = true;
                
                var event:ValidationResultEvent = strVal.validate();
				var currentControlIsValid:Boolean = (event.type == ValidationResultEvent.VALID);
				return currentControlIsValid;                                         	           	  				
    		}    		    		
			
			/**
    			createBigTip function is create a errorString which is displayed while validation messages appears.
    			it will disable submitButton control.    			  
    		*/ 	
		    private function createBigTip(s:String):void {		      
		      submitButton1.enabled=false;
		      submitButton1.errorString = s;		           
		    }
			
			/**
    			destroyBigTip function is remove a errorString which was displayed while validation messages appears.
    			it will enable submitButton control.    			  
    		*/
		    private function destroyBigTip():void {
		      submitButton1.enabled=true;
		      submitButton1.errorString="";		      
		      
		    }
		    /**
		       for calculare query remove component
		    */
		    private function removeComponent():void {
		      if(this.parentApplication.view=="Result"){
		      	relationalOpsCb.visible = false;
		      	timeIntervalCb.visible = false;
		      	timeInputBox.visible = false;
		      	relationalOpsLabel.visible = false;
		      	lb5.visible = false;
		      	lb6.visible = false;
		      	timeIntervalCb6.visible = true;
		      	lb7.visible = true;
		      }else{
		      	relationalOpsCb.visible = true;
		      	timeIntervalCb.visible = true;
		      	timeInputBox.visible = true;
		      	relationalOpsLabel.visible = true;
		      	lb5.visible = true;
		      	lb6.visible = true;
		      	timeIntervalCb6.visible = false;
		      	lb7.visible = false;
		      }
		    }
		    /**
		       setting default values for today date and current time
		    */
		    private function showTodayDateHandler(event:FlexEvent):void{
		    	if(this.parentApplication.operationforView != "edit"){        	
	           		existingRHSDatePicker= myBox.getChildByName("rhsDatePicker") as DateField;
	           		existingRHSDatePicker.selectedDate = new Date();        		
      			}           		
           	} 
           	/**
		       setting default values for today date
		    */
           	private function showTodayDate():void{
           		if(this.parentApplication.operationforView != "edit"){           			
           			datePicker.selectedDate = new Date();
           		}
           	}     
			
		



    //	supporting function definitions for properties, events, styles, effects
private function _StringValidator1_i() : mx.validators.StringValidator
{
	var temp : mx.validators.StringValidator = new mx.validators.StringValidator();
	fieldVal = temp;
	temp.property = "text";
	temp.required = true;
	mx.binding.BindingManager.executeBindings(this, "fieldVal", fieldVal);
	temp.initialized(this, "fieldVal")
	return temp;
}

private function _DateFormatter1_i() : mx.formatters.DateFormatter
{
	var temp : mx.formatters.DateFormatter = new mx.formatters.DateFormatter();
	timeFormatter = temp;
	temp.formatString = "HH:MM:SS";
	return temp;
}

/**
 * @private
 **/
public function ___TitleWindow1_close(event:mx.events.CloseEvent):void
{
	removeMe();
}

/**
 * @private
 **/
public function ___TitleWindow1_creationComplete(event:mx.events.FlexEvent):void
{
	removeComponent()
}

/**
 * @private
 **/
public function __myBox_creationComplete(event:mx.events.FlexEvent):void
{
	validateComboboxText()
}

/**
 * @private
 **/
public function __datePicker_creationComplete(event:mx.events.FlexEvent):void
{
	showTodayDate()
}

private function _ClassFactory1_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = mx.controls.Label;
	return temp;
}

/**
 * @private
 **/
public function __arithmaticOpsCb_change(event:mx.events.ListEvent):void
{
	validate()
}

/**
 * @private
 **/
public function __arithmaticOpsCb_close(event:mx.events.DropdownEvent):void
{
	truncateLongText(event)
}

private function _ClassFactory2_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = mx.controls.Label;
	return temp;
}

/**
 * @private
 **/
public function __attributesCb_change(event:mx.events.ListEvent):void
{
	validate()
}

/**
 * @private
 **/
public function __attributesCb_close(event:mx.events.DropdownEvent):void
{
	truncateLongText(event)
}

private function _ClassFactory3_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = mx.controls.Label;
	return temp;
}

/**
 * @private
 **/
public function __relationalOpsCb_close(event:mx.events.DropdownEvent):void
{
	truncateLongText(event)
}

private function _ClassFactory4_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = mx.controls.Label;
	return temp;
}

/**
 * @private
 **/
public function __timeIntervalCb_close(event:mx.events.DropdownEvent):void
{
	truncateLongText(event)
}

/**
 * @private
 **/
public function __customColumnName_focusOut(event:flash.events.FocusEvent):void
{
	validateColumnName()
}

private function _ClassFactory5_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = mx.controls.Label;
	return temp;
}

/**
 * @private
 **/
public function __timeIntervalCb6_close(event:mx.events.DropdownEvent):void
{
	truncateLongText(event)
}

/**
 * @private
 **/
public function __submitButton1_click(event:flash.events.MouseEvent):void
{
	submitData();
}

/**
 * @private
 **/
public function __cancelButton_click(event:flash.events.MouseEvent):void
{
	removeMe();
}


	//	binding mgmt
    private var _bindings:Array;
    private var _watchers:Array;
    private function _singleNodeTQWidow_bindingsSetup():void
    {
        if (!_bindings)
        {
            _bindings = [];
        }

        if (!_watchers)
        {
            _watchers = [];
        }

        var binding:Binding;

        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (customColumnName);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                fieldVal.source = _sourceFunctionReturnValue;
            },
            "fieldVal.source");
        _bindings[0] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (datePickerLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                leftDatePicker.text = _sourceFunctionReturnValue;
            },
            "leftDatePicker.text");
        _bindings[1] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (arithmeticLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                arithmeticOpLabel.text = _sourceFunctionReturnValue;
            },
            "arithmeticOpLabel.text");
        _bindings[2] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (entityLabelString);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                entityLabel.text = _sourceFunctionReturnValue;
            },
            "entityLabel.text");
        _bindings[3] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (relationalLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                relationalOpsLabel.text = _sourceFunctionReturnValue;
            },
            "relationalOpsLabel.text");
        _bindings[4] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (timeValueLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                lb5.text = _sourceFunctionReturnValue;
            },
            "lb5.text");
        _bindings[5] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (timeIntrvalLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                lb6.text = _sourceFunctionReturnValue;
            },
            "lb6.text");
        _bindings[6] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (arithmeticOpDp);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                arithmaticOpsCb.dataProvider = _sourceFunctionReturnValue;
            },
            "arithmaticOpsCb.dataProvider");
        _bindings[7] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (attributesDp);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                attributesCb.dataProvider = _sourceFunctionReturnValue;
            },
            "attributesCb.dataProvider");
        _bindings[8] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (relationalDp);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                relationalOpsCb.dataProvider = _sourceFunctionReturnValue;
            },
            "relationalOpsCb.dataProvider");
        _bindings[9] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (timeIntervalsDp);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                timeIntervalCb.dataProvider = _sourceFunctionReturnValue;
            },
            "timeIntervalCb.dataProvider");
        _bindings[10] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (timeIntervalsDp);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                timeIntervalCb6.dataProvider = _sourceFunctionReturnValue;
            },
            "timeIntervalCb6.dataProvider");
        _bindings[11] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (timeIntrvalLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                lb7.text = _sourceFunctionReturnValue;
            },
            "lb7.text");
        _bindings[12] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (buttonLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                submitButton1.label = _sourceFunctionReturnValue;
            },
            "submitButton1.label");
        _bindings[13] = binding;
    }

    private function _singleNodeTQWidow_bindingExprs():void
    {
        var destination:*;
		[Binding(id='0')]
		destination = (customColumnName);
		[Binding(id='1')]
		destination = (datePickerLabel);
		[Binding(id='2')]
		destination = (arithmeticLabel);
		[Binding(id='3')]
		destination = (entityLabelString);
		[Binding(id='4')]
		destination = (relationalLabel);
		[Binding(id='5')]
		destination = (timeValueLabel);
		[Binding(id='6')]
		destination = (timeIntrvalLabel);
		[Binding(id='7')]
		destination = (arithmeticOpDp);
		[Binding(id='8')]
		destination = (attributesDp);
		[Binding(id='9')]
		destination = (relationalDp);
		[Binding(id='10')]
		destination = (timeIntervalsDp);
		[Binding(id='11')]
		destination = (timeIntervalsDp);
		[Binding(id='12')]
		destination = (timeIntrvalLabel);
		[Binding(id='13')]
		destination = (buttonLabel);
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil):void
    {
        (singleNodeTQWidow)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil;





    /**
     * @private
     **/
    public var _bindingsByDestination : Object;
    /**
     * @private
     **/
    public var _bindingsBeginWithWord : Object;

}

}
