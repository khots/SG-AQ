/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	Components
 *	Class: 		JoinQueryNode
 *	Source: 	E:\workplace\AdvancedQueryForJoin_NewCP\flexclient\advQuery\dag\Components\JoinQueryNode.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2009.04.07 12:38:46 GMT+05:30
 */

package Components
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.utils.IExternalizable;
import flash.xml.*;
import mx.binding.*;
import mx.containers.Box;
import mx.containers.HBox;
import mx.containers.VBox;
import mx.controls.Button;
import mx.controls.Label;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.styles.*;



public class JoinQueryNode
	extends mx.containers.Box
	implements flash.utils.IExternalizable
{

	[Bindable]
/**
 * @private
 **/
	public var dNodeFormula : mx.containers.HBox;

	[Bindable]
/**
 * @private
 **/
	public var formulaLabel : mx.controls.Label;




private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.Box
  ,
  propertiesFactory: function():Object { return {
    width: 330,
    height: 88,
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.HBox
        ,
        id: "dNodeFormula"
        ,
        stylesFactory: function():void {
          this.textAlign = "center";
          this.horizontalGap = 0;
        }
        ,
        propertiesFactory: function():Object { return {
          percentHeight: 100.0,
          percentWidth: 100.0,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Label
              ,
              id: "formulaLabel"
              ,
              propertiesFactory: function():Object { return {
                percentHeight: 100.0,
                percentWidth: 95.0
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.containers.VBox
              ,
              stylesFactory: function():void {
                this.verticalAlign = "middle";
              }
              ,
              propertiesFactory: function():Object { return {
                percentHeight: 100.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Button
                    ,
                    events: {
                      click: "___Button1_click"
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      label: ">",
                      percentWidth: 5.0
                    }}
                  })
                ]
              }}
            })
          ]
        }}
      })
    ]
  }}
})

    /**
     * @private
     **/
	public function JoinQueryNode()
	{
		super();

		mx_internal::_document = this;

		//	our style settings
		//	initialize component styles
		if (!this.styleDeclaration)
		{
			this.styleDeclaration = new CSSStyleDeclaration();
		}

		this.styleDeclaration.defaultFactory = function():void
		{
			this.borderThickness = 2;
			this.color = 0;
			this.backgroundColor = 16777215;
			this.borderColor = 255;
			this.borderStyle = "solid";
		};



		//	properties
		this.width = 330;
		this.height = 88;

		//	events

	}

    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);

		//	binding mgmt
		_JoinQueryNode_bindingsSetup();

		var target:JoinQueryNode = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_Components_JoinQueryNodeWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					_bindings,
					_watchers);


		super.initialize();
	}


		
		import mx.rpc.events.ResultEvent;
		import mx.rpc.events.FaultEvent;
		import mx.events.MenuEvent;
		import mx.controls.Menu;
		import mx.controls.Alert;
		import mx.collections.ArrayCollection;
		
		private var firstEntityName: String = null;
		
		private var secondEntityName: String = null;
		
		private var operation: String = null;
		
		private var firstNodeExpressionId: int = 0;
		
		private var secondNodeExpressionId: int = 0;

		private var joinFormulaNodeList: ArrayCollection = null;
		
		private var nodeView : String = "";
		
		[Bindable]
		public var myMenuData:Array = [	
		    {label: "Delete", type: "radio", toggled: false,enabled:true},
		    {label: "Edit", type: "radio", toggled: false,enabled:true}];
		
		[Bindable]
		public var outputMenuData:Array = [	
			{label: "Edit", type: "radio", toggled: false,enabled:false},
			{label: "Delete", type: "radio", toggled: false,enabled:false}];
		
		[Bindable]
  		public var joinFormula : String = null;
  		
  		[Bindable]
  		public var currentJoinQueryNode : JoinQueryNode = null;
  		
  		[Bindable]
  		public var obj : Object = null;
		
		
		public function setFirstNodeEntityName(firstEntityName: String): void
		{
			this.firstEntityName = firstEntityName;
		}
		
		public function getFirstNodeEntityName(): String
		{
			return firstEntityName;
		}
		
		public function setSecondNodeEntityName(secondEntityName: String): void
		{
			this.secondEntityName = secondEntityName;
		}
		
		public function getSecondNodeEntityName(): String
		{
			return secondEntityName;
		}
		
		public function setFirstNodeExpressionId(firstNodeExpressionId: int): void
		{
			this.firstNodeExpressionId = firstNodeExpressionId;
		}
		
		public function getFirstNodeExpressionId(): int
		{
			return firstNodeExpressionId;
		}
		
		public function setSecondNodeExpressionId(secondNodeExpressionId: int): void
		{
			this.secondNodeExpressionId = secondNodeExpressionId;
		}

		public function getSecondNodeExpressionId(): int
		{
			return secondNodeExpressionId;
		}
		
		public function setJoinFormulaNodeList(joinFormulaNodeList: ArrayCollection): void
		{
			this.joinFormulaNodeList = joinFormulaNodeList;
		}
		
		public function getJoinFormulaNodeList(): ArrayCollection
		{
			return joinFormulaNodeList;
		}
		
		public function setOperation(operation: String): void
		{
			this.operation = operation;
		}
		
		public function getOperation(): String
		{
			return this.operation;
		}
		
		public function setNodeView(nodeView : String) : void
        {
        	this.nodeView = nodeView;
        }
        
        public function getNodeView() : String
        {
        	return this.nodeView;
        }
        
        public function initializeNode(x:int,y:int,name :String) : void
  		{
  			this.x = x;
  			this.y = y;
  			this.name = name; 
  		}
        /**
		* Read serialized data.
		*/
		public function readExternal(input:IDataInput): void 
		{
			this.name = input.readUTF();
			this.firstNodeExpressionId = input.readInt();
			this.secondNodeExpressionId = input.readInt();
			this.firstEntityName = input.readUTF();
			this.secondEntityName = input.readUTF();
			this.operation = input.readUTF();
			this.joinFormulaNodeList = input.readObject();
			this.nodeView = input.readUTF();
		}
        
        /**
         *  Write Searialized Data.
         */
        public function writeExternal(out:IDataOutput): void 
        {
        	//Alert.show("in write");
        	//Alert.show(this.firstEntityName);
        	out.writeUTF(this.name);
        	out.writeInt(this.firstNodeExpressionId);
        	out.writeInt(this.secondNodeExpressionId);
        	out.writeUTF(this.firstEntityName);
        	out.writeUTF(this.secondEntityName);        	
        	out.writeUTF(this.operation);
        	out.writeObject(this.joinFormulaNodeList);
        	out.writeUTF(this.nodeView);
        }
        
		/**
		 * This method creates a menu on Join Query box on UI.
		 */
		private function createMyMenu(event:MouseEvent):void
  		{
  			var myNewMenu: Menu = null;
  			//Alert.show("Node-> " + this.getNodeView() + "Parent View-> "+ this.parentApplication.view);
  			if(this.getNodeView() != this.parentApplication.view)
  			{
  				//This is the case when view is Result, so menu shoud be different and editing should be disabled
  				myNewMenu = Menu.createMenu(this, outputMenuData, true);
  			}
  			else
  			{
  				myNewMenu = Menu.createMenu(this, myMenuData, true);
  			}	
  			
  			myNewMenu.show(event.stageX,event.stageY);
			myNewMenu.addEventListener(MenuEvent.ITEM_CLICK, handleMenuEvent);
			myNewMenu.addEventListener(FaultEvent.FAULT, faultHandler);
  	   	}
  	   
  	   	/**
  	     * Handler method for Mouse click event on the Edit/Delete Menu.
  	     */ 
  	   	private function handleMenuEvent(event:MenuEvent):void
  	   	{ 	
  	   		if(event.label == DAGConstants.DELETE)
  	   	  	{
  	   	    	//To delete the Join Query Node	
  	   	      	deleteCustomNode();
  	   	  	}
  	   	  	else
  	   	  	{
  	   	  		//To edit the Join Query Node
  	   	  	 	editCustomFormula();
  	   	  	}
  	   	}
  	   
  	    /**
  	     * This method deletes the Join Query Node from backend.
  	     */ 
  	   	private function deleteCustomNode() : void
  	   	{
  	   		var nodeName : String = this.name;  	   	  
  	   	  	this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, nodeRemoveHandler);
  	   	  	this.parentApplication.rpcService.removeJoinFormula(nodeName);
          	//this.parentApplication.rpcService.addEventListener(FaultEvent.FAULT, faultHandler);
  	   	}
  	   
  	    /**
  	     * This method deletes the Join Query Node from UI.
  	     */ 
  	   	private function nodeRemoveHandler(event : ResultEvent) : void
  	   	{
  	   		var joinQueryNodeName : String = this.name; 
  	   	  
  	   	  	//Deriving line object Names which attaches the DagNode and Custom formula node
          	var nodesNumbers : Array = joinQueryNodeName.split("_");
          	var line1 : String = nodesNumbers[1] + "_" + joinQueryNodeName;    	   	  
  	   	  	var line2 : String = nodesNumbers[2] + "_" + joinQueryNodeName;
  	   	  	//Alert.show("line, line2 -> " + line1 + " , " + line2);
  	     
  	      	//this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT,nodeRemoveHandler);
  	    	//Deleting the Custom Formula Node and corresponding connecting Nodes 
          	this.parentApplication.deleteJoinQueryNode(joinQueryNodeName, line1, line2);  	   
  	   	}
  	   
  	   
		private function editCustomFormula() : void
  	   	{
			var joinQueryNode : JoinQueryNode = this;
			currentJoinQueryNode = joinQueryNode;
			this.parentApplication.operationforView = "edit"; //to get popwindow fields values 
			this.parentApplication.rpcService.retrieveEditJoinQueryData(joinQueryNode);
			this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT, nodeRemoveHandler);
			this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, editNodeHandler);  
			//this.parentApplication.rpcService.addEventListener(FaultEvent.FAULT, faultHandler);  
  	   	}
  	   
  	   	private function editNodeHandler(event : ResultEvent) : void
  	   	{
	  	   	obj = event.result as Object;
			this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT, editNodeHandler);
  	   		this.parentApplication.rpcService.getFormattedLabelForJQ(currentJoinQueryNode);
  	   		this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, handlerFormattedLabelForJQ);
  	   	}
  	   
		private function handlerFormattedLabelForJQ(event : ResultEvent): void
	  	{
	  		var formattedLabelList: ArrayCollection = event.result as ArrayCollection;
			this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT, handlerFormattedLabelForJQ);
			this.parentApplication.createAndPopulateJoinQueryPopUp(obj,
	  	   		"edit", currentJoinQueryNode, formattedLabelList);
					
	  	}
  	   
  	   	private function faultHandler (event:FaultEvent):void
	  	{
			Alert.show(event.fault.faultString, 'Error');
	 	}
	 	
	 



    //	supporting function definitions for properties, events, styles, effects
/**
 * @private
 **/
public function ___Button1_click(event:flash.events.MouseEvent):void
{
	createMyMenu(event)
}


	//	binding mgmt
    private var _bindings:Array;
    private var _watchers:Array;
    private function _JoinQueryNode_bindingsSetup():void
    {
        if (!_bindings)
        {
            _bindings = [];
        }

        if (!_watchers)
        {
            _watchers = [];
        }

        var binding:Binding;

        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (joinFormula);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                formulaLabel.text = _sourceFunctionReturnValue;
            },
            "formulaLabel.text");
        _bindings[0] = binding;
    }

    private function _JoinQueryNode_bindingExprs():void
    {
        var destination:*;
		[Binding(id='0')]
		destination = (joinFormula);
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil):void
    {
        (JoinQueryNode)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil;





    /**
     * @private
     **/
    public var _bindingsByDestination : Object;
    /**
     * @private
     **/
    public var _bindingsBeginWithWord : Object;

}

}
