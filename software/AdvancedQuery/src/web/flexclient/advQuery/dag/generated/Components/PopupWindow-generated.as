/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	Components
 *	Class: 		PopupWindow
 *	Source: 	E:\workplace\AdvancedQueryForJoin_NewCP\flexclient\advQuery\dag\Components\PopupWindow.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2009.04.07 12:38:46 GMT+05:30
 */

package Components
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.FocusEvent;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.HBox;
import mx.containers.TitleWindow;
import mx.containers.VBox;
import mx.controls.Button;
import mx.controls.ComboBox;
import mx.controls.Label;
import mx.controls.Spacer;
import mx.controls.TextInput;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.CloseEvent;
import mx.events.DropdownEvent;
import mx.events.FlexEvent;
import mx.events.ListEvent;
import mx.formatters.DateFormatter;
import mx.styles.*;
import mx.validators.StringValidator;



public class PopupWindow
	extends mx.containers.TitleWindow
{

	[Bindable]
/**
 * @private
 **/
	public var cancelButton : mx.controls.Button;

	[Bindable]
/**
 * @private
 **/
	public var cb1 : mx.controls.ComboBox;

	[Bindable]
/**
 * @private
 **/
	public var cb2 : mx.controls.ComboBox;

	[Bindable]
/**
 * @private
 **/
	public var cb3 : mx.controls.ComboBox;

	[Bindable]
/**
 * @private
 **/
	public var cb4 : mx.controls.ComboBox;

	[Bindable]
/**
 * @private
 **/
	public var cb5 : mx.controls.ComboBox;

	[Bindable]
/**
 * @private
 **/
	public var cb6 : mx.controls.ComboBox;

	[Bindable]
/**
 * @private
 **/
	public var columnLabel : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var customColumnName : mx.controls.TextInput;

	[Bindable]
/**
 * @private
 **/
	public var fieldVal : mx.validators.StringValidator;

	[Bindable]
/**
 * @private
 **/
	public var firstComboPlace : mx.containers.VBox;

	[Bindable]
/**
 * @private
 **/
	public var labelHBox : mx.containers.HBox;

	[Bindable]
/**
 * @private
 **/
	public var lb1 : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var lb2 : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var lb3 : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var lb4 : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var lb5 : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var lb6 : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var lb7 : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var myBox : mx.containers.HBox;

	[Bindable]
/**
 * @private
 **/
	public var secondComboPlace : mx.containers.VBox;

	[Bindable]
/**
 * @private
 **/
	public var submitButton : mx.controls.Button;

	[Bindable]
/**
 * @private
 **/
	public var timeFormatter : mx.formatters.DateFormatter;

	[Bindable]
/**
 * @private
 **/
	public var txtInput : mx.controls.TextInput;




private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.TitleWindow
  ,
  propertiesFactory: function():Object { return {
    width: 700,
    height: 255,
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.VBox
        ,
        stylesFactory: function():void {
          this.bottom = 15;
          this.top = 15;
          this.right = 15;
          this.left = 15;
        }
        ,
        propertiesFactory: function():Object { return {
          x: 20,
          y: 20,
          percentWidth: 100.0,
          percentHeight: 100.0,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.containers.HBox
              ,
              id: "labelHBox"
              ,
              propertiesFactory: function():Object { return {
                x: 20,
                y: 20,
                percentWidth: 100.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Label
                    ,
                    id: "lb1"
                    ,
                    stylesFactory: function():void {
                      this.color = 255;
                      this.fontStyle = "normal";
                      this.fontWeight = "bold";
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "label1",
                      width: 100,
                      height: 50,
                      buttonMode: true
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Label
                    ,
                    id: "lb2"
                    ,
                    stylesFactory: function():void {
                      this.color = 255;
                      this.fontStyle = "normal";
                      this.fontWeight = "bold";
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "label2",
                      width: 100,
                      height: 50,
                      buttonMode: true
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Label
                    ,
                    id: "lb3"
                    ,
                    stylesFactory: function():void {
                      this.color = 255;
                      this.fontStyle = "normal";
                      this.fontWeight = "bold";
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "label3",
                      width: 100,
                      height: 50,
                      buttonMode: true
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Label
                    ,
                    id: "lb4"
                    ,
                    stylesFactory: function():void {
                      this.color = 255;
                      this.fontStyle = "normal";
                      this.fontWeight = "bold";
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "label4",
                      width: 100,
                      height: 50
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Label
                    ,
                    id: "lb5"
                    ,
                    stylesFactory: function():void {
                      this.color = 255;
                      this.fontStyle = "normal";
                      this.fontWeight = "bold";
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "label5",
                      width: 100,
                      height: 50
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Label
                    ,
                    id: "lb6"
                    ,
                    stylesFactory: function():void {
                      this.color = 255;
                      this.fontStyle = "normal";
                      this.fontWeight = "bold";
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "label6",
                      width: 100,
                      height: 50
                    }}
                  })
                ]
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.containers.HBox
              ,
              id: "myBox"
              ,
              events: {
                creationComplete: "__myBox_creationComplete"
              }
              ,
              propertiesFactory: function():Object { return {
                x: 20,
                y: 60,
                percentWidth: 100.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.VBox
                    ,
                    id: "firstComboPlace"
                    ,
                    stylesFactory: function():void {
                      this.horizontalGap = 0;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      width: 100,
                      percentHeight: 100.0,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.ComboBox
                          ,
                          id: "cb1"
                          ,
                          events: {
                            change: "__cb1_change",
                            close: "__cb1_close"
                          }
                          ,
                          stylesFactory: function():void {
                            this.borderThickness = 0;
                            this.borderColor = 255;
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            width: 100,
                            prompt: "--Select--",
                            itemRenderer: _ClassFactory1_c(),
                            rowCount: 10,
                            toolTip: ""
                          }}
                        })
                      ]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.ComboBox
                    ,
                    id: "cb2"
                    ,
                    events: {
                      close: "__cb2_close",
                      change: "__cb2_change"
                    }
                    ,
                    stylesFactory: function():void {
                      this.borderThickness = 0;
                      this.borderColor = 255;
                      this.textAlign = "center";
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      width: 100,
                      prompt: "--Select--",
                      itemRenderer: _ClassFactory2_c(),
                      rowCount: 10,
                      toolTip: ""
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.VBox
                    ,
                    id: "secondComboPlace"
                    ,
                    stylesFactory: function():void {
                      this.horizontalGap = 0;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      width: 100,
                      percentHeight: 100.0,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.ComboBox
                          ,
                          id: "cb3"
                          ,
                          events: {
                            change: "__cb3_change",
                            close: "__cb3_close"
                          }
                          ,
                          stylesFactory: function():void {
                            this.borderThickness = 0;
                            this.borderColor = 255;
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            width: 100,
                            prompt: "--Select--",
                            itemRenderer: _ClassFactory3_c(),
                            rowCount: 10,
                            toolTip: ""
                          }}
                        })
                      ]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.ComboBox
                    ,
                    id: "cb4"
                    ,
                    events: {
                      close: "__cb4_close",
                      change: "__cb4_change"
                    }
                    ,
                    stylesFactory: function():void {
                      this.borderThickness = 0;
                      this.borderColor = 255;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      width: 100,
                      prompt: "--Select--",
                      itemRenderer: _ClassFactory4_c(),
                      rowCount: 10,
                      toolTip: ""
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.TextInput
                    ,
                    id: "txtInput"
                    ,
                    stylesFactory: function():void {
                      this.borderColor = 255;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "txtInput",
                      width: 100,
                      restrict: "0-9"
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.ComboBox
                    ,
                    id: "cb5"
                    ,
                    events: {
                      close: "__cb5_close"
                    }
                    ,
                    stylesFactory: function():void {
                      this.borderThickness = 0;
                      this.borderColor = 255;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "timeIntervalCb",
                      width: 100,
                      prompt: "--Select--",
                      itemRenderer: _ClassFactory5_c(),
                      rowCount: 10,
                      toolTip: ""
                    }}
                  })
                ]
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Spacer
              ,
              propertiesFactory: function():Object { return {
                height: 5
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.containers.HBox
              ,
              stylesFactory: function():void {
                this.horizontalGap = 6;
              }
              ,
              propertiesFactory: function():Object { return {
                x: 20,
                percentWidth: 100.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Label
                    ,
                    id: "columnLabel"
                    ,
                    stylesFactory: function():void {
                      this.paddingTop = 0;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      width: 170,
                      text: "Please Enter Column Name :"
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.TextInput
                    ,
                    id: "customColumnName"
                    ,
                    events: {
                      focusOut: "__customColumnName_focusOut"
                    }
                    ,
                    stylesFactory: function():void {
                      this.borderColor = 255;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      width: 250,
                      restrict: "0-9 A-Z a-z"
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.ComboBox
                    ,
                    id: "cb6"
                    ,
                    events: {
                      close: "__cb6_close"
                    }
                    ,
                    stylesFactory: function():void {
                      this.borderThickness = 0;
                      this.borderColor = 255;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "timeIntervalCb6",
                      width: 100,
                      prompt: "--Select--",
                      itemRenderer: _ClassFactory6_c(),
                      rowCount: 10,
                      toolTip: "",
                      visible: false
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Label
                    ,
                    id: "lb7"
                    ,
                    stylesFactory: function():void {
                      this.color = 255;
                      this.fontStyle = "normal";
                      this.fontWeight = "bold";
                      this.paddingTop = 0;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      name: "label6",
                      width: 100,
                      height: 50,
                      visible: false
                    }}
                  })
                ]
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.containers.HBox
              ,
              propertiesFactory: function():Object { return {
                x: 20,
                y: 50,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Button
                    ,
                    id: "submitButton"
                    ,
                    events: {
                      click: "__submitButton_click"
                    }
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Button
                    ,
                    id: "cancelButton"
                    ,
                    events: {
                      click: "__cancelButton_click"
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      label: "Cancel"
                    }}
                  })
                ]
              }}
            })
          ]
        }}
      })
    ]
  }}
})

    /**
     * @private
     **/
	public function PopupWindow()
	{
		super();

		mx_internal::_document = this;

		//	our style settings
		//	initialize component styles
		if (!this.styleDeclaration)
		{
			this.styleDeclaration = new CSSStyleDeclaration();
		}

		this.styleDeclaration.defaultFactory = function():void
		{
			this.borderColor = 255;
			this.backgroundColor = 16777215;
			this.left = 0;
			this.right = 0;
			this.borderThicknessLeft = 2;
			this.borderThicknessRight = 2;
			this.borderThicknessBottom = 2;
			this.borderThicknessTop = 5;
		};



		//	properties
		this.layout = "absolute";
		this.width = 700;
		this.height = 255;
		this.showCloseButton = true;
		_StringValidator1_i();
		_DateFormatter1_i();

		//	events
		this.addEventListener("close", ___TitleWindow1_close);
		this.addEventListener("creationComplete", ___TitleWindow1_creationComplete);

	}

    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);

		//	binding mgmt
		_PopupWindow_bindingsSetup();

		var target:PopupWindow = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_Components_PopupWindowWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					_bindings,
					_watchers);


		super.initialize();
	}


	 		import mx.utils.StringUtil;
	 		import mx.events.FlexEvent;
	 		import mx.controls.PopUpButton;
	 		import mx.formatters.Formatter;
	 		import mx.events.ValidationResultEvent;
	 		import mx.formatters.DateFormatter;
	 		import mx.controls.DateField;
	 		import mx.controls.DateChooser
	 		import mx.collections.ArrayCollection;
	 		import mx.controls.TextInput;
            import mx.managers.PopUpManager;
            import mx.controls.List;  
            import Components.DAGNode;
            import Components.CustomFormulaNode;  
            import mx.rpc.events.ResultEvent;
            import mx.rpc.events.FaultEvent;
           [Bindable]
           public var myArray1 : ArrayCollection; 
           
           [Bindable]
	 	   public var myArray2 : ArrayCollection;
	 	   
	 	   [Bindable]
	 		public var myArray3 : ArrayCollection;
	 		
	 		[Bindable]
	 		public var myArray4 : ArrayCollection;
	 		
	 		[Bindable]
	 		public var myArray5:ArrayCollection;
	 		
	 		[Bindable]
	 	    public var dataProvider : Object;
	 	    
	 	    [Bindable]
	 	    public var firstNodeDp : Object;
	 	    
	 	    [Bindable]
	 	    public var secondNodeDp : Object;
     		
     		[Bindable]
     		public var firstEntityName : String = null;
     		
     		[Bindable]
     		public var secondEntityName : String = null;
     		
     		[Bindable]
     		 public  var firstEntityExpId : int = 0;
     		 
     		[Bindable]
     		public var secondEntityExpId : int = 0;
     		
     		[Bindable]
     		public var nodeName : String = null;
     	
     		
     		//Declaring all Headers varibles
     		[Bindable] 
	 	    public var firstEntityLabel : String = null;
	 	    
	 	    [Bindable] 
	 	    public var secondEntityLabel : String = null;
	 	    
	 	    [Bindable]
	 	    private var arithmeticLabel : String = "Arithmetic" + "\n" +"Operators"; 
	 	    
	 	    [Bindable]
	 	    private var relationalLabel : String  = "Relational" + "\n" + "Operators";
	 	    
	 	    [Bindable]
	 	    private var timeValueLabel : String = "Time" + "\n" + "Value";
	 	    
	 	    [Bindable]
	 	    private var timeIntrvalLabel : String = "Time" + "\n" + "Interval" ;
	 	    
	 	    [Bindable]
	 	    public var buttonLabel : String = "OK";
	 	     
	 	    private var existingTextBox : TextInput = null;
	 	    
	 	    private var existingDatePicker : DateField = null;	 	    
	 	    private var existingTimeStampText : TextInput = null;
	 	    private var existingfirstOpComboBox : ComboBox = null;
	 	    private var existingSecondOpComboBox : ComboBox = null;
	 	    
	 	    private var  arithmeticOperand : String = null;
	 	    
	 	    private var existingTimeIntervalCb : ComboBox = null;
	 	    private var existingValueLabel : Label = null;
	 	    private var existingIntervalLabel : Label = null; 
	 	    private var valueLabel : Label = null;
	 	    private var intervalLabel : Label = null;
	 	    private var firstNodeList : ArrayCollection= null;
	 	    private var secondNodeList : ArrayCollection = null; 
	 	    private var existingPickerLabel : Label = null; 
	 	    private var existingTimeLabel : Label = null;
	 	   public function removeMe():void 
	 	   {
                PopUpManager.removePopUp(this); 
                this.parentApplication.operationforView=""; //to overcome from edit mode               
           }
           
           private function submitData():void
           {
           	  var flag:Boolean = validate();
           	  if(flag == false) 
           	  	 return;
           	  	   
		  	  var timeValue : String = null;
           	  var timeIntervalValue : String =  null;
           	  var customFormulaString : String = null;
           	  var customFormulaNode : CustomFormulaNode = new CustomFormulaNode();
           	  
           	  //Here based on the last control, the we get the selected value and pass as parameter
           	  existingTextBox = myBox.getChildByName("txtInput") as TextInput;
           	  if(existingTextBox == null)
           	  {
           	  	  //means there exists the datePicker
           	  	  existingDatePicker = myBox.getChildByName("datePicker") as DateField;
           	 	  existingTimeStampText = myBox.getChildByName("iTimeStampText") as TextInput;
           	 	  if((existingDatePicker != null) && (existingDatePicker.enabled == true ))
           	 	  {
           	 	    var month : String = (existingDatePicker.selectedDate.getMonth()+1).toString();
           	 	    if(month.length == 1)
           	 	    {
           	 	    	month = "0"+month;
           	 	    }
           	 	    var day : String = existingDatePicker.selectedDate.getDate().toString();
           	 	    if(day.length == 1)
           	 	    {
           	 	    	day = "0"+day;
           	 	    }
           	 	    if(existingTimeStampText != null){
	           	 	    timeValue = month + "/" + day +"/" + existingDatePicker.selectedDate.getFullYear() + " " + existingTimeStampText.text;
           	 	    }else{
           	 	    	timeValue = month + "/" + day +"/" + existingDatePicker.selectedDate.getFullYear();
           	 	    }
           	 	    customFormulaNode.setTimeValue(timeValue);
           	 	    customFormulaNode.setTimeInterval("null");
           	 	  }
           	 	  else
           	 	  {
           	 	  	  customFormulaNode.setTimeValue("null");
           	 	  	  customFormulaNode.setTimeInterval("null");
           	 	  } 	
           	  }
           	  else
           	  {
           	  	 if(this.parentApplication.view == "Result"){
           	  	   customFormulaNode.setTimeValue("null");
           	  	   customFormulaNode.setTimeInterval("null");
           	  	 }else{
           	  	   //Get the value of  text box and value of dropdown
           	  	   existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox;   
           	  	   if((existingTextBox.enabled == true) && (existingTimeIntervalCb != null) && (existingTimeIntervalCb.enabled == true))
           	  	   {
					    timeValue = existingTextBox.text;
					    customFormulaNode.setTimeValue(timeValue);
           	  	   		timeIntervalValue = existingTimeIntervalCb.selectedItem.toString();
           	  	   		customFormulaNode.setTimeInterval(timeIntervalValue);
           	  	   }else if(existingTextBox.enabled == true && existingTimeIntervalCb == null){
           	  	   		timeValue = existingTextBox.text;
           	  	   	    customFormulaNode.setTimeValue(timeValue);
           	  	   	    customFormulaNode.setTimeInterval("null");
           	  	   }
           	  	   else
           	  	   {
           	  	   	  customFormulaNode.setTimeValue("null");
           	  	   	  customFormulaNode.setTimeInterval("null");
           	  	   }
           	  	 }
           	  }
           	  
           	//Getting the left and right operands
		 	 customFormulaNode.setFirstSelectedAttrName(cb1.selectedItem.toString());
             customFormulaNode.setSecondSelectedAttrName(cb3.selectedItem.toString());           	
			 
			 existingfirstOpComboBox= firstComboPlace.getChildByName("fstOpComboBox") as ComboBox;
			 if(existingfirstOpComboBox != null){
			 	customFormulaNode.setQAttrInterval1(existingfirstOpComboBox.selectedItem.toString());	
			 }
			 else{
			 	customFormulaNode.setQAttrInterval1("null");	
			 }
			 
			 existingSecondOpComboBox= secondComboPlace.getChildByName("secondOpComboBox") as ComboBox;
			 if(existingSecondOpComboBox != null){
			 	customFormulaNode.setQAttrInterval2(existingSecondOpComboBox.selectedItem.toString());	
			 }
			 else{
			 	customFormulaNode.setQAttrInterval2("null");	
			 }
           	//Getting left and right entities property list containing <attributeId , attributeTyep>
           	 firstNodeList = firstNodeDp[cb1.selectedItem.toString()];
           	 secondNodeList = secondNodeDp[cb3.selectedItem.toString()];	
           	 customFormulaNode.setFirstSelectedAttrType(String(firstNodeList.getItemAt(1)));
           	 customFormulaNode.setSecondSelectedAttrType(String(secondNodeList.getItemAt(1)));	
           	 //Getting Id's of Attributes
           	 customFormulaNode.setFirstSelectedAttrId(String(firstNodeList.getItemAt(0)));
             customFormulaNode.setSecondSelectedAttrId(String(secondNodeList.getItemAt(0))); 
            //Setting the selected Arithmetic Operator
            customFormulaNode.setSelectedArithmeticOp(cb2.selectedItem.toString());
            
            //Setting the first selected DAG Nodes Properties
	            customFormulaNode.setFirstNodeName(firstEntityName); 
	            customFormulaNode.setFirstNodeExpId(firstEntityExpId); 
	              
	            //Setting the second selected DAG Nodes Properties
	            customFormulaNode.setSecondNodeName(secondEntityName);
	            customFormulaNode.setSecondNodeExpId(secondEntityExpId);
	            
	            customFormulaNode.name = nodeName;
            if(this.parentApplication.view == "Result")
            {
            	customFormulaNode.setSelectedLogicalOp("null");
             	customFormulaString = firstEntityName+"."+cb1.selectedItem + "\n "+ cb2.selectedItem + " \n" +secondEntityName+"."+cb3.selectedItem;
                //Setting custom column Name      
		        customFormulaNode.setCustomColumnName(customColumnName.text);     
		        customFormulaNode.setCCInterval(cb6.selectedItem.toString());
            }else{ 
	            //Setting theselected logical operator
	            customFormulaNode.setSelectedLogicalOp(cb4.selectedItem.toString());  
	             
	            if(timeIntervalValue != null){
	             	customFormulaString = firstEntityName+"."+cb1.selectedItem + "\n "+ cb2.selectedItem + " \n" +secondEntityName+"."+cb3.selectedItem + "\n" + cb4.selectedItem + " " + timeValue + " " +  timeIntervalValue;
	            }else{
	              	customFormulaString =  firstEntityName+"."+cb1.selectedItem+ " \n"+ cb2.selectedItem + "\n " + secondEntityName+"."+cb3.selectedItem  + "\n" + cb4.selectedItem + " " + timeValue ;
	            }
	            //Setting custom column Name      
		        customFormulaNode.setCustomColumnName(customColumnName.text);     
		        customFormulaNode.setCCInterval("null");
            }
            
            
	        
	        //Setting the node view
	        customFormulaNode.setNodeView(this.parentApplication.view);
	        
            parentApplication.customFormulaString = customFormulaString;
            //this.parentApplication.rpcService.addEventListener(FaultEvent.FAULT, faultHandler);

            if(submitButton.label == "OK")
            {              	 
              this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,editCustomNodeHandler);
              this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, resultHandler);
              customFormulaNode.setOperation("create");
              this.parentApplication.rpcService.formTemporalQuery(customFormulaNode, "add");
            }
            else
            {
                 this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,resultHandler);
                 this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, editCustomNodeHandler);
                 customFormulaNode.setOperation("edit");
                 this.parentApplication.rpcService.formTemporalQuery(customFormulaNode, "edit");
                 this.parentApplication.operationforView=""; //to overcome from edit mode	
            }
                         	   
       } 
       
       private function editCustomNodeHandler(event : ResultEvent) : void
       {
       	  var node  : CustomFormulaNode = event.result as CustomFormulaNode;
       	  this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,resultHandler);
          this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,editCustomNodeHandler);
          parentApplication.addCustomFromulaNode(node);
       } 

	   public function  resultHandler(event : ResultEvent):void
       {
           var node  : CustomFormulaNode = event.result as CustomFormulaNode;
           this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT, resultHandler);
           parentApplication.addCustomFromulaNode(node);
       }  
      /* private function faultHandler (event:FaultEvent):void
	  {
		  AlertManager.showError(event.fault.faultString);
	  } */
	  
           private function addInputControl() : void
           {
           	  			//IN case of subtraction of two dates, it should be something integer 
           	 	        existingDatePicker = myBox.getChildByName("datePicker") as DateField;
           	 	        
           	 	        //IN case of subtraction of two dates, it should be something integer
           	 	        existingTimeStampText = myBox.getChildByName("iTimeStampText") as TextInput;
           	 	        existingTimeLabel = labelHBox.getChildByName("rhsTimeLabel") as Label;
           	 	        if(existingDatePicker != null)
           	 	        {
           	 	        	myBox.removeChild(existingDatePicker);
           	 	        }
           	 	        if(existingTimeStampText != null)           	 	        
           	 	        	myBox.removeChild(existingTimeStampText);
           	 	        	
           	 	        if(existingTimeLabel)
           	 	        	labelHBox.removeChild(existingTimeLabel);  
           	 	        
           	 	        //Removing existing date Picker Label 
           	 	        existingPickerLabel = labelHBox.getChildByName("datePickerLabel") as Label;
           	 	        if(existingPickerLabel != null)
           	 	        {
           	 	        	labelHBox.removeChild(existingPickerLabel);
           	 	        }

           	 	        existingValueLabel = labelHBox.getChildByName("label5") as Label;
           	 	        if(existingValueLabel == null)
           	 	        {
           	 	        	//Add New label
           	 	        	valueLabel = new Label();
           	 	        	valueLabel.id = "lb5";
           	 	        	valueLabel.name = "label5";
           	 	        	valueLabel.text = "Time Value";
           	 	        	valueLabel.width = 100;
           	 	        	valueLabel.buttonMode = true;
           	 	        	valueLabel.setStyle("color","#0000FF");   				
   				 			valueLabel.setStyle("fontWeight","bold"); 
           	 	        	labelHBox.addChild(valueLabel);
           	 	        }
           	 	        existingIntervalLabel = labelHBox.getChildByName("label6") as Label;
           	 	        if(existingIntervalLabel == null)
           	 	        {
           	 	        	intervalLabel = new Label();
           	 	        	intervalLabel.id = "lb6";
           	 	        	intervalLabel.name ="label6";
           	 	        	intervalLabel.text = "Time Interval";
           	 	        	intervalLabel.width = 100;
           	 	            intervalLabel.buttonMode = true; 
           	 	            intervalLabel.setStyle("color","#0000FF");   				
   				 			intervalLabel.setStyle("fontWeight","bold");           	 	            
           	 	            labelHBox.addChild(intervalLabel);
           	 	        }
           	 	        
           	 	        existingTextBox = myBox.getChildByName("txtInput") as TextInput;
           	 	        if(existingTextBox == null)
           	 	        {
           	 	        	//If no text input exists, create text input
           	 	        	var textBox : TextInput = new TextInput();
           	   				textBox.id = "txtInput";
           	   				textBox.name = "txtInput"
						    textBox.width = 100;
						    textBox.setStyle("borderColor","blue");
           	   				myBox.addChild(textBox);
           	 	        }
           	 	        existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox;   
                       if(existingTimeIntervalCb == null)
                       {
                       	   var comboBox : ComboBox = new ComboBox();
                       	   comboBox.id = "cb5";
                       	   comboBox.name = "timeIntervalCb";
                       	   comboBox.width = 100;
                           comboBox.rowCount = 10;
                       	   comboBox.dataProvider = myArray5;
                       	   comboBox.setStyle("borderColor","blue");
                       	   myBox.addChild(comboBox);
                       	   
                       }
           	
           } 
          
           private function validateQueryData():void
           {
           	  	var firstOperandType : String  = null; 
           	  	var secondOperandType : String = null;
		 		var firstOperand : String = "";
		 		var secondOperand : String = "";
			 	var firstNodeAttributeId : String = null;
			 	var secondNodeAttributeId :String = null;

			 	if(cb1.selectedIndex > -1){
			 		firstOperand = cb1.selectedItem.toString();           	 	          	 		
           	 		firstNodeList = firstNodeDp[firstOperand];           	 	
           	 		firstOperandType = String(firstNodeList.getItemAt(1));
           		}       		
           		           		
           	 	if(firstOperandType == "Integer") 
           	 	{
           	 	    //Creating the ComboBox
   	       			existingfirstOpComboBox= firstComboPlace.getChildByName("fstOpComboBox") as ComboBox;
   	       			if(existingfirstOpComboBox == null)
   	 	        	{
   	 	        		var firstOpComboBox : ComboBox =  new ComboBox();
       	       			firstOpComboBox.id = "fstOpComboBox";
       	       			firstOpComboBox.name = "fstOpComboBox";
       	       			firstOpComboBox.dataProvider = myArray5;       	       		  	              
       	              	firstOpComboBox.rowCount = 10;
       	              	       	       			
       	       			//Adding datePicket as childs
       	 	   			firstComboPlace.addChild(firstOpComboBox);       	 	   			 
   	 	     		}	
           	 	}else{
           	 		existingfirstOpComboBox= firstComboPlace.getChildByName("fstOpComboBox") as ComboBox;
					if(existingfirstOpComboBox != null){           	 		
   	 	        		firstComboPlace.removeChild(existingfirstOpComboBox);
   	 				}
           	 	}
           	 	
           	 	if(cb3.selectedIndex > -1){
			 		secondOperand = cb3.selectedItem.toString();           	 	          	 		
           	 		secondNodeList = secondNodeDp[secondOperand];           	 	
           	 		secondOperandType = String(secondNodeList.getItemAt(1));
           		}
           		
           	 	if(secondOperandType == "Integer") 
           	 	{
           	 	    //Creating the ComboBox
   	       			existingSecondOpComboBox= secondComboPlace.getChildByName("secondOpComboBox") as ComboBox;   	       			
   	 	        	if(existingSecondOpComboBox == null)
   	 	        	{
   	 	        		var secondOpComboBox : ComboBox =  new ComboBox();
       	       			secondOpComboBox.id = "secondOpComboBox";
       	       			secondOpComboBox.name = "secondOpComboBox";
       	       			secondOpComboBox.dataProvider = myArray5;       	       		  	              
       	              	secondOpComboBox.rowCount = 10;       	       			
       	       			//Adding datePicket as childs
       	 	   			secondComboPlace.addChild(secondOpComboBox);       	 	   			 
   	 	     		}	
           	 	}else{
           	 		existingSecondOpComboBox= secondComboPlace.getChildByName("secondOpComboBox") as ComboBox;           	 		
   	 	        	if(existingSecondOpComboBox != null)
           	 			secondComboPlace.removeChild(existingSecondOpComboBox);
           	 	} 	 
			 	if(cb1.selectedIndex > -1 && cb2.selectedIndex > -1 && cb3.selectedIndex > -1)
    	     	{
           	 	    if((firstOperandType == "Date") && (secondOperandType == "Date"))
           	 	    {
           	 			arithmeticOperand= cb2.selectedItem.toString();
           	 	    	if((arithmeticOperand == "+") || (arithmeticOperand == "/") || (arithmeticOperand == "*"))
           	 	    	{
           	 	    		AlertManager.showWarning("A date/timestamp may only be subtracted from another date/timestamp.  Please change the operator to a minus sign.");           	 	    		
           	 	    		createBigTip("A date/timestamp may only be subtracted from another date/timestamp.  Please change the operator to a minus sign.");
           	 	    	}
           	 	    	else
           	 	    	{
           	 	    		destroyBigTip();
           	 	    	  	addInputControl();         	 	    
           	 	    	}
           	 		}
           	 		else if((firstOperandType == "TimeStamp") && (secondOperandType == "TimeStamp"))
           	 		{
           	 	    	existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox; 
       	       			if(existingTimeIntervalCb != null)
       	       			{
       	       				myBox.removeChild(existingTimeIntervalCb);
       	       				
       	       				//Remove the Time Interval Label
       	       				existingIntervalLabel = labelHBox.getChildByName("label6") as Label;
       	       				if(existingIntervalLabel != null)
       	       				{
       	       				   labelHBox.removeChild(existingIntervalLabel);	
       	       				}
       	       			}
       	       			
           	 	    	existingfirstOpComboBox= firstComboPlace.getChildByName("fstOpComboBox") as ComboBox;
						if(existingfirstOpComboBox != null){           	 		
	   	 	        		firstComboPlace.removeChild(existingfirstOpComboBox);
	   	 				}
           	 				
       	       			existingSecondOpComboBox= secondComboPlace.getChildByName("secondOpComboBox") as ComboBox;           	 		
   	 	        		if(existingSecondOpComboBox != null){
           	 				secondComboPlace.removeChild(existingSecondOpComboBox);
   	 	        		}
   	 	        		
   	 	        		//add date time picker in Timestamp case only
   	 	        		addDatePicker();
   	 	        		addTimePicker();
           	 		} 
           	 		else if(firstOperandType.match("Integer") && secondOperandType.match("Integer"))
           	 		{
           	 			//IN case of subtraction of two dates, it should be something integer 
           	 	    	addInputControl();
           	 			existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox; 
       	       			if(existingTimeIntervalCb != null)
       	       			{
       	       				myBox.removeChild(existingTimeIntervalCb);
       	       				
       	       				//Remove the Time Interval Label
       	       				existingIntervalLabel = labelHBox.getChildByName("label6") as Label;
       	       				if(existingIntervalLabel != null)
       	       				{
       	       				   labelHBox.removeChild(existingIntervalLabel);	
       	       				}
       	       			}
       	       			
       	       			existingfirstOpComboBox= firstComboPlace.getChildByName("fstOpComboBox") as ComboBox;
						if(existingfirstOpComboBox != null){           	 		
	   	 	        		firstComboPlace.removeChild(existingfirstOpComboBox);
	   	 				}
           	 				
       	       			existingSecondOpComboBox= secondComboPlace.getChildByName("secondOpComboBox") as ComboBox;           	 		
   	 	        		if(existingSecondOpComboBox != null){
           	 				secondComboPlace.removeChild(existingSecondOpComboBox);
   	 	        		}
   	 	        		
           	 				
           	 		}
           	 		else if((firstOperandType=="Integer" && secondOperandType=="Date") && (cb2.selectedItem.toString()=="-"))
           	 		{
           	 			AlertManager.showWarning("A date/timestamp may not be subtracted from a quantitative attribute.  Please change the operator to a plus sign.");
           	 			createBigTip("A date/timestamp may not be subtracted from a quantitative attribute.  Please change the operator to a plus sign.");
           	 		}
           	 		else
           	 		{
           	 	    	destroyBigTip();
           	 	    	//here any of the operand is Date and another is Integer, we should use DatePicker
           	 	    	arithmeticOperand= cb2.selectedItem.toString();
           	 	   	 	if((arithmeticOperand == "/") || (arithmeticOperand == "*") )
           	 	    	{
           	 	    		AlertManager.showWarning("A date/timestamp may only be subtracted from another date/timestamp.  Please change the operator to a minus sign.");
           	 	    		createBigTip("A date/timestamp may only be subtracted from another date/timestamp.  Please change the operator to a minus sign.");
           	 	    	}
           	 	    	else
           	 	    	{
           	 	    		destroyBigTip();
           	 	    		if(this.parentApplication.view != "Result"){          	 	    		
	           	 	    		//Removing text Box
	           	 	    		existingTextBox = myBox.getChildByName("txtInput") as TextInput;
	           	   				var value : String =  null;
	           	   				if(existingTextBox != null)
	           	   				{
	           	   	 	    		value = existingTextBox.text;
	           	   	   				myBox.removeChild(existingTextBox);
	           	   	   				
	           	   	   				//Remove the Time Value Label
		           	 	        	existingValueLabel = labelHBox.getChildByName("label5") as Label;
		           	 	        	if(existingValueLabel != null)
		           	 	        	{
		           	 	        		labelHBox.removeChild(existingValueLabel);
		           	 	        	}
	           	        		}
	           	        	
	           	        		//Removing time interval ComboBox
	           	        		existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox; 
	           	       			if(existingTimeIntervalCb != null)
	           	       			{
	           	       				myBox.removeChild(existingTimeIntervalCb);
	           	       				
	           	       				//Remove the Time Interval Label
	           	       				existingIntervalLabel = labelHBox.getChildByName("label6") as Label;
	           	       				if(existingIntervalLabel != null)
	           	       				{
	           	       				   labelHBox.removeChild(existingIntervalLabel);	
	           	       				}
	           	       			}
	           	       		
								addDatePicker();
									           	       			
	           	 	    	}
           	 	    	}
           	 		}
        	  	}
           	}
           	private function addTimePicker():void{
           	 	existingTimeStampText = myBox.getChildByName("iTimeStampText") as TextInput;
           		if(existingTimeStampText == null){
	           		var timeStampText : TextInput =  new TextInput();
	      			timeStampText.id = "iTimeStampText";
	      			timeStampText.name = "iTimeStampText";
	      			timeStampText.width = 100;
	      			timeStampText.focusEnabled = true;
	      			timeStampText.text = "00:00:00";
	      			timeStampText.setStyle("boderColor","#000FF");
	      			//Adding timeStampText as childs
		   			myBox.addChild(timeStampText);
           		}
           		
           		existingTimeLabel = labelHBox.getChildByName("rhsTimeLabel") as Label;
           		if(existingTimeLabel == null){
	   				var pickerTimeLabel : Label = new Label();
	           	 	pickerTimeLabel.name = "rhsTimeLabel";
	           	 	pickerTimeLabel.text = "Select Time(HH:MM:SS)"; 
	           	 	pickerTimeLabel.width = 100;	 	   				
	   				pickerTimeLabel.setStyle("color","#0000FF");   				
	   				pickerTimeLabel.setStyle("fontWeight","bold");
	   				//Adding label as childs
	           	 	labelHBox.addChild(pickerTimeLabel);
	           	 }
           	}
           	
           	private function addDatePicker():void{
           		//Creating the Date time Picker with lables
      			existingDatePicker= myBox.getChildByName("datePicker") as DateField;
	        	if(existingDatePicker == null)
	        	{
	        		var datePicker : DateField =  new DateField();
          			datePicker.id = "datePicker";
          			datePicker.name = "datePicker";
          			datePicker.width = 100;
          			datePicker.focusEnabled = true;
          			datePicker.formatString = "MM/DD/YYYY";
               		datePicker.showToday = true;
               		datePicker.yearNavigationEnabled =true;		           	            	
               		datePicker.setStyle("boderColor","#000FF");
                    datePicker.addEventListener(FlexEvent.CREATION_COMPLETE,showTodayDateHandler);
   	            	//Adding datePicket as childs
    	   			myBox.addChild(datePicker); 			
	    	    }
	    	    //Creating the DatePicker Label
	    	    existingPickerLabel = labelHBox.getChildByName("datePickerLabel") as Label;
	    	    if(existingPickerLabel == null)
	    	    {
	    	   	  var pickerLabel : Label = new Label();
	    	   	  pickerLabel.name = "datePickerLabel";
	    	   	  pickerLabel.text = "Select Date";           	 	    	   	  
	    	   	  pickerLabel.setStyle("color","#0000FF");   				
   			 	  pickerLabel.setStyle("fontWeight","bold");
   			 	  //adding label as child
	    	   	  labelHBox.addChild(pickerLabel);	           	 	    	   	
	    	    }
           	}
           	/*
                This method will enable/Disable the right hand side controls based on the relational operator selected
            */
           	private function righthandSideHandler():void
           	{ 
           		
           		//get the value text box and time Interval picker and datePicker
           		existingTextBox = myBox.getChildByName("txtInput") as TextInput;
           		existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox; 
           		existingDatePicker= myBox.getChildByName("datePicker") as DateField;
           		
           		//If relational operator is "S NUll" or "Is Not Null", then deactivate the right hand side controls else activate them   
           		if((cb4.selectedItem.toString()=="Is Null") || (cb4.selectedItem.toString()=="Is Not Null"))
           		{
           			if((existingTextBox != null) && (existingTimeIntervalCb != null))
           			{
           				//deactivate both of them
           				existingTextBox.enabled = false;
           				existingTimeIntervalCb.enabled = false;
           			}
           			else
           			{
           				//It's going to be datePicker, so disable date picker
           			   	 if(existingDatePicker != null)
           			   	 {
           			   	 	existingDatePicker.enabled = false;
           			   	 }
           			}
           		}
           		else
           		{
           			//Activate controls if they are disabled 
           			if((existingTextBox != null) && (existingTimeIntervalCb != null))
           			{
           				if((existingTextBox.enabled== false) && (existingTimeIntervalCb.enabled == false))
           				{
           					existingTextBox.enabled = true;
           					existingTimeIntervalCb.enabled =  true; 
           				}
           			}
           			else
           			{
           				if((existingDatePicker != null) && (existingDatePicker.enabled == false))
           				{
           					existingDatePicker.enabled =  true;
           				}
           			}
           		}
            }
            
            public function removeTimestampText():void{               	       	 
   	       	 //Removing time interval TimeStampText
           	existingTimeStampText = myBox.getChildByName("iTimeStampText") as TextInput;
           	existingTimeLabel = labelHBox.getChildByName("rhsTimeLabel") as Label;
           	if(existingTimeStampText != null){
           			myBox.removeChild(existingTimeStampText);
           			labelHBox.removeChild(existingTimeLabel);
           		}
           	}       	 
            /**
			   truncateLongText function is doing the truncatation of Label and create a elipses like "..." 
			   and set value to comboBox text.  
			*/				
    		public function truncateLongText(e : Event):void{   
    					 
    			var txt:String = e.currentTarget.itemToLabel(e.currentTarget.selectedItem);  			
    			e.currentTarget.toolTip=txt; 
    			if(txt.length >= 11)
    				e.currentTarget.text =  txt.substring(0,9).toString() + "...";    			 		   		       		    
    		}
    		
    		/**
    			validateComboboxText function is create to validate first element of arraylist
    			here if a dropdown list contains only on item then it will show in comboBox as selected item
    			if item length is more than 1 then i will show prompt like "-select-" and store item text to myToolTip variable for further refrence.    			 
    		*/ 		
    		public function validateComboboxText():void{    			
    			if(this.parentApplication.operationforView==""){ 
					 if(myArray1.length <= 1){
		    			 cb1.selectedIndex = 0;
		    			 cb1.toolTip=cb1.selectedLabel.toString();
		    		 }else{
						cb1.selectedIndex = -1;
						cb1.toolTip=cb1.selectedLabel.toString();
		    		 }
					 
					 if(myArray2.length <= 1){
						cb2.selectedIndex = 0;
						cb2.toolTip=cb2.selectedLabel.toString();
					 }else{
						cb2.selectedIndex = -1;
						cb2.toolTip=cb2.selectedLabel.toString();
					 }
					    			 
					 if(myArray3.length <= 1){
						cb3.selectedIndex = 0;
						cb3.toolTip=cb3.selectedLabel.toString();
					 }else{
						cb3.selectedIndex = -1;
						cb3.toolTip=cb3.selectedLabel.toString();
					 }
					
					 if(myArray4.length <= 1){
						cb4.selectedIndex = 0;
						cb4.toolTip=cb4.selectedLabel.toString();
					 }else{
						cb4.selectedIndex = -1;
						cb4.toolTip=cb4.selectedLabel.toString();
					 }    			 
					 
					 if(myArray5.length <= 1){
						cb5.selectedIndex = 0;
						cb5.toolTip=cb5.selectedLabel.toString();
					 }else{
						cb5.selectedIndex = -1;
						cb5.toolTip=cb5.selectedLabel.toString();
					 }
    			 }
    		}
    		
    		private function validate():Boolean{    			
    			var strVal:StringValidator = new StringValidator();    			
                strVal.source = customColumnName;
                strVal.property = "text";
                strVal.required = true;
                
                var event:ValidationResultEvent = strVal.validate();
				var currentControlIsValid:Boolean = (event.type == ValidationResultEvent.VALID);
				return currentControlIsValid;                                         	           	  				
    		}    		    		
			
			/**
    			createBigTip function is create a errorString which is displayed while validation messages appears.
    			it will disable submitButton control.    			  
    		*/ 	
		    private function createBigTip(s:String):void {		      
		      submitButton.enabled=false;
		      submitButton.errorString = s;		           
		    }
			
			/**
    			destroyBigTip function is remove a errorString which was displayed while validation messages appears.
    			it will enable submitButton control.    			  
    		*/
		    private function destroyBigTip():void {
		      submitButton.enabled=true;
		      submitButton.errorString="";		      
		      
		    }
		    /**
		       for calculare query remove component
		    */
		    private function removeComponent():void {
		      if(this.parentApplication.view=="Result"){
		      	cb4.visible = false;
		      	cb5.visible = false;
		      	txtInput.visible = false;
		      	lb4.visible = false;
		      	lb5.visible = false;
		      	lb6.visible = false;
		      	cb6.visible = true;
		      	lb7.visible = true;
		      }else{
		      	cb4.visible = true;
		      	cb5.visible = true;
		      	txtInput.visible = true;
		      	lb4.visible = true;
		      	lb5.visible = true;
		      	lb6.visible = true;
		      	cb6.visible = false;
		      	lb7.visible = false;
		      }
		    }
		    
    		/**
		       setting default values for today date and current time
		    */
    		private function showTodayDateHandler(event:FlexEvent):void{
    			if(this.parentApplication.operationforView != "edit"){
	           		existingDatePicker= myBox.getChildByName("datePicker") as DateField;
	           		existingDatePicker.selectedDate = new Date();
       			}           		
           	}     	  
	 	



    //	supporting function definitions for properties, events, styles, effects
private function _StringValidator1_i() : mx.validators.StringValidator
{
	var temp : mx.validators.StringValidator = new mx.validators.StringValidator();
	fieldVal = temp;
	temp.property = "text";
	temp.required = true;
	mx.binding.BindingManager.executeBindings(this, "fieldVal", fieldVal);
	temp.initialized(this, "fieldVal")
	return temp;
}

private function _DateFormatter1_i() : mx.formatters.DateFormatter
{
	var temp : mx.formatters.DateFormatter = new mx.formatters.DateFormatter();
	timeFormatter = temp;
	temp.formatString = "HH:MM:SS";
	return temp;
}

/**
 * @private
 **/
public function ___TitleWindow1_close(event:mx.events.CloseEvent):void
{
	removeMe();
}

/**
 * @private
 **/
public function ___TitleWindow1_creationComplete(event:mx.events.FlexEvent):void
{
	removeComponent()
}

/**
 * @private
 **/
public function __myBox_creationComplete(event:mx.events.FlexEvent):void
{
	validateComboboxText()
}

private function _ClassFactory1_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = mx.controls.Label;
	return temp;
}

/**
 * @private
 **/
public function __cb1_change(event:mx.events.ListEvent):void
{
	validateQueryData()
}

/**
 * @private
 **/
public function __cb1_close(event:mx.events.DropdownEvent):void
{
	truncateLongText(event)
}

private function _ClassFactory2_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = mx.controls.Label;
	return temp;
}

/**
 * @private
 **/
public function __cb2_close(event:mx.events.DropdownEvent):void
{
	truncateLongText(event)
}

/**
 * @private
 **/
public function __cb2_change(event:mx.events.ListEvent):void
{
	validateQueryData()
}

private function _ClassFactory3_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = mx.controls.Label;
	return temp;
}

/**
 * @private
 **/
public function __cb3_change(event:mx.events.ListEvent):void
{
	validateQueryData()
}

/**
 * @private
 **/
public function __cb3_close(event:mx.events.DropdownEvent):void
{
	truncateLongText(event)
}

private function _ClassFactory4_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = mx.controls.Label;
	return temp;
}

/**
 * @private
 **/
public function __cb4_close(event:mx.events.DropdownEvent):void
{
	truncateLongText(event)
}

/**
 * @private
 **/
public function __cb4_change(event:mx.events.ListEvent):void
{
	righthandSideHandler()
}

private function _ClassFactory5_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = mx.controls.Label;
	return temp;
}

/**
 * @private
 **/
public function __cb5_close(event:mx.events.DropdownEvent):void
{
	truncateLongText(event)
}

/**
 * @private
 **/
public function __customColumnName_focusOut(event:flash.events.FocusEvent):void
{
	validate()
}

private function _ClassFactory6_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = mx.controls.Label;
	return temp;
}

/**
 * @private
 **/
public function __cb6_close(event:mx.events.DropdownEvent):void
{
	truncateLongText(event)
}

/**
 * @private
 **/
public function __submitButton_click(event:flash.events.MouseEvent):void
{
	submitData();
}

/**
 * @private
 **/
public function __cancelButton_click(event:flash.events.MouseEvent):void
{
	removeMe();
}


	//	binding mgmt
    private var _bindings:Array;
    private var _watchers:Array;
    private function _PopupWindow_bindingsSetup():void
    {
        if (!_bindings)
        {
            _bindings = [];
        }

        if (!_watchers)
        {
            _watchers = [];
        }

        var binding:Binding;

        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (customColumnName);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                fieldVal.source = _sourceFunctionReturnValue;
            },
            "fieldVal.source");
        _bindings[0] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (firstEntityLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                lb1.text = _sourceFunctionReturnValue;
            },
            "lb1.text");
        _bindings[1] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (arithmeticLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                lb2.text = _sourceFunctionReturnValue;
            },
            "lb2.text");
        _bindings[2] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (secondEntityLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                lb3.text = _sourceFunctionReturnValue;
            },
            "lb3.text");
        _bindings[3] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (relationalLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                lb4.text = _sourceFunctionReturnValue;
            },
            "lb4.text");
        _bindings[4] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (timeValueLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                lb5.text = _sourceFunctionReturnValue;
            },
            "lb5.text");
        _bindings[5] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (timeIntrvalLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                lb6.text = _sourceFunctionReturnValue;
            },
            "lb6.text");
        _bindings[6] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (myArray1);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                cb1.dataProvider = _sourceFunctionReturnValue;
            },
            "cb1.dataProvider");
        _bindings[7] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (myArray2);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                cb2.dataProvider = _sourceFunctionReturnValue;
            },
            "cb2.dataProvider");
        _bindings[8] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (myArray3);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                cb3.dataProvider = _sourceFunctionReturnValue;
            },
            "cb3.dataProvider");
        _bindings[9] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (myArray4);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                cb4.dataProvider = _sourceFunctionReturnValue;
            },
            "cb4.dataProvider");
        _bindings[10] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (myArray5);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                cb5.dataProvider = _sourceFunctionReturnValue;
            },
            "cb5.dataProvider");
        _bindings[11] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (myArray5);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                cb6.dataProvider = _sourceFunctionReturnValue;
            },
            "cb6.dataProvider");
        _bindings[12] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (timeIntrvalLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                lb7.text = _sourceFunctionReturnValue;
            },
            "lb7.text");
        _bindings[13] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (buttonLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                submitButton.label = _sourceFunctionReturnValue;
            },
            "submitButton.label");
        _bindings[14] = binding;
    }

    private function _PopupWindow_bindingExprs():void
    {
        var destination:*;
		[Binding(id='0')]
		destination = (customColumnName);
		[Binding(id='1')]
		destination = (firstEntityLabel);
		[Binding(id='2')]
		destination = (arithmeticLabel);
		[Binding(id='3')]
		destination = (secondEntityLabel);
		[Binding(id='4')]
		destination = (relationalLabel);
		[Binding(id='5')]
		destination = (timeValueLabel);
		[Binding(id='6')]
		destination = (timeIntrvalLabel);
		[Binding(id='7')]
		destination = (myArray1);
		[Binding(id='8')]
		destination = (myArray2);
		[Binding(id='9')]
		destination = (myArray3);
		[Binding(id='10')]
		destination = (myArray4);
		[Binding(id='11')]
		destination = (myArray5);
		[Binding(id='12')]
		destination = (myArray5);
		[Binding(id='13')]
		destination = (timeIntrvalLabel);
		[Binding(id='14')]
		destination = (buttonLabel);
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil):void
    {
        (PopupWindow)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil;





    /**
     * @private
     **/
    public var _bindingsByDestination : Object;
    /**
     * @private
     **/
    public var _bindingsBeginWithWord : Object;

}

}
