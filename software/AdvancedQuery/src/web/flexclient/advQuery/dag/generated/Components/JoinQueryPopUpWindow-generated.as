/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	Components
 *	Class: 		JoinQueryPopUpWindow
 *	Source: 	E:\workplace\AdvancedQueryForJoin_NewCP\flexclient\advQuery\dag\Components\JoinQueryPopUpWindow.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2009.04.07 12:38:45 GMT+05:30
 */

package Components
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.HBox;
import mx.containers.TitleWindow;
import mx.containers.VBox;
import mx.controls.Button;
import mx.controls.CheckBox;
import mx.controls.Label;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.CloseEvent;
import mx.styles.*;



public class JoinQueryPopUpWindow
	extends mx.containers.TitleWindow
{

	[Bindable]
/**
 * @private
 **/
	public var ClassName1 : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var ClassName2 : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var addAttributeId : mx.containers.VBox;

	[Bindable]
/**
 * @private
 **/
	public var deleteAllChkBox : mx.controls.CheckBox;

	[Bindable]
/**
 * @private
 **/
	public var deleteAllLabel : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var deleteButton : mx.controls.Button;

	[Bindable]
/**
 * @private
 **/
	public var entityLabel1 : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var entityLabel2 : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var submitButton : mx.controls.Button;




private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.TitleWindow
  ,
  propertiesFactory: function():Object { return {
    width: 700,
    height: 285,
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.HBox
        ,
        stylesFactory: function():void {
          this.backgroundColor = 16777215;
        }
        ,
        propertiesFactory: function():Object { return {
          x: 10,
          y: 10,
          width: 676,
          height: 228,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.containers.VBox
              ,
              stylesFactory: function():void {
                this.backgroundColor = 16381667;
              }
              ,
              propertiesFactory: function():Object { return {
                width: 675,
                height: 228,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.HBox
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      percentHeight: 1.0
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.HBox
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      percentHeight: 14.0,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.containers.VBox
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 7.0,
                            percentHeight: 100.0
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.containers.VBox
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 40.0,
                            percentHeight: 100.0,
                            childDescriptors: [
                              new mx.core.UIComponentDescriptor({
                                type: mx.containers.HBox
                                ,
                                stylesFactory: function():void {
                                  this.backgroundColor = 16777215;
                                  this.borderColor = 11249318;
                                  this.borderThickness = 1;
                                  this.borderStyle = "outset";
                                }
                                ,
                                propertiesFactory: function():Object { return {
                                  percentWidth: 100.0,
                                  percentHeight: 100.0,
                                  maxWidth: 260,
                                  childDescriptors: [
                                    new mx.core.UIComponentDescriptor({
                                      type: mx.controls.Label
                                      ,
                                      id: "ClassName1"
                                      ,
                                      stylesFactory: function():void {
                                        this.textAlign = "left";
                                        this.fontStyle = "normal";
                                        this.fontWeight = "normal";
                                        this.color = 0;
                                        this.paddingTop = 2;
                                      }
                                      ,
                                      propertiesFactory: function():Object { return {
                                        name: "ClassName1",
                                        text: "Name:",
                                        percentHeight: 100.0,
                                        truncateToFit: true
                                      }}
                                    })
                                  ,
                                    new mx.core.UIComponentDescriptor({
                                      type: mx.controls.Label
                                      ,
                                      id: "entityLabel1"
                                      ,
                                      stylesFactory: function():void {
                                        this.textAlign = "left";
                                        this.fontStyle = "normal";
                                        this.fontWeight = "bold";
                                        this.color = 0;
                                        this.paddingTop = 2;
                                      }
                                      ,
                                      propertiesFactory: function():Object { return {
                                        name: "firstEntityLabel1",
                                        percentHeight: 100.0,
                                        truncateToFit: true,
                                        maxWidth: 200
                                      }}
                                    })
                                  ]
                                }}
                              })
                            ]
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.containers.VBox
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 40.0,
                            percentHeight: 100.0,
                            childDescriptors: [
                              new mx.core.UIComponentDescriptor({
                                type: mx.containers.HBox
                                ,
                                stylesFactory: function():void {
                                  this.backgroundColor = 16777215;
                                  this.borderColor = 11249318;
                                  this.borderThickness = 1;
                                  this.borderStyle = "outset";
                                }
                                ,
                                propertiesFactory: function():Object { return {
                                  percentWidth: 100.0,
                                  percentHeight: 100.0,
                                  maxWidth: 260,
                                  childDescriptors: [
                                    new mx.core.UIComponentDescriptor({
                                      type: mx.controls.Label
                                      ,
                                      id: "ClassName2"
                                      ,
                                      stylesFactory: function():void {
                                        this.textAlign = "left";
                                        this.fontStyle = "normal";
                                        this.fontWeight = "normal";
                                        this.color = 0;
                                        this.paddingTop = 2;
                                      }
                                      ,
                                      propertiesFactory: function():Object { return {
                                        name: "ClassName2",
                                        text: "Name:",
                                        percentHeight: 100.0,
                                        truncateToFit: true
                                      }}
                                    })
                                  ,
                                    new mx.core.UIComponentDescriptor({
                                      type: mx.controls.Label
                                      ,
                                      id: "entityLabel2"
                                      ,
                                      stylesFactory: function():void {
                                        this.textAlign = "left";
                                        this.fontStyle = "normal";
                                        this.fontWeight = "bold";
                                        this.color = 0;
                                        this.paddingTop = 2;
                                      }
                                      ,
                                      propertiesFactory: function():Object { return {
                                        name: "secondEntityLabel1",
                                        percentHeight: 100.0,
                                        truncateToFit: true,
                                        maxWidth: 200
                                      }}
                                    })
                                  ]
                                }}
                              })
                            ]
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.containers.VBox
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 13.0,
                            percentHeight: 100.0
                          }}
                        })
                      ]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.HBox
                    ,
                    stylesFactory: function():void {
                      this.backgroundColor = 16377990;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      percentHeight: 25.0,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.containers.VBox
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 7.0,
                            percentHeight: 100.0,
                            childDescriptors: [
                              new mx.core.UIComponentDescriptor({
                                type: mx.controls.CheckBox
                                ,
                                id: "deleteAllChkBox"
                                ,
                                events: {
                                  click: "__deleteAllChkBox_click"
                                }
                                ,
                                stylesFactory: function():void {
                                  this.paddingLeft = 15;
                                  this.paddingTop = 6;
                                }
                                ,
                                propertiesFactory: function():Object { return {
                                  name: "deleteAll",
                                  toolTip: "Select All",
                                  visible: false
                                }}
                              })
                            ]
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.containers.VBox
                          ,
                          stylesFactory: function():void {
                            this.paddingTop = 5;
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 57.0,
                            percentHeight: 100.0,
                            childDescriptors: [
                              new mx.core.UIComponentDescriptor({
                                type: mx.controls.Label
                                ,
                                id: "deleteAllLabel"
                                ,
                                stylesFactory: function():void {
                                  this.textAlign = "left";
                                  this.fontStyle = "normal";
                                  this.fontWeight = "normal";
                                  this.color = 0;
                                }
                                ,
                                propertiesFactory: function():Object { return {
                                  name: "deleteAllLabel",
                                  text: "Delete All",
                                  buttonMode: true,
                                  visible: false
                                }}
                              })
                            ]
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.containers.VBox
                          ,
                          stylesFactory: function():void {
                            this.paddingTop = 2;
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 15.0,
                            percentHeight: 100.0,
                            childDescriptors: [
                              new mx.core.UIComponentDescriptor({
                                type: mx.controls.Button
                                ,
                                id: "deleteButton"
                                ,
                                events: {
                                  click: "__deleteButton_click"
                                }
                                ,
                                stylesFactory: function():void {
                                  this.textAlign = "center";
                                  this.fontStyle = "normal";
                                  this.fontWeight = "bold";
                                  this.color = 0;
                                }
                                ,
                                propertiesFactory: function():Object { return {
                                  name: "deleteButton",
                                  label: "Delete",
                                  visible: false,
                                  buttonMode: true,
                                  toolTip: "Delete",
                                  width: 87
                                }}
                              })
                            ]
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.containers.VBox
                          ,
                          stylesFactory: function():void {
                            this.paddingLeft = 10;
                            this.paddingTop = 2;
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 20.0,
                            percentHeight: 100.0,
                            x: 0,
                            childDescriptors: [
                              new mx.core.UIComponentDescriptor({
                                type: mx.controls.Button
                                ,
                                events: {
                                  click: "___Button2_click"
                                }
                                ,
                                stylesFactory: function():void {
                                  this.textAlign = "center";
                                  this.fontStyle = "normal";
                                  this.fontWeight = "bold";
                                  this.color = 0;
                                }
                                ,
                                propertiesFactory: function():Object { return {
                                  label: "Add Attribute",
                                  x: 15,
                                  y: 15,
                                  buttonMode: true,
                                  toolTip: "Add Atrribute"
                                }}
                              })
                            ]
                          }}
                        })
                      ]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.HBox
                    ,
                    stylesFactory: function():void {
                      this.backgroundColor = 16381667;
                      this.paddingTop = 2;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      height: 121,
                      verticalScrollPolicy: "auto",
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.containers.VBox
                          ,
                          id: "addAttributeId"
                          ,
                          stylesFactory: function():void {
                            this.paddingLeft = 15;
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 100.0,
                            percentHeight: 100.0
                          }}
                        })
                      ]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.HBox
                    ,
                    stylesFactory: function():void {
                      this.backgroundColor = 16777215;
                      this.paddingTop = 8;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      percentHeight: 8.0,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          id: "submitButton"
                          ,
                          events: {
                            click: "__submitButton_click"
                          }
                          ,
                          stylesFactory: function():void {
                            this.textAlign = "center";
                            this.fontStyle = "normal";
                            this.fontWeight = "bold";
                            this.color = 0;
                            this.fillColors = [16377990, 16377990];
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            x: 15,
                            buttonMode: true,
                            enabled: false,
                            width: 66
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          events: {
                            click: "___Button4_click"
                          }
                          ,
                          stylesFactory: function():void {
                            this.textAlign = "center";
                            this.fontStyle = "normal";
                            this.fontWeight = "bold";
                            this.color = 0;
                            this.letterSpacing = 0;
                            this.fillColors = [16377990, 16377990];
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            label: "Cancel",
                            x: 15,
                            buttonMode: true,
                            mouseFocusEnabled: true,
                            toolTip: "Cancel",
                            width: 66
                          }}
                        })
                      ]
                    }}
                  })
                ]
              }}
            })
          ]
        }}
      })
    ]
  }}
})

    /**
     * @private
     **/
	public function JoinQueryPopUpWindow()
	{
		super();

		mx_internal::_document = this;

		//	our style settings
		//	initialize component styles
		if (!this.styleDeclaration)
		{
			this.styleDeclaration = new CSSStyleDeclaration();
		}

		this.styleDeclaration.defaultFactory = function():void
		{
			this.borderColor = 7885571;
			this.backgroundColor = 16777215;
			this.left = 0;
			this.right = 0;
			this.borderThicknessLeft = 2;
			this.borderThicknessRight = 2;
			this.borderThicknessBottom = 2;
			this.borderThicknessTop = 5;
			this.color = 7885571;
		};



		//	properties
		this.layout = "absolute";
		this.width = 700;
		this.height = 285;
		this.showCloseButton = true;
		this.title = "Join";

		//	events
		this.addEventListener("close", ___TitleWindow1_close);

	}

    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);

		//	binding mgmt
		_JoinQueryPopUpWindow_bindingsSetup();

		var target:JoinQueryPopUpWindow = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_Components_JoinQueryPopUpWindowWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					_bindings,
					_watchers);


		super.initialize();
	}


	 	
	 	import mx.rpc.events.ResultEvent;
 		import mx.containers.HBox;
 		import mx.controls.ComboBox;
 		import mx.controls.CheckBox;
 		import mx.controls.Alert;	 	
	 	import mx.managers.PopUpManager;
	 	import mx.collections.ArrayCollection;
	 	
		[Bindable]
		public var leftDropDown: ArrayCollection;
		           
        [Bindable]
	 	public var rightDropDown: ArrayCollection;
	 	
	 	[Bindable]
		public var firstEntityLabel: String = new String();
		
		[Bindable]
		public var secondEntityLabel: String = new String();
		
		[Bindable]
		public var counter: int = 0;
		
		[Bindable]
		public var attributes: int = 0;
		
		[Bindable]
		public var hbox: HBox = null;
		
		[Bindable]
		public var vbox: VBox = null;
		
		[Bindable]
		public var vbox1: VBox = null;
		
		[Bindable]
		public var vbox2: VBox = null;
		
		[Bindable]
		public var checkBox: CheckBox = null;
		
		[Bindable]
		public var comboBox1: ComboBox = null;
		
		[Bindable]
		public var comboBox2: ComboBox = null;
		
		[Bindable]
		public var firstNodeDp: Object;
	 	    
 	    [Bindable]
 	    public var secondNodeDp: Object;
 	    
 	    [Bindable]
 	    public  var firstEntityExpId: int = 0;
     		 
     	[Bindable]
     	public var secondEntityExpId: int = 0;
     	
		[Bindable]
     	public var firstEntityName: String = null;
     		
     	[Bindable]
     	public var secondEntityName: String = null;
     	
     	[Bindable]
		public var nodeName: String = null;
		
		[Bindable]
	 	public var buttonLabel: String = "OK";
 	    
 	    private var firstNodeList: ArrayCollection = null;
		private var secondNodeList: ArrayCollection = null;
	 
		/**
		 * Remove the Join Query PopUp window.
		 */
		public function removeMe():void
		{
	     	PopUpManager.removePopUp(this); 
	        this.parentApplication.operationforView=""; //to overcome from edit mode               
		}
		
		/**
		 * This method adds a new attribute on UI. It creates a nw HBOX having 3 VBOX which has 1 checkbox and
		 * 2 combo boxes. All these components are added in HBOX having id ad "addAttributeId".
		 */
		public function addAttribute(): void
		{
			
			//counter incremented.
			counter++;
			//Alert.show(counter + " counter");
			//attribute incremented to keep a check for displaying the Delete Button and Delete All checkbox
			attributes++;
			
			//Check added to hide/un-hide delete buttons on UI. 
			if(attributes == 1)
			{
				//make the delete button and delete all checkbox visible.
				deleteButton.visible = true;
				deleteAllChkBox.visible = true;
				deleteAllChkBox.selected = false;
				deleteAllLabel.visible = true;
				submitButton.enabled = true;
			} 
			
			//new Hbox added for each attribute when user selects add attribute button. 
			var hbox: HBox = new HBox();
			hbox.id = "hbox_" + counter;
			hbox.name = "hbox_" + counter;
			hbox.height = 25;
			//hbox added to Vbox with id = "addAttributeId".
			addAttributeId.addChild(hbox);
			
			//first VBox added in Hbox
			var vboxForCheckbox: VBox = new VBox();
			vboxForCheckbox.id = "vboxForCheckBox_" + counter;
			vboxForCheckbox.name = "vboxForCheckBox_" + counter;
			vboxForCheckbox.width = 30;
			hbox.addChild(vboxForCheckbox);
			
			//second VBox added in Hbox
			var vboxForFirstDropDown: VBox = new VBox();
			vboxForFirstDropDown.id = "vboxForFirstDropDown_" + counter;
			vboxForFirstDropDown.name = "vboxForFirstDropDown_" + counter;
			vboxForFirstDropDown.width = 262;
			hbox.addChild(vboxForFirstDropDown);
			
			//third VBox added in Hbox
			var vboxForSecondDropDown: VBox = new VBox();
			vboxForSecondDropDown.id = "vboxForSecondDropDown_" + counter;
			vboxForSecondDropDown.name = "vboxForSecondDropDown_" + counter;
			vboxForSecondDropDown.width = 190;
			hbox.addChild(vboxForSecondDropDown);
			
			//checkbox added in first VBox
			var checkBox: CheckBox = new CheckBox();
			//checkBox = new CheckBox();
			checkBox.id = "checkBox_"+counter;
			checkBox.name = "checkBox_"+counter;
			if(deleteAllChkBox.selected == true)
			{
				checkBox.selected = true;
				checkBox.enabled = false;
			}
			vboxForCheckbox.addChild(checkBox);			
			
			//combo box added in second VBox
			//Alert.show(leftDropDown + "");
			var comboxBox1: ComboBox = new ComboBox();
			comboxBox1.id = "comboxBox1_" + counter;
			comboxBox1.name = "comboxBox1_" + counter; 
			comboxBox1.dataProvider = leftDropDown;
			comboxBox1.width = 180;
			comboxBox1.prompt = "--Select--";
			comboxBox1.selectedItem =
			comboxBox1.rowCount = 7;
			//comboxBox1.toolTip = "{comboxBox1.selectedItem}";
			vboxForFirstDropDown.addChild(comboxBox1);
			
			//combo box added in third VBox
			//Alert.show(rightDropDown + "");
			var comboxBox2: ComboBox = new ComboBox();
			comboxBox2.id = "comboxBox2_" + counter;
			comboxBox2.name = "comboxBox2_" + counter;
			comboxBox2.dataProvider = rightDropDown;
			comboxBox2.width = 180;
			comboxBox2.prompt = "--Select--";
			comboxBox2.selectedItem =
			comboxBox2.rowCount = 7;
			//comboxBox2.toolTip = "{comboxBox2.selectedItem}";
			vboxForSecondDropDown.addChild(comboxBox2);
		}
		
		/**
		 * This methods is called when user selects/de-deseletcs the delete all checkbox.
		 */
		public function selectAll(): void
		{
			//if delete all checkbox selected. 
			if(deleteAllChkBox.selected == true)
			{
				allAttributesCheckBoxes(true, false);
				
			}
			//if delete all checkbox un-selected.
			else if(deleteAllChkBox.selected == false)
			{
				allAttributesCheckBoxes(false, false);
				checkBox.selected = false;
			}			
		}
		
		/**
		 * This method traverses all the HBox on the Join Query Pop panel and selects the appropriate checkbox.
		 */
		private function allAttributesCheckBoxes(checkForAll: Boolean, checkForOne: Boolean): void
		{
			for(var count:int = 1; count <= counter; count++)
			{
				if(addAttributeId.getChildByName("hbox_"+count) != null)
				{
					//Get the hbox from the parent component
					hbox = addAttributeId.getChildByName("hbox_"+count) as HBox;
					//Get the Vbox of the checkboxes column from Hbox
					vbox = hbox.getChildByName("vboxForCheckBox_"+count) as VBox;
					checkBox = vbox.getChildByName("checkBox_"+count) as CheckBox;
					//checkForOne set to TRUE when a particular checkbox is seleted.
					if(checkForOne == true)
					{
						//checkBox is TRUE when DELETE ALL checkbox is seleted.
						if(checkBox.selected == true)
						{
							addAttributeId.removeChild(hbox);
							continue;
						}
						else
						{
							continue;
						}
					}
					//select all Checbox, if DELETE ALL checkbox seleted
					if(checkForAll == true)
					{
						checkBox.selected = true;
						checkBox.enabled = false;
					}
					//de-delect all Checbox, if DELETE ALL checkbox un-selected
					else if(checkForAll == false)
					{
						checkBox.selected = false;
						checkBox.enabled = true;
					}
				}
			}
		}
		
		/**
		 * This method is invoked when user selets the DELETE button.
		 */
		public function selectDelete(): void
		{
			//if DELETE ALL checbox is cliecked, remove all the attributes from the join query window.
			//Set the DELETE and DELETE ALL button to visible mode and also set counter to value 0
			if(deleteAllChkBox.selected == true)
			{
				addAttributeId.removeAllChildren();
				deleteButton.visible = false;
				deleteAllChkBox.visible = false;
				deleteAllLabel.visible = false;
				counter = 0;
				attributes = 0;
				submitButton.enabled = false;
			}
			else
			{
				//delete the particular HBox from the window whose checkbox is seleted.
				allAttributesCheckBoxes(null, true);
			}
		}
		
		/**
		 * This method is called when OK button is pressed.
		 */
		public function submit(): void
		{
			//Alert.show("addAttributeId.ge");
			//JoinQueryNode object instantiated which is populated and send at backend of Query
			var joinQueryNode: JoinQueryNode = new JoinQueryNode();
			var joinQueryNodeList: ArrayCollection = new ArrayCollection();
			var populateJoinQueryOnce: Boolean = true;
			var isValid: Boolean = true;
			
			//Checks added to verify if any attribute is seleted on JOin Query Window.
			//Alert.show("addAttributeId.getChildren(): " + addAttributeId.getChildren());
			if(addAttributeId.getChildren() != null)
			{
				//Alert.show("1");
				//Alert.show("counter : " + counter);
				for(var count:int = 1; count <= counter; count++)
				{
					//Alert.show("2");
					//Alert.show("addAttributeId.getChildByName(hbox_count)" + addAttributeId.getChildByName("hbox_"+count));
					if(addAttributeId.getChildByName("hbox_" + count) != null)
					{
						//Alert.show("hbox : " + hbox);
						hbox = addAttributeId.getChildByName("hbox_" + count) as HBox;
						if(hbox != null)
						{
							//Alert.show("3");
							vbox1 = hbox.getChildByName("vboxForFirstDropDown_" + count) as VBox;
							vbox2 = hbox.getChildByName("vboxForSecondDropDown_" + count) as VBox;
							
							comboBox1 = vbox1.getChildByName("comboxBox1_" + count) as ComboBox;
							comboBox2 = vbox2.getChildByName("comboxBox2_" + count) as ComboBox;
							//Alert.show(" comboBox1, comboBox2 " + comboBox1 + comboBox2);
							if((comboBox1 != null && comboBox2 != null)
							&& (comboBox1.selectedItem != null && comboBox2.selectedItem != null))
							{
								//Alert.show("4");
								//Getting left and right entities property list containing <attributeId , attributeTyep>
           	 					firstNodeList = firstNodeDp[comboBox1.selectedItem.toString()];
           	 					secondNodeList = secondNodeDp[comboBox2.selectedItem.toString()];
           	 					
           	 					//validation - same datatype necessary to query
           	 					if(firstNodeList.getItemAt(1).toString() == secondNodeList.getItemAt(1).toString())
           	 					{
									//JoinFormulaNode instantiated which is set in JoinQueryNode object in List
									var joinFormulaNode: JoinFormulaNode = new JoinFormulaNode();
									
	           	 					joinFormulaNode.setFirstAttributeDataType(String(firstNodeList.getItemAt(1)));
	           	 					joinFormulaNode.setSecondAttributeDataType(String(secondNodeList.getItemAt(1)));
	           	 						
	           	 					//Getting Id's of Attributes
	           	 					joinFormulaNode.setFirstAttributeId(String(firstNodeList.getItemAt(0)));
	             					joinFormulaNode.setSecondAttributeId(String(secondNodeList.getItemAt(0)));
	             					
	             					//Getting the left and right operands
	             					joinFormulaNode.setFirstAttributeName(String(firstNodeList.getItemAt(2)));
						            joinFormulaNode.setSecondAttributeName(String(secondNodeList.getItemAt(2)));
						            //isValid = true;
						            if(populateJoinQueryOnce == true)
									{
										//Setting the first selected DAG Nodes Properties
							            joinQueryNode.setFirstNodeEntityName(firstEntityName);
										joinQueryNode.setFirstNodeExpressionId(firstEntityExpId);
										
										//Setting the second selected DAG Nodes Properties
							            joinQueryNode.setSecondNodeEntityName(secondEntityName);
										joinQueryNode.setSecondNodeExpressionId(secondEntityExpId);
										
										
										//Setting the node view
										joinQueryNode.setNodeView(this.parentApplication.view);
										//Alert.show("while setting value " + joinQueryNode.getNodeView());
										
										//boolean value to change so joinQueryNode is populated just once
										populateJoinQueryOnce = false;
										joinQueryNode.name = nodeName;
										//Alert.show("5 joinQueryNode.name " + joinQueryNode.name)
									}
									
									joinFormulaNode.name = parentApplication.createJoinFormulaNodeName(joinQueryNode.name, count);
									//Alert.show("6's joinFormulaNode.name " + joinFormulaNode.name)
									//added to collection of joinQueryNodeList
						            joinQueryNodeList.addItem(joinFormulaNode);
           	 					}
           	 					else
           	 					{
           	 						Alert.show("Datatype of selected attributes do not match");
           	 						isValid = false;
           	 						break;
           	 					}
							}
							else
							{
								Alert.show("Please select a value from the Drop Down");
								isValid = false;
								break;
							}
						}
						else
						{
							//Alert.show("@@@@");
							//isValid = false;
						}						
					}
					else
					{
						//isValid = false;
						//Alert.show("select something");
					}
				}//for ends
				
				if(isValid == true)
				{
					//collection added to joinQueryNode object
					joinQueryNode.setJoinFormulaNodeList(joinQueryNodeList);
					//add JQ node on UI
					
					//parentApplication.addJoinQueryNode(joinQueryNode);
					if(submitButton.label == "OK")
					{
						joinQueryNode.setOperation("create");
						this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, joinQueryNodeHandler);
						this.parentApplication.rpcService.formJoinQuery(joinQueryNode, "add");
					}
					else
					{
						joinQueryNode.setOperation("edit");
						this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, joinQueryNodeHandler);
						this.parentApplication.rpcService.formJoinQuery(joinQueryNode, "edit");
					}						
				}
			}
			else
			{
				Alert.show("Please select atleast a pair of attributes for Join Query");
			}	
		}
		
		private function joinQueryNodeHandler(event: ResultEvent): void
		{
			//Alert.show("in joinQueryNodeHandler method()");
			var joinQueryNode: JoinQueryNode = event.result as JoinQueryNode;
			this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT, joinQueryNodeHandler);
			parentApplication.addJoinQueryNode(joinQueryNode);
		}
		
		



    //	supporting function definitions for properties, events, styles, effects
/**
 * @private
 **/
public function ___TitleWindow1_close(event:mx.events.CloseEvent):void
{
	removeMe();
}

/**
 * @private
 **/
public function __deleteAllChkBox_click(event:flash.events.MouseEvent):void
{
	selectAll();
}

/**
 * @private
 **/
public function __deleteButton_click(event:flash.events.MouseEvent):void
{
	selectDelete();
}

/**
 * @private
 **/
public function ___Button2_click(event:flash.events.MouseEvent):void
{
	addAttribute();
}

/**
 * @private
 **/
public function __submitButton_click(event:flash.events.MouseEvent):void
{
	submit();
}

/**
 * @private
 **/
public function ___Button4_click(event:flash.events.MouseEvent):void
{
	removeMe();
}


	//	binding mgmt
    private var _bindings:Array;
    private var _watchers:Array;
    private function _JoinQueryPopUpWindow_bindingsSetup():void
    {
        if (!_bindings)
        {
            _bindings = [];
        }

        if (!_watchers)
        {
            _watchers = [];
        }

        var binding:Binding;

        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (firstEntityLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                entityLabel1.text = _sourceFunctionReturnValue;
            },
            "entityLabel1.text");
        _bindings[0] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (firstEntityLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                entityLabel1.toolTip = _sourceFunctionReturnValue;
            },
            "entityLabel1.toolTip");
        _bindings[1] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (secondEntityLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                entityLabel2.text = _sourceFunctionReturnValue;
            },
            "entityLabel2.text");
        _bindings[2] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (secondEntityLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                entityLabel2.toolTip = _sourceFunctionReturnValue;
            },
            "entityLabel2.toolTip");
        _bindings[3] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (buttonLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                submitButton.label = _sourceFunctionReturnValue;
            },
            "submitButton.label");
        _bindings[4] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (buttonLabel);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                submitButton.toolTip = _sourceFunctionReturnValue;
            },
            "submitButton.toolTip");
        _bindings[5] = binding;
    }

    private function _JoinQueryPopUpWindow_bindingExprs():void
    {
        var destination:*;
		[Binding(id='0')]
		destination = (firstEntityLabel);
		[Binding(id='1')]
		destination = (firstEntityLabel);
		[Binding(id='2')]
		destination = (secondEntityLabel);
		[Binding(id='3')]
		destination = (secondEntityLabel);
		[Binding(id='4')]
		destination = (buttonLabel);
		[Binding(id='5')]
		destination = (buttonLabel);
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil):void
    {
        (JoinQueryPopUpWindow)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil;





    /**
     * @private
     **/
    public var _bindingsByDestination : Object;
    /**
     * @private
     **/
    public var _bindingsBeginWithWord : Object;

}

}
