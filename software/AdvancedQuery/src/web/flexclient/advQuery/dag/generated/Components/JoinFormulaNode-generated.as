/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	Components
 *	Class: 		JoinFormulaNode
 *	Source: 	E:\workplace\AdvancedQueryForJoin_NewCP\flexclient\advQuery\dag\Components\JoinFormulaNode.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2009.04.07 12:38:46 GMT+05:30
 */

package Components
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.utils.IExternalizable;
import flash.xml.*;
import mx.binding.*;
import mx.containers.Canvas;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.styles.*;



public class JoinFormulaNode
	extends mx.containers.Canvas
	implements flash.utils.IExternalizable
{




private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.Canvas
  ,
  propertiesFactory: function():Object { return {
    width: 330,
    height: 88
  }}
})

    /**
     * @private
     **/
	public function JoinFormulaNode()
	{
		super();

		mx_internal::_document = this;

		//	our style settings
		//	initialize component styles
		if (!this.styleDeclaration)
		{
			this.styleDeclaration = new CSSStyleDeclaration();
		}

		this.styleDeclaration.defaultFactory = function():void
		{
			this.borderThickness = 2;
			this.color = 0;
			this.backgroundColor = 14792355;
			this.borderColor = 0;
			this.borderStyle = "solid";
		};



		//	properties
		this.width = 330;
		this.height = 88;

		//	events

	}

    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);



		super.initialize();
	}


	private var firstAttributeId: String = null;
	
	private var secondAttributeId: String = null;
	
	private var firstAttributeName: String = null;
	
	private var secondAttributeName: String = null;
	
	private var firstAttributeDataType: String = null;
	
	private var secondAttributeDataType: String = null;
	
	public function getFirstAttributeId(): String
	{
		return this.firstAttributeId;		
	}
	
	public function setFirstAttributeId(firstAttributeId: String): void
	{
		this.firstAttributeId = firstAttributeId;
	}
	
	public function getSecondAttributeId(): String
	{
		return this.secondAttributeId;		
	}
	
	public function setSecondAttributeId(secondAttributeId: String): void
	{
		this.secondAttributeId = secondAttributeId;
	}
	
	public function getFirstAttributeName(): String
	{
		return this.firstAttributeName;		
	}
	
	public function setFirstAttributeName(firstAttributeName: String): void
	{
		this.firstAttributeName = firstAttributeName;
	}
	
	public function getSecondAttributeName(): String
	{
		return this.secondAttributeName;		
	}
	
	public function setSecondAttributeName(secondAttributeName: String): void
	{
		this.secondAttributeName = secondAttributeName;
	}
	
	public function getFirstAttributeDataType(): String
	{
		return this.firstAttributeDataType;		
	}
	
	public function setFirstAttributeDataType(firstAttributeDataType: String): void
	{
		this.firstAttributeDataType = firstAttributeDataType;
	}
	
	public function getSecondAttributeDataType(): String
	{
		return this.secondAttributeDataType;		
	}
	
	public function setSecondAttributeDataType(secondAttributeDataType: String): void
	{
		this.secondAttributeDataType = secondAttributeDataType;
	}
	
	/**
	 * Read serialized data.
	 */
	public function readExternal(input:IDataInput): void 
	{
		this.name = input.readUTF();
		this.firstAttributeId = input.readUTF();
		this.firstAttributeName = input.readUTF();
		this.firstAttributeDataType = input.readUTF();
		this.secondAttributeId = input.readUTF();
		this.secondAttributeName = input.readUTF();
		this.secondAttributeDataType = input.readUTF();
	}
        
    /**
     *  Write Searialized Data.
     */
	public function writeExternal(out:IDataOutput): void 
    {
    	//Alert.show("in write");
    	//Alert.show(this.firstAttributeId);
    	out.writeUTF(this.name);
    	out.writeUTF(this.firstAttributeId);
    	out.writeUTF(this.firstAttributeName);
    	out.writeUTF(this.firstAttributeDataType);
    	out.writeUTF(this.secondAttributeId);
    	out.writeUTF(this.secondAttributeName);
    	out.writeUTF(this.secondAttributeDataType);    	
    }
	
	



    //	supporting function definitions for properties, events, styles, effects

	//	binding mgmt





    /**
     * @private
     **/
    public var _bindingsByDestination : Object;
    /**
     * @private
     **/
    public var _bindingsBeginWithWord : Object;

}

}
