<?xml version="1.0" encoding="utf-8"?>

<mx:Application  xmlns:mx="http://www.adobe.com/2006/mxml" 
layout="vertical" dragEnter="doDragEnter(event)" dragDrop="onDragDrop(event)" dragExit="onDragExit(event)"
xmlns:Components="Components.*" xmlns:display="flash.display.*"
creationComplete="initApp()" width="100%" height="100%" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" resize="onStageResize()">
<mx:Style>	
ComboBox
{
	borderColor: black;
	borderThickness: 0;
	themeColor: haloSilver;
}
Alert
{
	color : #0f3177;
	title-style-name : "alertTitle";			
	header-height:19;
	border-thickness: 1;
	drop-shadow-enabled: true;
	drop-shadow-color :#d1ddf7;
	background-color: #ffffff;
	corner-radius :6;
	border-style :solid;
	header-colors : #90a4d1, #5970a0;
	footer-colors : #9db6d9, #ffffff;
	border-color : #5970a0;
}		
.alertTitle
{
	font-family :Verdana;
	font-size :10;
	font-weight :bold;
	text-align :left;
	color :#ffffff;
}
TextInput
{
	borderColor: blue;
}
Application
{
	font-anti-alias-type : advanced;
	font-sharpness : -100;
}
		
</mx:Style>
<mx:Script>
<![CDATA[
	import mx.controls.CheckBox;
	import Components.JoinFormulaNode;
	import Components.JoinQueryNode;
	import mx.messaging.messages.ErrorMessage;
	import mx.controls.Text;
	import Components.AlertManager;
	import mx.controls.DateField;
	import Util.Utility;
	import mx.controls.Label;
	import mx.utils.StringUtil;
	import Components.DAGPath;
	import mx.controls.ComboBase;
	import Components.DAGConstants;
	import mx.containers.HBox;
	import mx.controls.ComboBox;
    import mx.controls.ToolTip;
    import mx.managers.ToolTipManager;
	import mx.containers.VBox;
	import mx.controls.Button;
	import mx.utils.ArrayUtil;
	import mx.controls.DataGrid;
	import mx.containers.Accordion;
	import mx.controls.List;
	import Components.Association;
	import Components.DAGPath;
	import mx.collections.ArrayCollection;
	import mx.states.SetEventHandler;
	import mx.core.UIComponent;
	import Components.DAGNode;
	import mx.containers.Canvas;
	import mx.core.IUIComponent;
	import mx.controls.Alert;
	import mx.events.DragEvent;
	import mx.core.DragSource;
	import mx.managers.DragManager;
	import mx.events.MenuEvent;
	import flash.external.ExternalInterface;	
	import mx.rpc.events.ResultEvent;
	import mx.rpc.remoting.RemoteObject;
	import mx.rpc.events.FaultEvent;
	import flash.net.registerClassAlias;
	import Components.AmbiguityPanel;
	import mx.managers.PopUpManager;
   	import mx.core.IFlexDisplayObject;
   	import mx.containers.ControlBar;
    import mx.controls.Spacer;
    import mx.containers.ControlBar;
   	import mx.controls.Menu;
    import Util.HashMap;
    import mx.managers.CursorManager;
    import Components.CustomFormulaNode;
    import Components.PopupWindow;
    import Components.JoinQueryPopUpWindow;
    import mx.controls.TextInput;
    import Components.singleNodeTQWidow;
    import Components.SingleNodeCustomFormulaNode; 
	//------------------------
	public var node1:String = "";
	public var node2:String = "";
	private var selectedLink:String = "";
	private var selectedNode:DAGNode=null;
    private var ambiguityPanel:AmbiguityPanel; 
    private var title:String  = new String();
    public var selectedNodeList:ArrayCollection = new ArrayCollection();
    public var count:int = 0;
    private var firstNode:String;
    private var secondNode:String;
 	private var pathStr:String
	private	var isQuery:String = "false";
	private var eNode:DAGNode;
	
	public var readyTimer:Timer;
	public var isOutputView:Boolean=false;

	public var view:String ="";
	public var dagPathUIMap:HashMap;
	public var totalNodes:ArrayCollection;
	public var allPaths:ArrayCollection;

    public var queryDataMap : Object; 
	public var nodeSelected : String = null; 
	public var customFormulaString : String = null;
	public var singleNodecustomFormulaString : String = "";
	
	private var popUp:PopupWindow = null;
	private var popUpForJoinQuery: JoinQueryPopUpWindow = null;
	private var singleNodeTQPope : singleNodeTQWidow = null;
	
	private var repaintDAGNodeMap : HashMap = new HashMap();
	
	private var singleRepaintDAGNodeMap : HashMap = new HashMap();
	private var associatedDAGNodes : Object = new Object;
	
	private var associatedSingleDagNodes : Object = new Object;
	
	//operation is stroing information about node creation / edit 
	[Bindable]
	public var operationforView:String="";	
	
	//creating comboBox for integer attribute Type
	private var existingfirstOpComboBox : ComboBox = null;
	private var existingSecondOpComboBox : ComboBox = null;
	private var existingOpComboBox : ComboBox = null;
	
	//Baljeet for Node  positioning 
	private var lastAddedNodeX : int =0;
	private  var lastAddedNodeY : int =0;
	private  var lastAddedNodeExpId = 0; 
	
	
	/**
	* Timer handler  to check container has been initialized.	
	*/
	private function timerHandler():void
	{
		if (isContainerReady())
		{
			// If the container is ready, register the SWF functions.
			setUpCall();
			readyTimer.stop();
		}
	}
	/**
	* Initilise call-back call to java script methods.
	*/
	public function setUpCall():void 
	{
		ExternalInterface.addCallback("createNode",createNode);		
		ExternalInterface.addCallback("editLimit",editLimit);	
		ExternalInterface.addCallback("searchResult",searchResult);	
		ExternalInterface.addCallback("addNodeToView",addNodeToView);
		ExternalInterface.addCallback("isDAGEmpty",isDAGEmpty);
	}
	
	/**
	* Setup the callback function so that HTML can call flex methods
	* Checks wheather HTML page is loaded or not.
	*/
	private function isContainerReady():Boolean
	{
		var result:Boolean = ExternalInterface.call("isReady");
		return result;
	}
	/**
	* Function to check DAG empty on click of search
	*/
	public function isDAGEmpty():Boolean
	{
		if(totalNodes.length==0)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	/**
	* Remote Call fault handler
	*/	
	private function faultHandler (event:FaultEvent):void
	{		
		var errorMessage:ErrorMessage = event.message as ErrorMessage;	
		AlertManager.showError("Fault occur at server please contact Administrator.");
		trace(errorMessage.faultString);
		trace(errorMessage);
		rpcService.removeEventListener("result",linkNodesHandler);
		CursorManager.removeBusyCursor();	
	}
	/**
	* To drag nodes on UI
	*/
	private function doDrag(event:MouseEvent):void
	{
		var dragInitiator:DAGNode = DAGNode(event.currentTarget);
		var ds:DragSource = new DragSource();
		
		var canvasProxy:DAGNode = new DAGNode();
		canvasProxy.nodeNumber = dragInitiator.nodeNumber;
		canvasProxy.nodeName =dragInitiator.nodeName;
				
		var pointOffSet:Point = new Point(dragInitiator.mouseX,dragInitiator.mouseY);
		ds.addData(pointOffSet,"point");
		
		DragManager.doDrag(dragInitiator,ds,event,canvasProxy,0,0);
		
		nodeSelected = "DagNode";
	}
	/**
	* To drag nodes on UI
	*/
	private function doDragEnter(event:DragEvent):void{
		DragManager.acceptDragDrop(event.currentTarget as IUIComponent)
	}
	
	private function onDragExit(event : DragEvent):void
	{
		 //var firstDAGNode : DAGNode = DAGNode(mainPanel.getChildByName(node1));
	   //var secondDAGNode : DAGNode = DAGNode(mainPanel.getChildByName(node2)); 
		
	}
	
   /**
	* To drag nodes on UI
	*/	
	private function onDragDrop(event:DragEvent):void{
		
		var pointOffSet:Point = null;
		var pt:Point = null;
		var customNodeName : String = null;
		var joinQueryNodeName: String = null;
		var customNode : CustomFormulaNode = null;
	    var firstDAGNode : DAGNode = null;
	    var secondDAGNode : DAGNode = null; 
        var key  : String = "";     
        var dagNodeList : ArrayCollection = null; 
		if(nodeSelected == "DagNode")
		{
		var dagNode:DAGNode = DAGNode(event.dragInitiator) ;
		pointOffSet = Point(event.dragSource.dataForFormat("point") );
		
		pt = new Point(event.stageX-pointOffSet.x, event.stageY-pointOffSet.y);
		pt = mainPanel.globalToContent(pt);
		
		dagNode.x = pt.x;
		dagNode.y = pt.y;
		if(dagNode.expressionId == lastAddedNodeExpId)
		{
			lastAddedNodeX = pt.x;
			lastAddedNodeY = pt.y;
		}
		var ass:Association;
		var inAssociations:ArrayCollection;
		var inAsslength:int;
		var outAssociations:ArrayCollection;
		var outAsslength:int;
		var displayoutAssociations:ArrayCollection=dagNode.displayoutAssociations;
		var displaylength:int=displayoutAssociations.length
		var path:DAGPath=null;
		//Outgoing associations
		var operatorIndex:int =0; 
		outAssociations = dagNode.outAssociations;
		outAsslength = outAssociations.length;
		for(var i:int=0;i<outAsslength;i++)
		{
			ass = Association(outAssociations.getItemAt(i));
			//dagNode.name)//src
			mainPanel.removeChild(mainPanel.getChildByName(ass.associatedLink));
			path = dagPathUIMap.getValue(ass.associatedLink);
			dagPathUIMap.remove(ass.associatedLink);

			dagNode.removeDisplayOutAssociation(ass.associatedNode,ass.associatedLink);
			dagNode.removeOutAssociation(ass.associatedNode,ass.associatedLink);

			DAGNode(mainPanel.getChildByName(ass.associatedNode)).removeInAssociation(dagNode.name,ass.associatedLink);
			linkNodes(dagNode.name,ass.associatedNode,path);
			
		}
		
		//Incoming associations
		inAssociations = dagNode.inAssociations;
		inAsslength = inAssociations.length;
		for(var k:int=0;k<inAsslength;k++)
		{
			ass = Association(inAssociations.getItemAt(k));
			
			mainPanel.removeChild(mainPanel.getChildByName(ass.associatedLink));
			path = dagPathUIMap.getValue(ass.associatedLink);
			dagPathUIMap.remove(ass.associatedLink);

			dagNode.removeInAssociation(ass.associatedNode,ass.associatedLink);
			DAGNode(mainPanel.getChildByName(ass.associatedNode)).removeDisplayOutAssociation(dagNode.name,ass.associatedLink);
			DAGNode(mainPanel.getChildByName(ass.associatedNode)).removeOutAssociation(dagNode.name,ass.associatedLink);
			linkNodes(ass.associatedNode,dagNode.name,path);
		}
		
		//Handling all associated custom nodes with a DAG NOde
		
		//First find out all associated 2 nodes TQ custom nodes
		var associtedCustomNodes : ArrayCollection = getAllAsscoiatedCNodes(dagNode);
		
		for(var t : int = 0; t<associtedCustomNodes.length ;t++)
		{
			customNodeName = associtedCustomNodes[t] as String;
			customNode = mainPanel.getChildByName(customNodeName) as CustomFormulaNode;
			if(customNode != null)
			{
				drawLines(dagNode, customNode.x,customNode.y,customNode.name);
			}
		}
		
			//Finding all associated single node TQ custom node
		var associatedSingleCNodes : ArrayCollection = getAllSingleAssociatedNodes(dagNode);
		for(var n : int = 0; n < associatedSingleCNodes.length ; n++)
		{
			customNodeName = associatedSingleCNodes[n] as String;
			var  singleCustomNode : SingleNodeCustomFormulaNode = mainPanel.getChildByName(customNodeName) as SingleNodeCustomFormulaNode;
			if(singleCustomNode != null)
			{
				drawLines(dagNode, singleCustomNode.x,singleCustomNode.y,singleCustomNode.name);
			}
		}
		
		//Finding all associated join query nodes
		var associatedJoinQueryNodes : ArrayCollection = getAllAsscoiatedJQNodes(dagNode);
		for(var count : int = 0; count < associatedJoinQueryNodes.length ; count++)
		{
			joinQueryNodeName = associatedJoinQueryNodes[count] as String;
			var joinQueryNode : JoinQueryNode = mainPanel.getChildByName(joinQueryNodeName) as JoinQueryNode;
			if(joinQueryNode != null)
			{
				drawLines(dagNode, joinQueryNode.x,joinQueryNode.y,joinQueryNode.name);
			}
		}
	 }
	 else if(nodeSelected == "customFormulaNode")
	 {
	 	var cutomformulaNode : CustomFormulaNode = CustomFormulaNode(event.dragInitiator) ;
		key = cutomformulaNode.name;
		dagNodeList = associatedDAGNodes[key] as ArrayCollection;
        firstDAGNode = dagNodeList[0] as DAGNode ;
		secondDAGNode = dagNodeList[1] as DAGNode ;
		pointOffSet = Point(event.dragSource.dataForFormat("point") );
	    pt = new Point(event.stageX-pointOffSet.x, event.stageY-pointOffSet.y);
		pt = mainPanel.globalToContent(pt);
		
		cutomformulaNode.x = pt.x;
		cutomformulaNode.y = pt.y;
		
		//Redrawing the lines between the selected nodes and custom formula node
		if((firstDAGNode != null) && (secondDAGNode!= null))
		{
		    drawLines(firstDAGNode, cutomformulaNode.x,cutomformulaNode.y,cutomformulaNode.name);
		    drawLines(secondDAGNode, cutomformulaNode.x,cutomformulaNode.y,cutomformulaNode.name);
		} 
	 }
	 else if(nodeSelected == "joinQueryNode")
	 {
	 	var joinQueryNode : JoinQueryNode = JoinQueryNode(event.dragInitiator) ;
		key = joinQueryNode.name;
		dagNodeList = associatedDAGNodes[key] as ArrayCollection;
        firstDAGNode = dagNodeList[0] as DAGNode ;
		secondDAGNode = dagNodeList[1] as DAGNode ;
		pointOffSet = Point(event.dragSource.dataForFormat("point") );
	    pt = new Point(event.stageX-pointOffSet.x, event.stageY-pointOffSet.y);
		pt = mainPanel.globalToContent(pt);
		
		joinQueryNode.x = pt.x;
		joinQueryNode.y = pt.y;
		
		//Redrawing the lines between the selected nodes and join query node
		if((firstDAGNode != null) && (secondDAGNode!= null))
		{
		    drawLines(firstDAGNode, joinQueryNode.x,joinQueryNode.y,joinQueryNode.name);
		    drawLines(secondDAGNode, joinQueryNode.x,joinQueryNode.y,joinQueryNode.name);
		} 
	 }
	 else
	 {
	 	var singleCustomFormulaNode : SingleNodeCustomFormulaNode = SingleNodeCustomFormulaNode(event.dragInitiator);
	 	key = singleCustomFormulaNode.name;
        dagNodeList = associatedSingleDagNodes[key] as ArrayCollection;
        
        //Getting the associated DAG NODE 
        var node : DAGNode = dagNodeList[0] as DAGNode;
        pointOffSet = Point(event.dragSource.dataForFormat("point") );
	    pt = new Point(event.stageX-pointOffSet.x, event.stageY-pointOffSet.y);
		pt = mainPanel.globalToContent(pt);

        singleCustomFormulaNode.x = pt.x;
        singleCustomFormulaNode.y = pt.y;
                  
	 	if(node != null)
	 	{
	 		drawLines(node,singleCustomFormulaNode.x,singleCustomFormulaNode.y,singleCustomFormulaNode.name);
	 	}
	 }	

	}
	
	//This method is declared as public as it will be called from delete node method 
	public function getAllSingleAssociatedNodes(dagNode  : DAGNode) : ArrayCollection
	{
		var associtedCustomNodesList : ArrayCollection = new ArrayCollection();
		for(var key : String in associatedSingleDagNodes)
		{
			var words : Array = key.split("_");
			//For single node TQ, the node is named as DagNode.nodeNummber + "_" + DagNode.nodeNummber , so the words[0] will be the exp Id of the DAG Node
			if(words[0] != "c")
			{
				if((dagNode.expressionId.toString() == words[0]))
				{
					associtedCustomNodesList.addItem(key);
				}
			}
			else
			{
				if((dagNode.expressionId.toString() == words[1]))
				{
					associtedCustomNodesList.addItem(key);
				}
			}	
			
		}
		return associtedCustomNodesList;
	}
	
	
	
	//This method is declared as public as it will be called from delete node method 
	public  function getAllAsscoiatedCNodes(dagNode  : DAGNode) : ArrayCollection
	{
		var associtedCustomNodesList : ArrayCollection = new ArrayCollection();
		for(var key : String in associatedDAGNodes)
		{
		   var words : Array = key.split("_");
		   //At index 0, we will have first node exp id and at index 1 we will have second node Exp Id     
		   if(words[0] != "c")
		   {
		   		if((dagNode.expressionId.toString() == words[0]) || (dagNode.expressionId.toString() == words[1]))
		        {
              		associtedCustomNodesList.addItem(key);	   	   
		   		}
		   }
		   else 
		   {
		   		if((dagNode.expressionId.toString() == words[1]) || (dagNode.expressionId.toString() == words[2]))
		        {
		        	associtedCustomNodesList.addItem(key);	
		        }
		   }
		   
		}  
		return associtedCustomNodesList;
	}
	
	//This method is declared as public as it will be called from delete node method 
	public  function getAllAsscoiatedJQNodes(dagNode  : DAGNode) : ArrayCollection
	{
		var associtedCustomNodesList : ArrayCollection = new ArrayCollection();
		for(var key : String in associatedDAGNodes)
		{
			var words : Array = key.split("_");
		   	//At index 0, we will have first node exp id and at index 1 we will have second node Exp Id     
		   	if(words[0] != "j")
		   	{
		   		if((dagNode.expressionId.toString() == words[0]) || (dagNode.expressionId.toString() == words[1]))
		        {
              		associtedCustomNodesList.addItem(key);	   	   
		   		}
		   	}
		   	else 
		   	{
		   		if((dagNode.expressionId.toString() == words[1]) || (dagNode.expressionId.toString() == words[2]))
		        {
		        	associtedCustomNodesList.addItem(key);	
		        }
		   	}
		} 
		//Alert.show("associtedCustomNodesList " + associtedCustomNodesList);
		return associtedCustomNodesList;
	}
	
	/**
	* Initilization handler
	*/		
	private function initFlexInterfaceHandler(event: ResultEvent):void
	{
		rpcService.removeEventListener(ResultEvent.RESULT,initFlexInterfaceHandler,false);
	}
	/**
	* Restoring query object from session
	*/
	private function restoreQueryObjectHandler(event: ResultEvent):void
	{
		rpcService.removeEventListener(ResultEvent.RESULT,restoreQueryObjectHandler,false);
		rpcService.addEventListener(ResultEvent.RESULT,repaintHandler);
	 	rpcService.repaintDAG();
	}
	/**
	* Initilization of DAG
	*/
	private function initApp():void
	{
		
		registerClassAlias("edu.wustl.query.flex.dag.DAGNode", DAGNode);
		registerClassAlias("edu.wustl.query.flex.dag.DAGPath", DAGPath);
		registerClassAlias("edu.wustl.query.flex.dag.CustomFormulaNode",CustomFormulaNode);
		registerClassAlias("edu.wustl.query.flex.dag.SingleNodeCustomFormulaNode",SingleNodeCustomFormulaNode);
		registerClassAlias("edu.wustl.query.flex.dag.JoinQueryNode", JoinQueryNode);
		registerClassAlias("edu.wustl.query.flex.dag.JoinFormulaNode", JoinFormulaNode);
//		rpcService= new RemoteObject();
		rpcService.channelSet = Utility.getChannelSet();
		rpcService.destination="queryService";
		isQuery =Application.application.parameters.isQuery;
		view= Application.application.parameters.view;
		dagPathUIMap = new HashMap();
		totalNodes = new ArrayCollection();
		allPaths = new ArrayCollection();
		if (isContainerReady())
			{
			// If the container is ready, register the SWF functions.
				setUpCall();
			}
			else
			{
				/* If the container is not ready, set up a Timer to call the
				container at 100ms intervals. Once the container responds that
				is ready, the timer will be stopped. */
				readyTimer = new Timer(100);
				readyTimer.addEventListener(TimerEvent.TIMER, timerHandler);
				readyTimer.start();
			}
		
			if(view==DAGConstants.ADD_LIMIT_VIEW)
			{
				if(isQuery=="true")
				{
					rpcService.addEventListener(ResultEvent.RESULT,restoreQueryObjectHandler);
					rpcService.restoreQueryObject();
				}
				else
				{
					rpcService.initFlexInterface();
					rpcService.addEventListener(ResultEvent.RESULT,initFlexInterfaceHandler);
					//rpcService.addEventListener(FaultEvent.FAULT, faultHandler);
				}
			}
			else
		 	{
		 		rpcService.addEventListener(ResultEvent.RESULT,restoreQueryObjectHandler);
				rpcService.restoreQueryObject();
		    }
	}
	/**
	* Repaint handler DAG on NEXT, PREVIOUS and REDEFINE buttons.
	*/
	private function repaintHandler(event: ResultEvent):void
	{
		//Alert.show("in repaintHandler" + " view " + view);
		if(view=="Result")
		{
			//TQBtn.label = "Calculated Parameters";
		 	//TQBtn.toolTip = "Calculated Parameters on selected nodes"			
		 	TQBtn.visible = false;
		 	JoinQueryBtn.visible = false;
		}
		else if(view == "AddLimit"){		
			TQBtn.label = "Temporal Query";
			TQBtn.toolTip = "Create temporal query on selected nodes"
		    TQBtn.visible = true;
		    JoinQueryBtn.visible = true;
		}
		
		var nodeMap : Object =  event.result as Object ;		
		var customNodeList : ArrayCollection = nodeMap["customFormulaNodeList"];
		var nodeList:ArrayCollection = nodeMap["dagNodeList"];
		var singleCustomNodeList : ArrayCollection = nodeMap["singleNodeCFList"];
		var joinQueryNodeList: ArrayCollection = nodeMap["joinQueryNodeList"];
		//Alert.show("joinQueryNodeList size " + joinQueryNodeList.length);
		for(var i:int=0;i<nodeList.length;i++)
		{
			var node:DAGNode = nodeList.getItemAt(i) as DAGNode;
			var xpos:int =0;
			var ypos:int =0;
			var nodeColor:int=0xFFFFAA;
			
			node.addEventListener(MouseEvent.MOUSE_MOVE,doDrag);
			node.addEventListener(MouseEvent.CLICK,updateNodeSelection);	
			var hideNodeFlag:Boolean=false;
			switch(node.nodeType)
			{
				
				case DAGConstants.CONSTRAINT_VIEW_NODE:	
						nodeColor=0xFFFFAA
						break;
				case DAGConstants.CONSTRAINT_ONLY_NODE:
						nodeColor=0xffb693;
						break;
				case DAGConstants.VIEW_ONLY_NODE:
						if(isQuery == "true")
						{
							hideNodeFlag=true;					
						}
						else
						{
							nodeColor =0xff8080;
						}
						break;
				default:																
						nodeColor=0xFFFFAA;	
			}	
			
			xpos = node.x;
			ypos = node.y;
			node.initializeNode(node.nodeName,node.nodeType,node.expressionId,node.toolTip,xpos,ypos,nodeColor);
			if(hideNodeFlag)
			{
				hideNodeFlag=false;	
			}
			else
			{
				mainPanel.addChild(node);
			}
			totalNodes.addItem(node);
		}
		for(var i:int=0;i<nodeList.length;i++)
		{
			
			var sourceNode:DAGNode = nodeList.getItemAt(i) as DAGNode;
			//Alert.show("in repaintHandler" + sourceNode.nodeName+ " target  "+ sourceNode.expressionId);	
			var associationList:ArrayCollection = sourceNode.associationList;
			var dagPathList:ArrayCollection = sourceNode.dagpathList;
			var operatorList:ArrayCollection = sourceNode.operatorList;

			 for(var j:int=0;j<associationList.length;j++)
			 {	
			    var targetNode:DAGNode = associationList.getItemAt(j) as DAGNode;	
				var path:DAGPath = dagPathList.getItemAt(j) as DAGPath;
				//Alert.show("in Association List " + targetNode.nodeName+ " target  "+ targetNode.expressionId);	
				//Alert.show("Operator list " + operatorList + " operatorList lenght   "+ operatorList.length);	
				if(operatorList!=null && operatorList.length!=0)
				{
					//Alert.show("get operator" + j );
				    var operator:String = operatorList.getItemAt(j) as String;
					var operatorSelectedIndex:int=0;
				    if(operator=="OR")
				    {
				     	path.operatorIndex=1;
				    }
					//Alert.show("after get operator" + j );
				}
				try
                {
                	//Alert.show("is query " + isQuery );
					if(isQuery == "true")
					{
						sourceNode.enable=true;
						if(sourceNode.nodeType!=DAGConstants.VIEW_ONLY_NODE)
						{
							//Alert.show("link nodes " + sourceNode.expressionId.toString()+ " target "+ targetNode.expressionId.toString() );
							linkNodes(sourceNode.expressionId.toString(),targetNode.expressionId.toString(),path);
					    }
					}
					else
					 {
					 	//Alert.show("link nodes " + sourceNode.expressionId.toString()+ " target "+ targetNode.expressionId.toString() );
						sourceNode.enable=false;
						linkNodes(sourceNode.expressionId.toString(),targetNode.expressionId.toString(),path);
					 }
                
                }catch(error:TypeError)
                {
                	AlertManager.showError("Error:"+error.message);	
                }
			 	
			 }
		}
		//Alert.show("After for loop");
		currentExp.text = getExprssionString();
		
		//repainting the Two Nodes TQ Custom Node
		repaintCustomNode(customNodeList, nodeList);
		
		//repainting the Single Node TQ Custom Node
        repainSingleCustomNode(singleCustomNodeList, nodeList);
        
        //repainting the Join Query Node
        repaintJoinQueryNode(joinQueryNodeList, nodeList);
		
		rpcService.removeEventListener(ResultEvent.RESULT,repaintHandler,false)
	}
	
	/**
	 * This method iterated the JOin Query Node List and calls the addJoinQueryNode method which draws the
	 * JQ node on UI. In this method we finalize the DAG nodes for respective Join Query Node from of the list. 
	 */
	private function repaintJoinQueryNode(joinQueryNodeList : ArrayCollection, dagNodeList : ArrayCollection): void
	{
		//Alert.show("repaintJoinQueryNode");
		for(var i: int = 0; i < joinQueryNodeList.length; i++)
		{
			var joinQueryNode :JoinQueryNode = joinQueryNodeList.getItemAt(i) as JoinQueryNode;
		    var joinQueryNodeName :String = joinQueryNode.name;
		    //Alert.show("joinQueryNodeName : " + joinQueryNodeName);
		    var nodeIds : Array = joinQueryNode.name.split("_");
		    var firstNodeId : String = "";
		    var secondNodeId : String = "";
		    var repaintDagNodeList : ArrayCollection = new ArrayCollection();
		    if(joinQueryNode.getNodeView() == "AddLimit")
			{
				//get the first & secind Node Id 
   		   		firstNodeId = nodeIds[1];
		        secondNodeId = nodeIds[2];
   		    }
   		    else if(joinQueryNode.getNodeView() == "Result")
   		    {
   		       	firstNodeId = nodeIds[1];
		       	secondNodeId = nodeIds[2];
   		    }
		    for(var j : int=0; j< dagNodeList.length; j++)
		    {
		    	var dagNode : DAGNode = dagNodeList.getItemAt(j) as DAGNode;
		    	if((dagNode.expressionId.toString() == firstNodeId) ||(dagNode.expressionId.toString() == secondNodeId))
		    	{
		    		//Put that node in List
		    		repaintDagNodeList.addItem(dagNode);
		    	}
		    }
		    //populate the repaintDAGNodeMap map
		    repaintDAGNodeMap.put(joinQueryNodeName, repaintDagNodeList);
            
            addJoinQueryNode(joinQueryNode);
		}
	}
	
	private function repainSingleCustomNode(customNodeList : ArrayCollection, dagNodeList : ArrayCollection): void
	{
		for(var i: int=0; i<customNodeList.length; i++)
		{
 			var singleNodeCustomNode : SingleNodeCustomFormulaNode = customNodeList.getItemAt(i) as SingleNodeCustomFormulaNode;
 			var customNodeName : String = singleNodeCustomNode.name;
 			var dagNodeId : String = "";
 			var Ids : Array = singleNodeCustomNode.name.split("_");
 			if(singleNodeCustomNode.getNodeView() == "AddLimit")
   		    {
   		    	dagNodeId = Ids[0];
   		    }
   		    else if(singleNodeCustomNode.getNodeView() == "Result")
   		    {
   		    	dagNodeId = Ids[1];
   		    }
 			var repaintDagNodeList : ArrayCollection = new ArrayCollection();
 			for(var j : int=0; j< dagNodeList.length; j++)
 			{
 				var dagNode : DAGNode = dagNodeList.getItemAt(j) as DAGNode;
 				if(dagNode.expressionId.toString() == dagNodeId)
 				{
 					repaintDagNodeList.addItem(dagNode);
 					break;
 				}
 			} 
 			
 			singleRepaintDAGNodeMap.put(customNodeName,repaintDagNodeList);
 			
 			//addSingleCustomFormulaNode(singleNodeCustomNode);
 			addSingleNodeCustomNode(singleNodeCustomNode);
		}
	}
	
	private function repaintCustomNode(customNodeList : ArrayCollection, dagNodeList : ArrayCollection): void
	{
		for(var i: int=0; i<customNodeList.length; i++)
		{
		     var customNode : CustomFormulaNode = customNodeList.getItemAt(i) as CustomFormulaNode;
		     var customNodeName : String = customNode.name;
		     var nodeIds : Array = customNode.name.split("_");
		     var firstNodeId : String = "";
		     var secondNodeId : String = "";
		     var repaintDagNodeList : ArrayCollection = new ArrayCollection();
		    if(customNode.getNodeView() == "AddLimit")
   		    {
   		   	   firstNodeId = nodeIds[0];
		       secondNodeId = nodeIds[1];
   		    }
   		    else if(customNode.getNodeView() == "Result")
   		    {
   		       firstNodeId = nodeIds[1];
		       secondNodeId = nodeIds[2];
   		    }
		    for(var j : int=0; j< dagNodeList.length; j++)
		    {
		    	var dagNode : DAGNode = dagNodeList.getItemAt(j) as DAGNode;
		    	if((dagNode.expressionId.toString() == firstNodeId) ||(dagNode.expressionId.toString() == secondNodeId))
		    	{
		    		//Put that node in List
		    		repaintDagNodeList.addItem(dagNode);
		    	}
		    }
		    repaintDAGNodeMap.put(customNodeName,repaintDagNodeList);
            
            addCustomFromulaNode(customNode);
		}
	}
	
	
	/**
     * Adds node in define result view
     * @param nodesStr name of node
     */
	public function addNodeToView(nodesStr:String):void
	{
		rpcService.removeEventListener(ResultEvent.RESULT,repaintHandler);
		rpcService.addEventListener(ResultEvent.RESULT,addNodeToViewHandler);
		rpcService.addNodeToView(nodesStr);
	}	
	/**
     * Handler to add node in define result view. 
     */	
	private function addNodeToViewHandler(event: ResultEvent):void 		
	{
		var node:DAGNode = event.result as DAGNode;
		if(node!=null)
		{
			isOutputView = true;
			this.addNode(node);
		}
		rpcService.removeEventListener(ResultEvent.RESULT,addNodeToViewHandler,false);
	}
	/**
	 * Search Result. 
	 */		
	public function searchResult():void
	{
		rpcService.addEventListener(ResultEvent.RESULT,searchResultHandler);
		rpcService.getSearchResult();
	}
	/**
	 * Search Result handler. 
	 */	
	private function searchResultHandler(event: ResultEvent):void 
	{
		var status:int =event.result as int;
				
		switch(status)
		{
			case DAGConstants.SUCCESS:
							ExternalInterface.call("showViewSearchResultsJsp");
							break;
			case DAGConstants.NO_RESULT_PRESENT:
							showValidationMessagesToUser(DAGConstants.NO_RESULT_PRESENT_MESSAGE);
							break;
			case DAGConstants.EMPTY_DAG:
							showValidationMessagesToUser(DAGConstants.EMPTY_DAG_MESSAGE);
							break;
			case DAGConstants.MULTIPLE_ROOT:
							showValidationMessagesToUser(DAGConstants.MULTIPLE_ROOT_MESSAGE);
							break;
			case DAGConstants.CLASS_NOT_FOUND:
							showValidationMessagesToUser(DAGConstants.GENERIC_MESSAGE)
							break;
			case DAGConstants.SQL_EXCEPTION:
							showValidationMessagesToUser(DAGConstants.GENERIC_MESSAGE)
							break;
			case DAGConstants.DAO_EXCEPTION:
							showValidationMessagesToUser(DAGConstants.GENERIC_MESSAGE)
							break;
			case DAGConstants.TREE_NODES_LIMIT:		
							ExternalInterface.call("openDecisionMakingPage");		
							break;
			case DAGConstants.NO_MAIN_OBJECT_IN_QUERY:		
							ExternalInterface.call("showMainObjectNotPresentMessage");		
							break;
			default:break; 				
		}
		rpcService.removeEventListener(ResultEvent.RESULT,searchResultHandler,false);
		
	}
	/**
	 *Show validation messages. 
	 */	
	public function showValidationMessagesToUser(errorMessage:String):void
	{
		var paramArray:Array = new Array(errorMessage);
		ExternalInterface.call("showValidationMessages",paramArray);
	}
	/**
	* Adds node to DAG
	* @param strToCreateQueyObject contraint string to create node
	* @param entityName node name
	*/
	public function createNode(strToCreateQueyObject:String,entityName:String):void
	{
		
		if(strToCreateQueyObject=="")	
		{
			showValidationMessagesToUser(DAGConstants.EMPTY_LIMIT_ERROR_MESSAGE);
		}
		else
		{
			rpcService.addEventListener(ResultEvent.RESULT,getNodeResultHandler);
			rpcService.createNode(strToCreateQueyObject,entityName);
		}
	}
	/**
	* Link node Handler
	*/
	public function linkNodesHandler(event: ResultEvent):void
	{
		var selectedList:ArrayCollection =  event.result  as  ArrayCollection;

		var path:DAGPath =null;
		if(selectedList!=null)
		{
			if(selectedList.length!=0)
			{
				path = selectedList.getItemAt(0) as DAGPath;
				linkNodes(firstNode,secondNode,path);
			}
			else
			{
				AlertManager.showWarning("The selected classes may not be linked together because a cyclic graph is created.");
			}
				
		}
		else
		{
			AlertManager.showWarning("The selected classes may not be linked together because no association exists between them in the object model.");
		}
		rpcService.removeEventListener(ResultEvent.RESULT,linkNodesHandler,false);
	}
/*	//code for multiple association
		if(selectedList.length > 0 )
			{
				
				var numAssociation:int=selectedList.length
				for(var i:int;i<numAssociation;i++)
				{
					
					path = selectedList.getItemAt(i) as DAGPath;
					path.operatorIndex=0;
					linkNodes(firstNode,secondNode,path);
				}
				selectedList=null;
			}
			else
			{
				path = selectedList.getItemAt(0) as IDAGPath;
				linkNodes(firstNode,secondNode,path);
			}
			//linkCount++;
		}*/

	
	/**
	*Add node handler
	*/
	public function getNodeResultHandler(event: ResultEvent):void
	{
		var node:DAGNode = event.result as DAGNode;
		if(node!=null)
		{
			if(node.errorMsg=="")
			{
				this.addNode(node);
				showValidationMessagesToUser("");
			}
			else
			{
				showValidationMessagesToUser(node.errorMsg);
				node.errorMsg="";
			}
		}
		rpcService.removeEventListener(ResultEvent.RESULT,getNodeResultHandler,false);
	}
	/**
	* Creates Ambiguity Popup
	*/        
	private function createPopUp():void {
	    PopUpManager.addPopUp(ambiguityPanel,this,true);
	    PopUpManager.centerPopUp(ambiguityPanel);  
	    }
	
	/**
	* Actula addition of node on DAG panel.
	*/
	private function addNode(node:DAGNode):void
	{
		
		var newNode:DAGNode = new DAGNode();
		var toolTipStr:String="";
		var x:int=0;
		var y:int=0;
		var nodeColor:int=0;
		
		if(isOutputView)
		{
			nodeColor =0xff8080;
			toolTipStr="";
		}
		else
		{
			nodeColor =0xFFFFAA;
			toolTipStr=node.toolTip;
		}
		if(mainPanel.getChildren().length==0)
		{
			x = 20;
			y = (mainPanel.y);
			
			lastAddedNodeX = x;
			lastAddedNodeY = y;
		}
		else
		{ 
			/*var length:int=mainPanel.getChildren().length;
			x = 20;
			y = (mainPanel.y+50)+(40*length);
			
			*/
		   var newX :int = lastAddedNodeX +  100;
           var newY :int = lastAddedNodeY + 50;
            
           lastAddedNodeX = newX;
           lastAddedNodeY  = newY;

            x =  newX;
            y =  newY;

		}
		newNode.dagpathList = new ArrayCollection();
		newNode.initializeNode(node.nodeName,node.nodeType,node.expressionId,toolTipStr,x,y,nodeColor);
		newNode.id = node.expressionId.toString();
		newNode.addEventListener(MouseEvent.MOUSE_MOVE,doDrag);
		newNode.addEventListener(MouseEvent.CLICK,updateNodeSelection);
		mainPanel.addChild(newNode);
		totalNodes.addItem(newNode);
		currentExp.text =getExprssionString();
		lastAddedNodeExpId = newNode.expressionId;
	}
	/**
	 Draw link between 2 nodes. 
	*/
	private function drawLine():void{
		CursorManager.setBusyCursor();
		
		var dagNode1:DAGNode = DAGNode(mainPanel.getChildByName(node1));
		
		var dagNode2:DAGNode = DAGNode(mainPanel.getChildByName(node2));
			
		if(dagNode1 == null || dagNode2 == null)
		{
			AlertManager.showWarning("Two classes must be selected before pressing the 'Add Link' button.");
			CursorManager.removeBusyCursor();	
		}
		else
		{
			if(dagNode1.getOutAssociation(node2) != null)
			{
				AlertManager.showWarning("The selected classes are already linked in the Diagrammatic View.");
		  		CursorManager.removeBusyCursor();   	   
			}
			else
			{
				link(node1,node2);
			}
		}
	}
	/**
	Path handler.
	*/
	public function getPathHandler(event: ResultEvent):void
	{		
		try
		{
		var dagpath:DAGPath = new DAGPath();
		ambiguityPanel = new  AmbiguityPanel();
	    ambiguityPanel.title="Ambiguity resolver";
	    
		ambiguityPanel.pathList= event.result as ArrayCollection;
		if(ambiguityPanel.pathList==null || ambiguityPanel.pathList.length==0)
		{
			AlertManager.showInfo("No paths present.");
		}
		else
		{
			if(ambiguityPanel.pathList.length>1)
			{			
				ambiguityPanel.nodeList=selectedNodeList;
				createPopUp();
			}
			else
			{				
				rpcService.removeEventListener(ResultEvent.RESULT,getPathHandler,false);				
				rpcService.addEventListener("result",linkNodesHandler);		
				
				rpcService.linkNodes(selectedNodeList,ambiguityPanel.pathList);
			}
		}
		}catch(error:Error)
		{
			AlertManager.showError("Error"+error.getStackTrace());
		}
		finally
		{
			rpcService.removeEventListener(ResultEvent.RESULT,getPathHandler,false);
	        CursorManager.removeBusyCursor();
		}
	}
	/**
	Ambiguity panel cancel handler.
	*/
	public function cancelHandler(nodeList:ArrayCollection):void
	{
			node1="";
			node2="";
			var dagNode1:DAGNode =nodeList[0]as DAGNode;
			var dagNode2:DAGNode =nodeList[1]as DAGNode;
			dagNode1.unSelect();
			dagNode2.unSelect();
			selectedNodeList.removeAll();
			count=0;
			rpcService.removeEventListener(ResultEvent.RESULT,linkNodesHandler,false);
	}
	/**
	Link 2 nodes.
	*/	
	public function link(node1:String,node2:String):void
	{
		
		firstNode=node1;
		secondNode=node2;
		rpcService.addEventListener("result",getPathHandler);
		rpcService.getpaths(selectedNodeList);
	}
	/**
	Link 2 nodes.
	*/	
	public function linkNodes(firstNode:String,secondNode:String,path:DAGPath):void
	{
			var dagNode1:DAGNode = DAGNode(mainPanel.getChildByName(firstNode));
			var dagNode2:DAGNode = DAGNode(mainPanel.getChildByName(secondNode));
			if(dagNode2!=null)	
			{
				if (dagNode1.width==0)
				{
					dagNode1.width = 190;	
				}
				var fromX:int = dagNode1.x+dagNode1.width;
				var fromY:int = dagNode1.y+(15);
				var toX:int = dagNode2.x;
				var toY:int = dagNode2.y+(15);
				
				var vBox:VBox = dagNode1.getChildByName("Association") as VBox;
				vBox.visible=true;
							
				if(path!=null)			
				{
					var newPath:DAGPath = new DAGPath();
					newPath.toolTip = path.toolTip;
					newPath.name = path.id+"_"+path.sourceExpId+"_"+path.destinationExpId;
					newPath.id = path.id;
					newPath.sourceExpId=path.sourceExpId;
					newPath.destinationExpId=path.destinationExpId;
					newPath.operatorIndex=path.operatorIndex;
					//---------------
					newPath.setFromNode(dagNode1);
					newPath.setToNode(dagNode2);
					newPath.setX1(fromX);
					newPath.setY1(fromY);
					newPath.setX2(toX);
					newPath.setY2(toY);
					newPath.draw();
					//-----
					mainPanel.addChild(newPath);
					dagPathUIMap.put(newPath.name,newPath);
					if(!allPaths.contains(newPath.name))
					{
						allPaths.addItem(newPath.name);
					}
								
					dagNode1.attachedNodeMap.put(dagNode2.name,dagNode2);
	   			}
				
				//removing selections
				dagNode1.unSelect();
				dagNode2.unSelect();
				if(dagNode1.nodeType==DAGConstants.VIEW_ONLY_NODE || dagNode2.nodeType==DAGConstants.VIEW_ONLY_NODE)
				{
					dagNode1.addOutAssociation(secondNode,newPath.name,0);
					dagNode2.addInAssociation(firstNode,newPath.name,0);
				}
				else
				{	
					var operatorIndex:int = path.operatorIndex;
				 	dagNode1.addDisplayOutAssociation(secondNode,newPath.name,operatorIndex);
					dagNode1.addOutAssociation(secondNode,newPath.name,operatorIndex);
					dagNode2.addInAssociation(firstNode,newPath.name,operatorIndex);
				}
				node1="";
				node2="";
				selectedNodeList.removeAll();
				count=0;
			}
			currentExp.text = getExprssionString();
	}
							
	/**
	Selectin nodes on DAG
	*/
	public function updateNodeSelection(event:MouseEvent):void {
	selectedNode=null;
		//if(event.shiftKey)
		
		if(!event.altKey && !event.ctrlKey && !event.shiftKey )
		{	
			if(event.target.className != "UITextField" && event.target.className != "Button")
				if(event.target.id != "createMenu" && event.target.id != "operatorCombo"){					
			var dagNode:DAGNode = DAGNode(mainPanel.getChildByName(event.currentTarget.name));
			if(dagNode != null)
			{
				if(dagNode.name == node1 )
				{
					if(selectedNodeList!=null)
					{
						if(selectedNodeList.length==2)
						{
							selectedNodeList.removeItemAt(0);
							node1=node2;
							node2="";
						}
						else
						{
							selectedNodeList.removeItemAt(0);
							node1 = "";
						}
						count--;
					
					}
					dagNode.unSelect();
	
				}
				else if(dagNode.name == node2)
				{
					if(selectedNodeList!=null)
					{
						selectedNodeList.removeItemAt(1);
						count--;
					}
					dagNode.unSelect();
					node2 = "";
				}
				else
				{
					if(node1 == "")
					{
						node1 = event.currentTarget.name;
					}
					else
					{							
						if(node2 == "")
						{
							node2 = event.currentTarget.name;
						}
						else
						{
							DAGNode(mainPanel.getChildByName(node1)).unSelect();
							node1 = node2;
							node2 = event.currentTarget.name;
							selectedNodeList.removeItemAt(0);
							count--;
						}
					}
					dagNode.select();
					selectedNode = dagNode;
										
					if(count<2)
					{
						selectedNodeList.addItem(dagNode);
					}
					count++;
				}
			}
		  }
		}
		
	}
	/**
	*Edit node 
	*/
	public function editNode(node:DAGNode):void
	{
		eNode=node;
		rpcService.removeEventListener(ResultEvent.RESULT,getNodeResultHandler,false);
		rpcService.getLimitUI(node.expressionId);
		rpcService.addEventListener(ResultEvent.RESULT,limitUIHandler);
		
	}
	/**
	* Show entity information on editing UI
	*/
	public function limitUIHandler(event:ResultEvent):void
	{
		var htmlStr:String = event.result as String;
		ExternalInterface.call("showEntityInformation",htmlStr);
		rpcService.removeEventListener(ResultEvent.RESULT,limitUIHandler);
	}	
	/**
	* Edits Limit 
	* @param strToCreateQueyObject condition string on node
	* @param entityName Entity name.
	*/
	public function editLimit(strToCreateQueyObject:String,entityName:String):void
	{
		
		if(strToCreateQueyObject=="")	
		{
			showValidationMessagesToUser(DAGConstants.EMPTY_LIMIT_ERROR_MESSAGE);
		}
		else
		{
			rpcService.addEventListener(ResultEvent.RESULT,editNodeHandler);
			rpcService.editNode(strToCreateQueyObject,entityName);
		}
							
	}
	/**
	* Edit node handler
	*/
	public function editNodeHandler(event:ResultEvent):void
	{
		var node:DAGNode = event.result as DAGNode;
		if(node!=null)
		{
			if(node.errorMsg=="")
			{
				eNode.toolTip = node.toolTip;
				showValidationMessagesToUser(DAGConstants.EDIT_LIMITS_MESSAGE);
			}
			else
			{
				showValidationMessagesToUser(node.errorMsg);
				node.errorMsg="";
			}
		}
		rpcService.removeEventListener(ResultEvent.RESULT,editNodeHandler);
	}
	/**
	*Getting Current Expression
	*/
	public function getExprssionString():String
	{
        var expressionToStringMap:HashMap = new HashMap();
        var expressionsCovered:HashMap = new HashMap();

        for(var i:int = 0; i < totalNodes.length; i++)
        {
        	var dagNode:DAGNode = totalNodes.getItemAt(i)as DAGNode;
        	var exprssIdStr:String	= dagNode.expressionId + "";
            if (null == expressionToStringMap.getValue(exprssIdStr))
            {
                FormExpression(expressionToStringMap, expressionsCovered,dagNode);
            }
        }

        var expressionString:String = "";
	     expressionString =expressionString+"Current Expression:";
        var nonConnectedExpressions:String = "";
        var totalNonConnectedExpressions:int = 0;
        
         for(var i:int = 0; i < totalNodes.length; i++) {
           var dagNode:DAGNode = totalNodes.getItemAt(i)as DAGNode;
           var exprssIdStr:String	= dagNode.expressionId + "";
     
            if (expressionsCovered.containsKey(exprssIdStr) == false) {
                if ((dagNode.displayoutAssociations.length == 0)&&(dagNode.nodeType!=DAGConstants.VIEW_ONLY_NODE))
                 {
                    nonConnectedExpressions += exprssIdStr;
                    nonConnectedExpressions += " ";
                    totalNonConnectedExpressions++;
                } else {
                    expressionString =expressionString +expressionToStringMap.getValue(exprssIdStr);
                }
            }
        }

        if (totalNonConnectedExpressions > 0) {
            expressionString = expressionString+ "Expression " + nonConnectedExpressions;
            if (totalNonConnectedExpressions == 1) {
                expressionString = expressionString +" is not connected";
            } else {
                expressionString = expressionString+" are not connected";
            }
        }

	   return expressionString;
    }
    /**
    * Forming current expression
    */
    private function FormExpression(expressionToStringMap:HashMap,expressionsCovered:HashMap,node:DAGNode):String
    {
        var expressionString:String = "";
       //If node is only in view and does not have constraints, its should not be a part of the expression string
       if(node.nodeType == DAGConstants.VIEW_ONLY_NODE)
		{
       	    expressionToStringMap.put(node.expressionId+"", expressionString);
            return expressionString;
        }
        
         var expressionId:int = node.expressionId;
			
	     if(node.displayoutAssociations.length>0)
		 {   
		 	var assocation:Association = node.displayoutAssociations.getItemAt(0) as Association;
		 	if(assocation.operatorIndex==0)
            {
			 	expressionString=expressionString +" (" + expressionId +" "+"AND"+" ";
            }
            else
            {
            	expressionString=expressionString +" (" + expressionId +" "+"OR"+" ";
         	}

		     if(node.displayoutAssociations.length>1)
			{
                 expressionString=expressionString + " (";
            }

            for (var i:int=0; i <node.displayoutAssociations.length; i++) 
			{
				assocation = node.displayoutAssociations.getItemAt(i) as Association;
				var attachedNode:HashMap =node.attachedNodeMap as HashMap;
				
				var associationNode:DAGNode = attachedNode.getValue(assocation.associatedNode) as DAGNode; 
				
                if (i > 0 && (associationNode.nodeType!=DAGConstants.VIEW_ONLY_NODE)) 
                {
                	if(assocation.operatorIndex==0)
                	{
                     	expressionString=expressionString+" "+"AND"+" ";
	                }
	                else
	                {
                 	 	expressionString=expressionString+" "+"OR"+" ";
	                }
                }

                if (expressionToStringMap.getValue(associationNode.name) != null)
                {
                     expressionString=expressionString+expressionToStringMap.getValue((associationNode.name));
                }
                else
                {
                     expressionString=expressionString +FormExpression(expressionToStringMap, expressionsCovered,associationNode);
                }

                expressionsCovered.put(associationNode.name,associationNode);
            }

	           if(node.displayoutAssociations.length>1)
				{
                expressionString=expressionString +") ";
        	    }

            	  expressionString=expressionString+") ";
        } 
        else
        {
           expressionString=expressionString + expressionId;
		}
        expressionToStringMap.put(node.expressionId+"",expressionString);
   
        return expressionString;
    }
    /**
    * Clear all Paths in DAG
    */
	public function clearPaths():void
	{
		 for(var i:int=0;i<allPaths.length;i++)
		 {
			var key:String = allPaths.getItemAt(i) as String;
			var dagPath:DAGPath = dagPathUIMap.getValue(key) as DAGPath;
			dagPath.deletePath(dagPath.getFromNode(),dagPath.getToNode());
		 }
		 dagPathUIMap.clear();
	}

	public function openTQPopUp():void
    {
		//var dagNode1:DAGNode = DAGNode(mainPanel.getChildByName(node1));
		//var dagNode2:DAGNode = DAGNode(mainPanel.getChildByName(node2));
		 
	    //if((dagNode1 != null) && (dagNode2 != null))
	    if(selectedNodeList.length ==2)
	    {
	    	rpcService.addEventListener("result",nodeValidityHandler);
		    rpcService.checkIfNodesAreValid(selectedNodeList, false);
	    }
	    else
	    {
	    	if(selectedNodeList.length ==1)
	     	{
            	rpcService.addEventListener(ResultEvent.RESULT,singleNodeValidityHandler);
                rpcService.checkIfSingleNodeValid(selectedNodeList); 
	     	}
		}
	}
	 
	/**
	 * Check the selected node list length and then check wheather nodes selected are valid.
	 */
	public function openJoinQueryPopUp(): void
	{
		if(selectedNodeList.length == 2)
	    {
	    	rpcService.addEventListener("result", nodeValidityHandlerForJoinQuery);
		    rpcService.checkIfNodesAreValid(selectedNodeList, true);
	    }
	}
	 
	private function singleNodeValidityHandler(event : ResultEvent) : void
	{
		var isNodeValid : Boolean = event.result as Boolean;
	 	rpcService.removeEventListener(ResultEvent.RESULT,singleNodeValidityHandler);
	 	
	 	if(isNodeValid == true)
	 	{
	 		 rpcService.getSingleNodeQueryDate(selectedNodeList);
	 		 rpcService.addEventListener(ResultEvent.RESULT, singleNodeDataHandler);
	 	}
	 	else
	 	{
	 	     AlertManager.showWarning("A calculated predicate may not be added to the selected class as it does not contain any date, timestamp, or quantitative attributes.");	
	 	}
	}
	 
	private function nodeValidityHandler(event : ResultEvent):void
	{
		var areNodesValid : Boolean = event.result as Boolean;
		rpcService.removeEventListener(ResultEvent.RESULT,nodeValidityHandler);
		
		if(areNodesValid == true)
		{
		     rpcService.retrieveQueryData(selectedNodeList, false);
		     rpcService.addEventListener(ResultEvent.RESULT,populateDataHandler);
		}
		else
		{
			 AlertManager.showWarning("A calculated predicate may not be added to the selected classes as either one or both do not contain any date, timestamp, or quantitative attributes.");
		}
	}
	
	/**
	 * Handler for method check for valid nodes. If the nodes are valid, then get the DE meta data from
	 * call at backend.
	 */
	private function nodeValidityHandlerForJoinQuery(event : ResultEvent):void
	{
		var areNodesValid : Boolean = event.result as Boolean;
		rpcService.removeEventListener(ResultEvent.RESULT,nodeValidityHandlerForJoinQuery);
		
		if(areNodesValid == false)
		{
		     rpcService.retrieveQueryData(selectedNodeList, true);
		     rpcService.addEventListener(ResultEvent.RESULT, populateDataHandlerForJoinQuery);
		}		
	}
	
	
	private function singleNodeDataHandler(event : ResultEvent) : void
	{
		var queryDataMap : Object =event.result as Object;
	    createAndPopulateSingleNodeTq(queryDataMap, "create", null);
	}
	
	/**
	 * This method acts like the initializer for setting data in Join Query Pop Window. 
	 */
	public function createAndPopulateJoinQueryPopUp(resultMap :Object, operation : String,
		joinQueryNode : JoinQueryNode, formattedLabelList: ArrayCollection) : void
	{
		queryDataMap = resultMap;
		rpcService.removeEventListener(ResultEvent.RESULT, populateDataHandler);
		//Alert.show("1");
		
		var firstNodeDataObject : Object = queryDataMap["firstDropDown"];
	    var firstNodeAttributesList : ArrayCollection = new ArrayCollection();
	    for(var key:String in firstNodeDataObject)
	    {
	    	firstNodeAttributesList.addItem(key);	     	
	    }
	    
	    var secondNodeDataObject : Object = queryDataMap["thirdDropDown"];
	    var secondNodeAttributeList : ArrayCollection = new ArrayCollection();
	    for(var key1:String in secondNodeDataObject)
	    {
	    	secondNodeAttributeList.addItem(key1);	     	
	    }
		
		//create JoinQueryPopUpWindow instance and create window. 
	    popUpForJoinQuery = JoinQueryPopUpWindow(PopUpManager.createPopUp(this, JoinQueryPopUpWindow, true));
	    //Alert.show("2");	   
    	popUpForJoinQuery.showCloseButton = true;
    	
    	var entitiesNameList : ArrayCollection = queryDataMap["entityList"];		 
	    popUpForJoinQuery.firstEntityLabel = entitiesNameList.getItemAt(0) as String;
	   	popUpForJoinQuery.secondEntityLabel = entitiesNameList.getItemAt(1) as String;
	   	
	   	popUpForJoinQuery.firstNodeDp = firstNodeDataObject;
	    popUpForJoinQuery.secondNodeDp =  secondNodeDataObject; 
    	
    	popUpForJoinQuery.leftDropDown = firstNodeAttributesList;
	    popUpForJoinQuery.rightDropDown = secondNodeAttributeList;
	    if(operation == "create")
	    {
			var firstDAGNode : DAGNode = DAGNode(mainPanel.getChildByName(node1));
		    var secondDAGNode : DAGNode = DAGNode(mainPanel.getChildByName(node2)); 
		     
		    //Setting the names
		    popUpForJoinQuery.firstEntityName = firstDAGNode.nodeName;
		    popUpForJoinQuery.secondEntityName = secondDAGNode.nodeName;
		    
			//Setting the Exp Ids
			popUpForJoinQuery.firstEntityExpId = firstDAGNode.expressionId;
		    popUpForJoinQuery.secondEntityExpId = secondDAGNode.expressionId;
		    
	    	popUpForJoinQuery.title ="Join";
	    	
	    	//Setting the nodeName
		    popUpForJoinQuery.nodeName = getJoinQueryNodeName(firstDAGNode, secondDAGNode);
	    }
	    else
		{
			if(joinQueryNode != null)
			{	
				//Setting the names
	   			popUpForJoinQuery.firstEntityName = joinQueryNode.getFirstNodeEntityName();
	   			popUpForJoinQuery.secondEntityName = joinQueryNode.getSecondNodeEntityName();
	  
	  			//Setting the Exp Ids
	 			popUpForJoinQuery.firstEntityExpId =  joinQueryNode.getFirstNodeExpressionId();
	 			popUpForJoinQuery.secondEntityExpId = joinQueryNode.getSecondNodeExpressionId();
	  
	 			//Setting the nodeName
	 			popUpForJoinQuery.nodeName = joinQueryNode.name;
	 		}
 		}
 		
 		if(operation == "edit")
 		{
 			//var firstDAGNode : DAGNode = DAGNode(mainPanel.getChildByName(node1));
		    //var secondDAGNode : DAGNode = DAGNode(mainPanel.getChildByName(node2));
		    
 			popUpForJoinQuery.title ="Edit Condition";
	        popUpForJoinQuery.buttonLabel = "Edit";
	        var joinFormulaNodeList: ArrayCollection = joinQueryNode.getJoinFormulaNodeList();
	        popUpForJoinQuery.counter = joinQueryNode.getJoinFormulaNodeList().length;
	        //Alert.show("popUpForJoinQuery.counter " + popUpForJoinQuery.counter);
	        //counter incremented.
			//counter++;
			//attributes++;
			
			//Check added to hide/un-hide delete buttons on UI. 
			if(popUpForJoinQuery.counter >= 1)
			{
				//make the delete button and delete all checkbox visible.
				popUpForJoinQuery.deleteButton.visible = true;
				popUpForJoinQuery.deleteAllChkBox.visible = true;
				popUpForJoinQuery.deleteAllChkBox.selected = false;
				popUpForJoinQuery.submitButton.enabled = true;
				popUpForJoinQuery.deleteAllLabel.visible = true;
			} 
			
			var firstLabelName: String = null;
			var secondLabelName: String = null;
			var labelName: String = null;
			var formattedLabel: Array = new Array();
			for(var count: int = 1; count <= joinFormulaNodeList.length; count++)
			{
				if(formattedLabelList != null)
				{
					labelName = formattedLabelList.getItemAt(count - 1) as String;
					formattedLabel = labelName.split("_");
//					secondLabelName = formattedLbelList.getItemAt(count - 1);
				}
				var joinFormulaNode: JoinFormulaNode = joinFormulaNodeList.getItemAt(count - 1) as JoinFormulaNode;
				//new Hbox added for each attribute when user selects add attribute button.
				var hbox: HBox = new HBox();
				hbox.id = "hbox_" + count;
				hbox.name = "hbox_" + count;
				hbox.height = 25;
				//hbox added to Vbox with id = "addAttributeId".
				popUpForJoinQuery.addAttributeId.addChild(hbox);
				
				//first VBox added in Hbox
				var vboxForCheckbox: VBox = new VBox();
				vboxForCheckbox.id = "vboxForCheckBox_" + count;
				vboxForCheckbox.name = "vboxForCheckBox_" + count;
				vboxForCheckbox.width = 30;
				hbox.addChild(vboxForCheckbox);
				
				//second VBox added in Hbox
				var vboxForFirstDropDown: VBox = new VBox();
				vboxForFirstDropDown.id = "vboxForFirstDropDown_" + count;
				vboxForFirstDropDown.name = "vboxForFirstDropDown_" + count;
				vboxForFirstDropDown.width = 262;
				hbox.addChild(vboxForFirstDropDown);
				
				//third VBox added in Hbox
				var vboxForSecondDropDown: VBox = new VBox();
				vboxForSecondDropDown.id = "vboxForSecondDropDown_" + count;
				vboxForSecondDropDown.name = "vboxForSecondDropDown_" + count;
				vboxForSecondDropDown.width = 190;
				hbox.addChild(vboxForSecondDropDown);
				
				//checkbox added in first VBox
				var checkBox: CheckBox = new CheckBox();
				checkBox = new CheckBox();
				checkBox.id = "checkBox_" + count;
				checkBox.name = "checkBox_" + count;
//				if(deleteAllChkBox.selected == true)
//				{
//					checkBox.selected = true;
//				}
				vboxForCheckbox.addChild(checkBox);			
				
				//combo box added in second VBox
				var comboxBox1: ComboBox = new ComboBox();
				comboxBox1.id = "comboxBox1_" + count;
				comboxBox1.name = "comboxBox1_" + count; 
				comboxBox1.dataProvider = popUpForJoinQuery.leftDropDown;
				comboxBox1.width = 180;
				//comboxBox1.prompt = "--Select--";
				comboxBox1.rowCount = 7;
				comboxBox1.toolTip = "";
				if(joinFormulaNode.getFirstAttributeName() != "" || 
					joinFormulaNode.getFirstAttributeName() != "null")
				{
					//Alert.show("IN!!!!!!!!!!!! " + formattedLabel[0] + " , " + formattedLabel[1]);
					comboxBox1.selectedItem = formattedLabel[0];	
				}
				//comboxBox1.selectedItem = "SAGAR";
				vboxForFirstDropDown.addChild(comboxBox1);
				
				//combo box added in third VBox
				var comboxBox2: ComboBox = new ComboBox();
				comboxBox2.id = "comboxBox2_" + count;
				comboxBox2.name = "comboxBox2_" + count;
				comboxBox2.dataProvider = popUpForJoinQuery.rightDropDown;
				comboxBox2.width = 180	;
				//comboxBox2.prompt = "--Select--";
				comboxBox2.rowCount = 7;
				comboxBox2.toolTip = "";
				comboxBox2.selectedItem = formattedLabel[1];
				vboxForSecondDropDown.addChild(comboxBox2);
			}
			//Setting the nodeName
		    //popUp.nodeName = firstDAGNode.nodeNumber + "_" + secondDAGNode.nodeNumber;
		    //popUpForJoinQuery.nodeName = getJoinQueryNodeName(firstDAGNode, secondDAGNode);
		}
 		PopUpManager.centerPopUp(popUpForJoinQuery);
  	}
	
    public  function createAndPopulateSingleNodeTq(queryDataMap : Object, operation : String, customNode : SingleNodeCustomFormulaNode) : void
	{
		rpcService.removeEventListener(ResultEvent.RESULT,singleNodeDataHandler);
		
		//Getting all arithmetic operators 
	     var arithmeticOperatorsList : ArrayCollection = queryDataMap["secondDropDown"];	
   
	     //Getting the Entity's Map
	     var nodeAttributeList : ArrayCollection = new ArrayCollection();
         var nodeDataObject : Object = queryDataMap["thirdDropDown"];
	     
	     //Iterating over the first node attribute map to get all the arrtibutes which is key in the Map 	    
	     for(var key:String in nodeDataObject)
	     {
	     	nodeAttributeList.addItem(key);	     	
	     }
	     var relationalOprsList : ArrayCollection = queryDataMap["fourthDropDown"];
	     var timeIntervalsList : ArrayCollection = queryDataMap["timeIntervals"];
	     var entitiesNameList : ArrayCollection = queryDataMap["entityList"];

         //Creating the popup
         singleNodeTQPope = singleNodeTQWidow(PopUpManager.createPopUp(this, singleNodeTQWidow, true)); 
	     
	     //Initalizing various DataProviders
	     singleNodeTQPope.arithmeticOpDp = arithmeticOperatorsList;
	     singleNodeTQPope.attributesDp = nodeAttributeList;
	     singleNodeTQPope.relationalDp = relationalOprsList;
	     singleNodeTQPope.timeIntervalsDp = timeIntervalsList;
	     singleNodeTQPope.entityLabelString = entitiesNameList.getItemAt(0) as String;
  	    
  	     //Initializing node Data Map
  	     singleNodeTQPope.entityDp = nodeDataObject;
  	     
	     //By default selecting if it is a single attribute in the list
	     if(operation == "create")
	     {
	      //Getting the selected DAGNode
  	       var dagNode : DAGNode = selectedNodeList.getItemAt(0) as DAGNode;
  	       singleNodeTQPope.entityExpressionId = dagNode.expressionId;
  	       singleNodeTQPope.entityName = dagNode.nodeName;
	       
	       singleNodeTQPope.customNodeName = getSingleCustomNodeName(dagNode);   
	     	
	     	singleNodeTQPope.buttonLabel = "OK";
	     	singleNodeTQPope.title ="Define Condition";
	     	if(nodeAttributeList.length ==1)
	     	{
	          singleNodeTQPope.attributesCb.selectedIndex = 0;
	        }
	        singleNodeTQPope.arithmaticOpsCb.selectedItem = "-";    	
	        
	     }
	     else
        {
        	if(operation == "edit" && customNode != null)
        	{
               	singleNodeTQPope.title = "Edit Condition";
               	singleNodeTQPope.buttonLabel = "Edit";
               	singleNodeTQPope.arithmaticOpsCb.selectedItem = customNode.getSelectedArithmeticOp();
               	singleNodeTQPope.attributesCb.selectedItem = customNode.getAtributeName();
               	if(customNode.getAtributeType() == "Integer"){
					//Creating the ComboBox
	      			existingOpComboBox= singleNodeTQPope.firstComboPlace.getChildByName("fstOpComboBox") as ComboBox;
		        	if(existingOpComboBox == null)
		        	{
		        		var firstOpComboBox : ComboBox =  new ComboBox();
	   	       			firstOpComboBox.id = "fstOpComboBox";
	   	       			firstOpComboBox.name = "fstOpComboBox";
	   	       			firstOpComboBox.width = 100;
	   	       			firstOpComboBox.dataProvider = singleNodeTQPope.timeIntervalsDp;       	       		  	              
	   	              	firstOpComboBox.rowCount = 10;
	   	              	firstOpComboBox.selectedItem = customNode.getQAttrInterval();      	       			
	          			//Adding datePicket as childs
	    	   			singleNodeTQPope.firstComboPlace.addChild(firstOpComboBox);       	 	   			 
		     		}		        	
	            }
               	singleNodeTQPope.relationalOpsCb.selectedItem = customNode.getSelectedLogicalOp();
                
                //Setting the Expression Id as it is used for creating the node name
                singleNodeTQPope.entityExpressionId =  customNode.getNodeExpressionId(); 
                
                //Setting the Entity name 
                 singleNodeTQPope.entityName = customNode.getEntityName();
               
                 //Setting the node name
                 singleNodeTQPope.customNodeName = customNode.name;
               
                if(view != "Result"){ 
			        //Setting the custom column name and time interval
		        	singleNodeTQPope.customColumnName.text = customNode.getCustomColumnName();
	        	}
	        	else
	        	{
	        		singleNodeTQPope.customColumnName.text =  customNode.getCustomColumnName();
	        		singleNodeTQPope.timeIntervalCb6.selectedItem = customNode.getCCInterval();
	        	}
                
	        	
               //Handling LHS DatePickers and Text Inputs
               if(customNode.getLhsTimeInterval() != "null")
               {
					//Right now there exists only DatePicker on LHS
               }
               else
               {
					var date  : Date = new Date(customNode.getLhsTimeValue());
					singleNodeTQPope.datePicker.selectedDate = date;
					                	
               }	
               
               //Handling RHS DatePickers and Text Inputs
               if(customNode.getTimeInterval() != "null")
               {
               	   //Means No DatePicker was there on rhs
               	   singleNodeTQPope.timeInputBox.text = customNode.getTimeValue();
               	   singleNodeTQPope.timeIntervalCb.selectedItem = customNode.getTimeInterval();  
               } 
               else
               {
               		//Means there exists DatePicker on RHS, so remove text boxes and Add Date Picker
               		 singleNodeTQPope.removeLHSTxtAndIntervals();
               		 
               		 //Add Date Picker
               		 if(view != "Result")
               		 {
               		 	var datePicker : DateField = singleNodeTQPope.addRHSDatePicker();
               		 
	               		 if(customNode.getAtributeType() == "TimeStamp")
	               		 {
		               		 var timeStampText : TextInput =  singleNodeTQPope.addRHSTimePicker();
		               		 var tmpTimeValue:Array = customNode.getTimeValue().split(' ',2);               		                		 
		               		 datePicker.selectedDate = new Date(tmpTimeValue[0].toString());
		               		 timeStampText.text = tmpTimeValue[1].toString();
	               		 }else
	               		 {
	               		 	datePicker.selectedDate = new Date(customNode.getTimeValue());
	               		 }  
               		 }
               }
        	}
        }

	     //Aligning the popup to center     
	     PopUpManager.centerPopUp(singleNodeTQPope);
	} 
	
	private function splitEntityName(entityName : String) : String
	{
		var str : String = "";
		//splitting the entity name on space 
		var words : Array = entityName.split(" ");
		
		for(var i:int=0; i<words.length; i++)
		{
		   str += words[i] + "\n";	
		}
		return str;	
	}
	
	private function getSingleCustomNodeName(dagNode : DAGNode) : String
	{
		var customNodeName : String = ""; 
		var dagNodesList : ArrayCollection  = new ArrayCollection();
		var existingCustomNode : SingleNodeCustomFormulaNode = null;
		var nodeName : String = dagNode.nodeNumber + "_" + dagNode.nodeNumber;
		var cunstomNodeNumber : int = 1;
		do
		{
			customNodeName = "";
	        customNodeName = nodeName +  "_" + cunstomNodeNumber;
            existingCustomNode = mainPanel.getChildByName(customNodeName) as SingleNodeCustomFormulaNode; 
            if(existingCustomNode != null)
            {
            	cunstomNodeNumber = cunstomNodeNumber +  1;  
            }
		}while(existingCustomNode != null); 
	    
	    if(view == "Result")
	    {
	    	customNodeName = "c_"+customNodeName;
	    }
	    //Populating associated Dag Nodes Map for Single Custom Nodes
	    dagNodesList.addItemAt(dagNode,0);
	    associatedSingleDagNodes[customNodeName] = dagNodesList;   
	    return  customNodeName;
	}
	
	private function getCustomNodeName(dagNode1 : DAGNode,dagNode2 : DAGNode) : String
	{
		//This condition should be  when operation is create
		var dagNodesList : ArrayCollection  = new ArrayCollection();
		var customNodeName : String = ""; 
		var existingCustomNode : CustomFormulaNode = null;
        var nodesName : String = dagNode1.nodeNumber + "_" + dagNode2.nodeNumber; 
	    var cunstomNodeNumber : int = 1;
	    do
	    {
	      //Adding any no. of TQ Nodes on two selected nodes 
	      customNodeName = "";
	      customNodeName = nodesName +  "_" + cunstomNodeNumber;
	      existingCustomNode = mainPanel.getChildByName(customNodeName) as CustomFormulaNode; 
	      if(existingCustomNode != null)
	      {
	           cunstomNodeNumber = cunstomNodeNumber +  1;  
	      }
	   }while(existingCustomNode != null);
	   
	   //This is the case if we are adding a calculated Parameter Node
	   if(view  == "Result")
	   {
	   	   customNodeName = "c_"+customNodeName;
	   }
	             
	  //Storing the DAG Nodes corresponding to a custom node in a Map
	   dagNodesList.addItemAt(dagNode1,0);
	   dagNodesList.addItemAt(dagNode2,1);
	   associatedDAGNodes[customNodeName] = dagNodesList;
	   return customNodeName;
	}
	
	/**
	 * GEt the unique Join Query Node Name.
	 */
	private function getJoinQueryNodeName(dagNode1 : DAGNode,dagNode2 : DAGNode) : String
	{
		//This condition should be  when operation is create
		//Alert.show("3");
		var dagNodesList : ArrayCollection  = new ArrayCollection();
		var joinNodeName : String = ""; 
		var existingJoinNode : JoinQueryNode = null;
        var nodesName : String = "j_" + dagNode1.nodeNumber + "_" + dagNode2.nodeNumber; 
	    var joinNodeNumber : int = 1;
	    do
	    {
			//Adding any no. of TQ Nodes on two selected nodes 
	      	joinNodeName = "";
	      	joinNodeName = nodesName +  "_" + joinNodeNumber;
	      	existingJoinNode = mainPanel.getChildByName(joinNodeName) as JoinQueryNode; 
	      	if(existingJoinNode != null)
	      	{
	      		//Alert.show("in if " + joinNodeName);
	           	joinNodeNumber = joinNodeNumber +  1;  
	      	}
	   	}
	   	while(existingJoinNode != null);
	   	//Alert.show("4 joinNodeName " + joinNodeName);
	   
	   	//This is the case if we are adding a calculated Parameter Node
//	   if(view  == "Result")
//	   {
//	   	   joinNodeName = "c_"+joinNodeName;
//	   }
	             
	  //Storing the DAG Nodes corresponding to a custom node in a Map
		dagNodesList.addItemAt(dagNode1,0);
	   	dagNodesList.addItemAt(dagNode2,1);
	   	associatedDAGNodes[joinNodeName] = dagNodesList;
	   	return joinNodeName;
	}
	
	public function createAndPopulate(resultMap :Object, operation : String, currentCustomNode : CustomFormulaNode) : void
	{
		queryDataMap = resultMap;
		//rpcService.removeEventListener(ResultEvent.RESULT,editNodeHandler);
		rpcService.removeEventListener(ResultEvent.RESULT,populateDataHandler);
	    
	     //Retrieving the first node attribute Map
	     var firstNodeDataObject : Object = queryDataMap["firstDropDown"]; 
	     var firstNodeAttributesList : ArrayCollection = new ArrayCollection();
	     var secondNodeAttributeList : ArrayCollection = new ArrayCollection();
         
         //Iterating over the first node attribute map to get all the arrtibutes which is key in the Map 	    
	     for(var key:String in firstNodeDataObject)
	     {
	     	firstNodeAttributesList.addItem(key);	     	
	     }
	     //Getting all arithmetic operators 
	     var arithmeticOperatorsList : ArrayCollection = queryDataMap["secondDropDown"];	
	     
	     //Retrieving the second node attribute Map
	     var secondNodeDataObject : Object = queryDataMap["thirdDropDown"];
	    
	     //Iterating over the first node attribute map to get all the arrtibutes which is key in the Map 	    
	     for(var key1:String in secondNodeDataObject)
	     {
	     	secondNodeAttributeList.addItem(key1);	     	
	     }
	     
	     var relationalOprsList : ArrayCollection = queryDataMap["fourthDropDown"];
	     var timeIntervalsList : ArrayCollection = queryDataMap["timeIntervals"];
	     var entitiesNameList : ArrayCollection = queryDataMap["entityList"];
	    //Opening the pop up window
	    
    	popUp = PopupWindow(PopUpManager.createPopUp(this, PopupWindow, true));	   
    	popUp.showCloseButton = true; 
	   
      //Setting the values to variables  
	   popUp.myArray1 = firstNodeAttributesList;
	   popUp.myArray2 = arithmeticOperatorsList;
	   popUp.myArray3 = secondNodeAttributeList;
	   popUp.myArray4 = relationalOprsList;
	   popUp.myArray5 = timeIntervalsList;
	   
	   // popUp.myArray5 = doctypes;
	  if(operation == "create")
	  {
	  	popUp.title ="Define Condition";
	    if(firstNodeAttributesList.length == 1)
	    {
	    	popUp.cb1.selectedIndex = 0;
	    }
	    if(secondNodeAttributeList.length == 1)
	    {
	    	popUp.cb3.selectedIndex = 0;
	    }
	  	 
	  	 var firstDAGNode : DAGNode = DAGNode(mainPanel.getChildByName(node1));
	     var secondDAGNode : DAGNode = DAGNode(mainPanel.getChildByName(node2)); 
	     
	     //Setting the names
	     popUp.firstEntityName = firstDAGNode.nodeName;
	     popUp.secondEntityName = secondDAGNode.nodeName;
	     
	     //Setting the Exp Ids
	     popUp.firstEntityExpId = firstDAGNode.expressionId;
	     popUp.secondEntityExpId = secondDAGNode.expressionId;
	     
	     //Setting the nodeName
	     //popUp.nodeName = firstDAGNode.nodeNumber + "_" + secondDAGNode.nodeNumber;
	     popUp.nodeName = getCustomNodeName(firstDAGNode,secondDAGNode); 
	  }
	  else
	  {
	  	 if(currentCustomNode != null){
		  	 popUp.firstEntityName = currentCustomNode.getFirstNodeName();
		  	 
		  	 popUp.secondEntityName = currentCustomNode.getSecondNodeName();
		  	
		     popUp.firstEntityExpId =  currentCustomNode.getFirstNodeExpId();
		     popUp.secondEntityExpId = currentCustomNode.getSecondNodeExpId();
		  
		     //Setting the nodeName
		     popUp.nodeName = currentCustomNode.name;
	     }
	  }
	   popUp.firstEntityLabel = splitEntityName(entitiesNameList.getItemAt(0) as String);
	   popUp.secondEntityLabel = splitEntityName(entitiesNameList.getItemAt(1) as String ); 
	   
	   popUp.dataProvider = queryDataMap;
	   popUp.firstNodeDp = firstNodeDataObject;
	   popUp.secondNodeDp =  secondNodeDataObject; 
	   //Opening the popup window in center

	   if(operation == "edit" && currentCustomNode != null)
	   {
	   	    popUp.title ="Edit Condition";
	        popUp.buttonLabel = "Edit";
	        popUp.cb1.selectedItem = currentCustomNode.getFirstSelectedAttrName();
	        if(currentCustomNode.getFirstSelectedAttrType() == "Integer"){
				//Creating the ComboBox
      			existingfirstOpComboBox= popUp.firstComboPlace.getChildByName("fstOpComboBox") as ComboBox;   	       			
	        	if(existingfirstOpComboBox == null)
	        	{
	        		var firstOpComboBox : ComboBox =  new ComboBox();
   	       			firstOpComboBox.id = "fstOpComboBox";
   	       			firstOpComboBox.name = "fstOpComboBox";
   	       			firstOpComboBox.dataProvider = popUp.myArray5; 
   	       			firstOpComboBox.width = 100;      	       		  	              
   	              	firstOpComboBox.rowCount = 10;
   	              	if((currentCustomNode.getQAttrInterval1() != "") && (currentCustomNode.getQAttrInterval1() != "null"))
   	              	{
   	              	  firstOpComboBox.selectedItem = currentCustomNode.getQAttrInterval1();      	       			
   	              	} 
          			//Adding datePicket as childs
    	   			popUp.firstComboPlace.addChild(firstOpComboBox);       	 	   			 
	     		}		        	
	        }
	        popUp.cb2.selectedItem = currentCustomNode.getSelectedArithmeticOp();
	        popUp.cb3.selectedItem = currentCustomNode.getSecondSelectedAttrName();
	        if(currentCustomNode.getSecondSelectedAttrType() == "Integer"){
	        	//Creating the ComboBox
      			existingSecondOpComboBox= popUp.secondComboPlace.getChildByName("secondOpComboBox") as ComboBox;   	       			
	        	if(existingSecondOpComboBox == null)
	        	{
	        		var secondOpComboBox : ComboBox =  new ComboBox();
          			secondOpComboBox.id = "secondOpComboBox";
          			secondOpComboBox.name = "secondOpComboBox";
          			secondOpComboBox.dataProvider = popUp.myArray5; 
          			secondOpComboBox.width = 100;      	       		  	              
                 	secondOpComboBox.rowCount = 10;  
                 	if(currentCustomNode.getQAttrInterval2() != "null" && currentCustomNode.getQAttrInterval2() != "")     	       			
          			{
          				secondOpComboBox.selectedItem = currentCustomNode.getQAttrInterval2();
          			}
          			//Adding datePicket as childs
    	   			popUp.secondComboPlace.addChild(secondOpComboBox);       	 	   			 
	     		}	
	        }
	        popUp.cb4.selectedItem = currentCustomNode.getSelectedLogicalOp();
	        if(view != "Result"){ 
		        //Setting the custom column name and time interval        	
	        	popUp.customColumnName.text = currentCustomNode.getCustomColumnName();        	
        	}
        	else
        	{
	        	popUp.customColumnName.text = currentCustomNode.getCustomColumnName();          	
	        	popUp.cb6.selectedItem = currentCustomNode.getCCInterval();
        	}
	        //If the selected Logical Operators are isNull or IsNotNull
	        if((currentCustomNode.getSelectedLogicalOp() == "Is Null") || (currentCustomNode.getSelectedLogicalOp() == "Is Not Null"))
	        {
	        	//Disable both Time value box and Time Interval Combo box
	        	var existingTextInput : TextInput = popUp.myBox.getChildByName(popUp.txtInput.name) as TextInput;
	        	existingTextInput.enabled = false;
	        	
	        	var existingTimeInterval : ComboBox = popUp.myBox.getChildByName(popUp.cb5.name) as ComboBox;
	        	existingTimeInterval.enabled = false;
	        }
	        else
	        {
	        	//This is the condition when there is both time and time Interval 
	       		 if(currentCustomNode.getTimeInterval() != "null")
	        	 {
	        		popUp.txtInput.text = currentCustomNode.getTimeValue();
	        		popUp.cb5.selectedItem = currentCustomNode.getTimeInterval(); 
	              }
		        else
		        {
		        	if((currentCustomNode.getFirstSelectedAttrType()=="Integer" && currentCustomNode.getSecondSelectedAttrType()=="Integer"))
	            	{
		            	// int + int = textbox input condition
		            	existingfirstOpComboBox= popUp.firstComboPlace.getChildByName("fstOpComboBox") as ComboBox;
						if(existingfirstOpComboBox != null){           	 		
	   	 	        		popUp.firstComboPlace.removeChild(existingfirstOpComboBox);
	   	 				}
	           	 				
	   	       			existingSecondOpComboBox= popUp.secondComboPlace.getChildByName("secondOpComboBox") as ComboBox;           	 		
		        		if(existingSecondOpComboBox != null){
	   	 					popUp.secondComboPlace.removeChild(existingSecondOpComboBox);
		        		}
		                //Removing the Time Interval Combo Box
	           	        var existingTimeIntervalCb : ComboBox = popUp.myBox.getChildByName(popUp.cb5.name) as ComboBox;
	           	        if(existingTimeIntervalCb != null)
	           	        {
	           	      		popUp.myBox.removeChild(existingTimeIntervalCb);
	           	      	}
	           	      	//Removing the existing tome Interval Label
	           	      	var existingIntervalLabel : Label = popUp.labelHBox.getChildByName(popUp.lb6.name) as Label;
	           	       	if(existingIntervalLabel != null)
	           	       	{
	           	       		popUp.labelHBox.removeChild(existingIntervalLabel);	
	           	       	}          	      
	           	        popUp.removeTimestampText();
	           	        var existingTextInput : TextInput = popUp.myBox.getChildByName(popUp.txtInput.name) as TextInput;
	           	        existingTextInput.text = currentCustomNode.getTimeValue();
	            	}
	            	else
	            	{
		            	//This is the condition when there is DataPicker
			        	//Removing text Box
		           	 	 var existingTextBox : TextInput = popUp.myBox.getChildByName(popUp.txtInput.name) as TextInput;
		           	   	 if(existingTextBox != null)
		           	   	 {
		           	   	   	popUp.myBox.removeChild(existingTextBox);
		
		           	   	   	 //Remove the Time Value Label
			           	 	var existingValueLabel : Label = popUp.labelHBox.getChildByName(popUp.lb5.name) as Label;
			           	 	if(existingValueLabel != null)
			           	 	{
			           	 	   popUp.labelHBox.removeChild(existingValueLabel);
			           	 	}
		           	      }
		           	      
		           	      //Removing the Time Interval Combo Box
		           	      var existingTimeIntervalCb : ComboBox = popUp.myBox.getChildByName(popUp.cb5.name) as ComboBox;
		           	      if(existingTimeIntervalCb != null)
		           	      {
		           	      	 popUp.myBox.removeChild(existingTimeIntervalCb);
		           	      		
		           	      	 //Removing the existing tome Interval Label
		           	      	var existingIntervalLabel : Label = popUp.labelHBox.getChildByName(popUp.lb6.name) as Label;
		           	       	if(existingIntervalLabel != null)
		           	       	{
		           	       		popUp.labelHBox.removeChild(existingIntervalLabel);	
		           	       	}	           	       	
		           	      }
		           	      
		           	      popUp.removeTimestampText();
						 //dateTime stamp seperation
					if(view != "Result")
					{	 
						 var existingTimeStampText:TextInput = popUp.myBox.getChildByName("iTimeStampText") as TextInput;						               		 
	               		 var existingDatePicker:DateField = popUp.myBox.getChildByName("datePicker") as DateField;
	               		 var date  : Date=null;  
	               		 var tmpTimeValue:Array=null;             		 	           	      
		           	      //Adding The Date Picker
		           	     var datePicker : DateField =  new DateField();
			           	 datePicker.id = "datePicker";
			           	 datePicker.name = "datePicker";
			           	 datePicker.width = 100;
			           	 datePicker.focusEnabled = true;
			           	 datePicker.formatString = "MM/DD/YYYY";
			             datePicker.showToday = true;
			             if(existingTimeStampText!=null)
			             {               		 
	               		 	tmpTimeValue = currentCustomNode.getTimeValue().split(' ',2); 
						 	date = new Date(tmpTimeValue[0].toString());
			             }else
			             {
						 	date = new Date(currentCustomNode.getTimeValue());
			             }
		                 datePicker.selectedDate = date;
		                 datePicker.setStyle("borderColor","#0000FF");
		                 popUp.myBox.addChild(datePicker);
		                
		                //Adding the Label
		                var pickerLabel : Label = new Label();
		           	 	pickerLabel.name = "datePickerLabel";
		           	 	pickerLabel.text = "Select Date";           	      
		           	 	pickerLabel.setStyle("color","#0000FF");   				
	   					pickerLabel.setStyle("fontWeight","bold");
	   					popUp.labelHBox.addChild(pickerLabel);
	             	    if(existingTimeStampText != null)
	             	    {
		   					var timeStampText : TextInput =  new TextInput();
			      			timeStampText.id = "iTimeStampText";
			      			timeStampText.name = "iTimeStampText";
			      			timeStampText.width = 100;
			      			timeStampText.focusEnabled = true;
			      			timeStampText.text = tmpTimeValue[1].toString();
			      			timeStampText.setStyle("borderColor","#0000FF");
			           	 	popUp.myBox.addChild(timeStampText);
		           	 	}
	   				}  	
	            }
		       }
	        }
	   }
	   PopUpManager.centerPopUp(popUp);
	}
	
	private function populateDataHandler(event :  ResultEvent):void 
	{
	     rpcService.removeEventListener(ResultEvent.RESULT,populateDataHandler);
	     createAndPopulate(event.result as Object, "create", null);
	 }
	 
	/**
	 * Handler for method called at backend named "retrieveQueryData" and which
	 * calls createAndPopulateJoinQueryPopUp method. 
	 */
	private function populateDataHandlerForJoinQuery(event : ResultEvent):void 
	{
		rpcService.removeEventListener(ResultEvent.RESULT, populateDataHandlerForJoinQuery);
	    createAndPopulateJoinQueryPopUp(event.result as Object, "create", null, null);
	}
	 
	private function getCustomFormulaString(node : SingleNodeCustomFormulaNode) : String
	{
		var customFormulaString : String = "";
	 	customFormulaString = node.getLhsTimeValue() + "\n" + node.getSelectedArithmeticOp() + "\n" + node.getEntityName()+ "."+ node.getAtributeName();
	 	if((node.getSelectedLogicalOp() != "") && (node.getSelectedLogicalOp() != "null"))
	 	{
	 		customFormulaString += "\n" + node.getSelectedLogicalOp();
	 	}
	 	if((node.getTimeValue() != "") && (node.getTimeValue() != "null"))
	 	{
	 		customFormulaString += "  "+ node.getTimeValue();
	 	}
	 	if((node.getTimeInterval() != "") && (node.getTimeInterval() != "null"))
	 	{
	 		customFormulaString += " " + node.getTimeInterval();
	 	}
	 	return  customFormulaString;
	}
	 
	public function addSingleNodeCustomNode(node : SingleNodeCustomFormulaNode) : void
	{	 	
		var operation : String = node.getOperation();
	 	var dagNode : DAGNode = null;
	 	var customNodeName : String = "";
	 	var nodeList : ArrayCollection = null;
	 	var nodeName : String = node.name;  
	 	var existingCustomNode : SingleNodeCustomFormulaNode = null;
	 	
	 	//If view is AddLimit then display only those nodes having view as AddLimit and if view is "Result", display all nodes 
	 	if((node.getNodeView()=="AddLimit" && view == "AddLimit") || (view == "Result"))
	 	{
		 	//Handling the DAG Nodes
		 	if((operation == "create") || (operation == "rePaintCreate"))
		 	{
	           dagNode = DAGNode(mainPanel.getChildByName(node1));
	           customNodeName = node.name;
		 	}
		 	else if(operation == "edit")
		 	{
		 	    //This is operations related to Edit of Single Node, so retrieve the DAG Node from Map
		 	   nodeList = associatedSingleDagNodes[nodeName];
		 	   dagNode = nodeList.getItemAt(0) as DAGNode;
		 	    
		 	}
		 	else if((operation == "rePaint") || (operation == "rePaintEdit"))
		 	{
		 		//This is the case of repaint, so get the DAG Node from singleRepaintDAG Node Map
		 		nodeList = singleRepaintDAGNodeMap.getValue(nodeName);
		 		if((nodeList != null) && (nodeList.length >0))
		 		{
		 			dagNode = nodeList.getItemAt(0) as DAGNode;
		 		}
		 		else if((operation == "rePaintEdit") && (node != null))
		 		{
		 			//This is the case when any node is added for Redefine Query and then it is edited
	            	//So in that case get that node from  associatedDAGNodes Map as node is created aftre repaint and Edited
		 			nodeList = associatedSingleDagNodes[nodeName];
		 	   		dagNode = nodeList.getItemAt(0) as DAGNode;
		 		}	
		 		singleNodecustomFormulaString = getCustomFormulaString(node);
		 	}
		 	
		 	//Handling the existing custom Formula Node
			if((operation == "rePaintEdit") || (operation == "edit"))
	        {
	        	//Then we need to remove existing node by that name and Add new node
	            customNodeName = node.name;
	            existingCustomNode = mainPanel.getChildByName(customNodeName) as SingleNodeCustomFormulaNode;
	            if(existingCustomNode != null)
	            {
	            	mainPanel.removeChild(existingCustomNode);
	            } 
	        }
	        else if(operation == "rePaint")
	        {
	        	//customNodeName = getSingleCustomNodeName(dagNode);
	           	customNodeName = node.name;
	           	var dagNodesList  : ArrayCollection = new ArrayCollection();
	           	dagNodesList.addItemAt(dagNode,0);
		        associatedSingleDagNodes[customNodeName] = dagNodesList;  
		        /*if(singleNodecustomFormulaString == "")
		        {
		        	singleNodecustomFormulaString = node.getLhsTimeValue()+ "\n" + node.getSelectedArithmeticOp() + "\n" + node.getEntityName()+"." + node.getAtributeName();
		        } */
	        }
		 	var customNode : SingleNodeCustomFormulaNode  = new SingleNodeCustomFormulaNode();
		 	customNode.initializeNode(dagNode.x+dagNode.width+50,dagNode.y+dagNode.height+20,customNodeName);
		 	
		 	//Setting the node color according to view
		 	if(node.getNodeView()=="AddLimit")
	        {   
	           customNode.setStyle("backgroundColor","#FFFFFF");
	        }              
	        else
	        {
	           customNode.setStyle("backgroundColor","#e7ddfa");
	        }	
	
		 	
		 	customNode.customFormulaString = singleNodecustomFormulaString;
		 	customNode.setNodeType(node.getNodeType());
		 	customNode.setAttributeID(node.getAttributeID());
		 	
		 	customNode.setAttributeType(node.getAtributeType());
		 	customNode.setAttributeName(node.getAtributeName());
		 	
		 	customNode.setEntityName(node.getEntityName());
		 	customNode.setNodeExpressionId(node.getNodeExpressionId());
		 	
		 	customNode.setSelectedArithmeticOp(node.getSelectedArithmeticOp());
		 	customNode.setSelectedLogicalOp(node.getSelectedLogicalOp());
		 	customNode.setTimeValue(node.getTimeValue());
		 	customNode.setTimeInterval(node.getTimeInterval());
		 	
		 	customNode.setLhsTimeValue(node.getLhsTimeValue());
		 	customNode.setLhsTimeInterval(node.getLhsTimeInterval());
		 	
		 	customNode.setOperation(node.getOperation());
		 	customNode.setCustomColumnName(node.getCustomColumnName());
		 	
		 	customNode.setNodeView(node.getNodeView());
		 	
		 	customNode.setQAttrInterval(node.getQAttrInterval());
		 	
		 	customNode.setCCInterval(node.getCCInterval());
		   	//Adding Event Listener
		   	customNode.addEventListener(MouseEvent.MOUSE_MOVE,doSingleNodeCustomNodeDrag);   	 		
		   	mainPanel.addChild(customNode);
		   	drawLines(dagNode,customNode.x,customNode.y,customNode.name);
		}	 	
		if(operation != "rePaint")
		{
			singleNodeTQPope.removeMe();
	 	}	 	
	}  
	 
	/**
	 * This method generates the data which is displayed in JQ box on UI.
	 */
	private function getJoinQueryNodeStr(joinQueryNode: JoinQueryNode): String
	{
		var joinQueryNodeStr: String = "";
		joinQueryNodeStr = joinQueryNode.getFirstNodeEntityName() + " <--> "
						+ joinQueryNode.getSecondNodeEntityName();
		var joinFormulaNodeList: ArrayCollection =
						joinQueryNode.getJoinFormulaNodeList() as ArrayCollection;
		for(var i: int = 0; i < joinFormulaNodeList.length; i++)
		{	
			var joinFormulaNode: JoinFormulaNode = 	joinFormulaNodeList.getItemAt(i) as JoinFormulaNode;
			joinQueryNodeStr = joinQueryNodeStr + "\n" + joinFormulaNode.getFirstAttributeName()
						+ " Equals " + joinFormulaNode.getSecondAttributeName();
		}
		return joinQueryNodeStr;	 	
	}
	 
	private function  getTwoNodesCustomFormulaStr(node : CustomFormulaNode) : String
	{  
		var customFormulaString  : String = "";
	 	customFormulaString = node.getFirstNodeName()+"."+node.getFirstSelectedAttrName() +"\n" + node.getSelectedArithmeticOp() + "\n"+node.getSecondNodeName()+"."+node.getSecondSelectedAttrName();
	 	if((node.getSelectedLogicalOp() != "") && (node.getSelectedLogicalOp() != "null"))  
	 	{
	 		customFormulaString += "\n"+ node.getSelectedLogicalOp();
	 	}
	 	 
	 	if((node.getTimeValue() != "") && (node.getTimeValue() != "null"))   
	 	{
	 		customFormulaString += " " + node.getTimeValue();
	 	}
	 	if((node.getTimeInterval() != "") && (node.getTimeInterval()))
	 	{
	 		customFormulaString += " " + node.getTimeInterval();
	 	}	 	    
	 	return customFormulaString;
	 }
	 
	 /**
	  * This method generated unique ID for Join Formula Node Name.
	  */
	 public function createJoinFormulaNodeName(joinQueryNodeName: String, count: int): String
	 {
	 	var joinFormulaNodeName: String = "";
	 	var joinQueryNode: JoinQueryNode = null
	 	//This condition should be  when operation is create
		//var joinNodeNumber : int = 1;
//	    do
//	    {
	      //Adding any no. of TQ Nodes on two selected nodes 
	      joinFormulaNodeName = "";
	      joinFormulaNodeName = joinQueryNodeName +  "_" + count;
	      joinQueryNode = mainPanel.getChildByName(joinQueryNodeName) as JoinQueryNode;
	      if(joinQueryNode != null)
	      {
	           joinFormulaNodeName = joinQueryNodeName +  "_" + count;
	      }
	      
	      //var joinQueryFormulaList: ArrayCollection = joinQueryNode.getJoinFormulaNodeList().getItemAt(count - 1);
	      //jo
	      
//	      Alert.show("mainPanel.getChildByName(joinQueryNodeName) as JoinFormulaNode" + joinQueryNode);
//	      if(joinQueryNode != null)
//	      {
//	           joinNodeNumber = joinNodeNumber +  1;  
//	      }
//	   }
//	   while(joinQueryNode != null);
	   return joinFormulaNodeName;
	 }
	 
	 /**
	  * In this method, we create a actual JQ node on UI.
	  */
	public function addJoinQueryNode(joinQueryNode: JoinQueryNode): void
	{	 	
		var dagNode1:DAGNode = null;
        var dagNode2:DAGNode = null;
        var nodeList : ArrayCollection = null;
        var joinQueryNameForUI : String = ""; 
        var nodeName  : String =  joinQueryNode.name;
        var operation : String = joinQueryNode.getOperation();
        //Alert.show("7 operation " + operation);
        var existingCustomNode : CustomFormulaNode = null;
        //Alert.show("8 NodeView " + joinQueryNode.getNodeView());
           
        if(joinQueryNode.getNodeView() == "AddLimit")
        {
        	//Alert.show("in AddLimit");
			//to store operation type create/edit
			operationforView = joinQueryNode.getOperation();            
			//Initializing the DAG NOdes
            if((operation == "create") || (operation == "rePaintCreate"))
            {
            	//This is the case of creating custom node first time
            	dagNode1 = DAGNode(mainPanel.getChildByName(node1));
            	dagNode2 = DAGNode(mainPanel.getChildByName(node2));
            	joinQueryNameForUI = getJoinQueryNodeStr(joinQueryNode);
            }
            else if(operation == "edit")
			{
	            //This is the case of EDIT
	            nodeList = associatedDAGNodes[nodeName]; 
	            dagNode1 = nodeList.getItemAt(0) as DAGNode;
	        	dagNode2 = nodeList.getItemAt(1) as DAGNode;
	        }
            else if((operation == "rePaint") || (operation == "rePaintEdit"))
            {
            	//var nodeName  : String= node.name;
            	nodeList = repaintDAGNodeMap.getValue(nodeName);
            	//Alert.show("nodeList " + nodeList);
            	if((nodeList != null) && (nodeList.length > 0))
            	{
            		dagNode1 = nodeList.getItemAt(0) as DAGNode;
                    dagNode2 = nodeList.getItemAt(1) as DAGNode;
                    //Alert.show("dagNode1, dagNode1 " + dagNode1 + " , " + dagNode2);
            	}
            	else
            	{
            		//This is the case when any node is added for Redefine Query and then it is edited
            		//So in that case get that node from  associatedDAGNodes Map as node is created aftre repaint and Edited
            		if((operation == "rePaintEdit") && (joinQueryNode != null))
            		{
			        	nodeList = associatedDAGNodes[nodeName]; 
			            dagNode1 = nodeList.getItemAt(0) as DAGNode;
			            dagNode2 = nodeList.getItemAt(1) as DAGNode;
            		}
            	}	
                joinQueryNameForUI = getJoinQueryNodeStr(joinQueryNode);  
            }
            else if(operation == "edit")
            {
            	//This is the case of EDIT
            	nodeList = associatedDAGNodes[nodeName]; 
                dagNode1 = nodeList.getItemAt(0) as DAGNode;
                dagNode2 = nodeList.getItemAt(1) as DAGNode;
            }
           
            //Handling the existing custom Formula Node
            if(operation == "edit")
            {
            	//Then we need to remove existing node by that name and Add new node
            	var existingJoinQueryNode: JoinQueryNode = mainPanel.getChildByName(joinQueryNode.name) as JoinQueryNode;
            	if(existingJoinQueryNode != null)
            	{
            		mainPanel.removeChild(existingJoinQueryNode);
            	}
            	joinQueryNameForUI = getJoinQueryNodeStr(joinQueryNode);
            }
            else if(operation == "rePaint")
            {
            	nodeName = joinQueryNode.name;
            	//Alert.show("nodeName " + nodeName);
            	var dagNodesList : ArrayCollection  = new ArrayCollection();
            	dagNodesList.addItemAt(dagNode1,0);
            	dagNodesList.addItemAt(dagNode2,1);
            	//Alert.show("dagNodesList " + dagNodesList);
            	associatedDAGNodes[nodeName] = dagNodesList;
            }
            
            //var newJoinQueryNode : JoinQueryNode = new JoinQueryNode();
        	//Setting the operation
        	//newJoinQueryNode.setOperation(operation);
        	joinQueryNode.joinFormula = joinQueryNameForUI;
        	//newJoinQueryNode.customFormula = customFormulaString;
        	//Alert.show("10 joinQueryNode.joinFormula on JQ sqaure " + nodeName);
        	joinQueryNode.initializeNode(dagNode1.x+dagNode1.width+50, 
        				dagNode1.y+dagNode1.height+20, nodeName);
            
            //Setting the node color according to view
            if(joinQueryNode.getNodeView() == "AddLimit")
            {   
            	//Alert.show("11 in  AddLimit if ");
            	joinQueryNode.setStyle("backgroundColor","#FFFFFF");
            }              
            else
            {
            	//Alert.show("12 in  AddLimit else ");
            	joinQueryNode.setStyle("backgroundColor","#e7ddfa");
            }	
            
            joinQueryNode.addEventListener(MouseEvent.MOUSE_MOVE, doJoinQueryNodeDrag);
            //Adding the  custom node as a child to main panel
            mainPanel.addChild(joinQueryNode);
            //Alert.show("15 after addin joinQueryNode to main panel ");
            
            drawLines(dagNode1, joinQueryNode.x, joinQueryNode.y, joinQueryNode.name);
            drawLines(dagNode2, joinQueryNode.x, joinQueryNode.y, joinQueryNode.name);
		}
//      Removing the pop up
        if(operation != "rePaint")
        {
       		 popUpForJoinQuery.removeMe(); 	
		}
	}
	 
	public function addCustomFromulaNode(node : CustomFormulaNode):void
    {
    	var dagNode1:DAGNode = null;
        var dagNode2:DAGNode = null;
        var nodeList : ArrayCollection = null;
        var customNodeName : String = ""; 
        var nodeName  : String =  node.name;
        var operation : String = node.getOperation();
        var existingCustomNode : CustomFormulaNode = null;
        
        if((node.getNodeView()=="AddLimit" && view == "AddLimit") || (view == "Result"))
        {
			//to store operation type create/edit
			operationforView = node.getOperation();            
			//Initializing the DAG NOdes
	    	if((operation == "create") || (operation == "rePaintCreate"))
	        {
	        	//This is the case of creating custom node first time
	        	dagNode1 = DAGNode(mainPanel.getChildByName(node1));
	        	dagNode2 = DAGNode(mainPanel.getChildByName(node2));
	        	customNodeName = nodeName;
	        }
	        else if((operation == "rePaint") || (operation == "rePaintEdit"))
	        {
	        	//var nodeName  : String= node.name;
            	nodeList = repaintDAGNodeMap.getValue(nodeName);
            	if((nodeList != null) && (nodeList.length > 0))
            	{
            		dagNode1 = nodeList.getItemAt(0) as DAGNode;
                    dagNode2 = nodeList.getItemAt(1) as DAGNode;
            	}
            	else
            	{
            		//This is the case when any node is added for Redefine Query and then it is edited
            		//So in that case get that node from  associatedDAGNodes Map as node is created aftre repaint and Edited
            		if((operation == "rePaintEdit") && (node != null))
            		{
			            nodeList = associatedDAGNodes[nodeName]; 
			            dagNode1 = nodeList.getItemAt(0) as DAGNode;
			            dagNode2 = nodeList.getItemAt(1) as DAGNode;
            		}
            	}	
                customFormulaString = getTwoNodesCustomFormulaStr(node);  
            }
	        else if(operation == "edit")
            {
            	//This is the case of EDIT
            	nodeList = associatedDAGNodes[nodeName]; 
                dagNode1 = nodeList.getItemAt(0) as DAGNode;
                dagNode2 = nodeList.getItemAt(1) as DAGNode;
			}
			
			//Handling the existing custom Formula Node
            if((operation == "rePaintEdit") || (operation == "edit"))
            {
            	//Then we need to remove existing node by that name and Add new node
            	customNodeName = node.name;
            	existingCustomNode = mainPanel.getChildByName(customNodeName) as CustomFormulaNode;
            	if(existingCustomNode != null)
            	{
            		mainPanel.removeChild(existingCustomNode);
            	}
            	customFormulaString = getTwoNodesCustomFormulaStr(node);
            }
            else if(operation == "rePaint")
            {
            	customNodeName = node.name;
            	var dagNodesList : ArrayCollection  = new ArrayCollection();
            	dagNodesList.addItemAt(dagNode1,0);
            	dagNodesList.addItemAt(dagNode2,1);
            	associatedDAGNodes[customNodeName] = dagNodesList;
            }
            
            var customFormulaNode : CustomFormulaNode = new CustomFormulaNode();
        	//Setting the operation
        	customFormulaNode.setOperation(operation);
        	customFormulaNode.customFormula = customFormulaString;
        	customFormulaNode.initializeNode(dagNode1.x+dagNode1.width+50,dagNode1.y+dagNode1.height+20,customNodeName);
            
            //Setting the node color according to view
            if(node.getNodeView()=="AddLimit")
            {   
            	customFormulaNode.setStyle("backgroundColor","#FFFFFF");
            }              
            else
            {
            	 customFormulaNode.setStyle("backgroundColor","#e7ddfa");
            }
            
            //Setting the selected nodes name
            customFormulaNode.setFirstNodeName(node.getFirstNodeName());
            customFormulaNode.setSecondNodeName(node.getSecondNodeName());
            //Setting the Exps Id's
            customFormulaNode.setFirstNodeExpId(node.getFirstNodeExpId());
            customFormulaNode.setSecondNodeExpId(node.getSecondNodeExpId());
            //Setting the selected attributes name
            customFormulaNode.setFirstSelectedAttrName(node.getFirstSelectedAttrName());
            customFormulaNode.setSecondSelectedAttrName(node.getSecondSelectedAttrName());
            //Setting the selected attribute Id's
            customFormulaNode.setFirstSelectedAttrId(node.getFirstSelectedAttrId());
            customFormulaNode.setSecondSelectedAttrId(node.getSecondSelectedAttrId());
	            
			//Setting data types
	        customFormulaNode.setFirstSelectedAttrType(node.getFirstSelectedAttrType());
	        customFormulaNode.setSecondSelectedAttrType(node.getSecondSelectedAttrType());
	             
	        //Setting the arithmetic operator
	        customFormulaNode.setSelectedArithmeticOp(node.getSelectedArithmeticOp());
	             
	        //Setting the Logical operator
	        customFormulaNode.setSelectedLogicalOp(node.getSelectedLogicalOp()); 
	             
	        //Setting time and time Intervals
	        customFormulaNode.setTimeValue(node.getTimeValue());
	        customFormulaNode.setTimeInterval(node.getTimeInterval());
	             
			//adding the Custom Columnm Name 
	        customFormulaNode.setCustomColumnName(node.getCustomColumnName());
	            
	        //Adding node view
	        customFormulaNode.setNodeView(node.getNodeView());
	            
	        //Adding Quantative Attributes Intervals
	        customFormulaNode.setQAttrInterval1(node.getQAttrInterval1());
	        customFormulaNode.setQAttrInterval2(node.getQAttrInterval2());
	            
	        //Adding ccInterval
	        customFormulaNode.setCCInterval(node.getCCInterval());
	            
	        customFormulaNode.addEventListener(MouseEvent.MOUSE_MOVE,doCustomFormulaNodeDrag);
	        //Adding the  custom node as a child to main panel
	        mainPanel.addChild(customFormulaNode);
	            
	        drawLines(dagNode1,customFormulaNode.x,customFormulaNode.y,customFormulaNode.name);
			drawLines(dagNode2,customFormulaNode.x,customFormulaNode.y,customFormulaNode.name);
		}
        //Removing the pop up
        if(operation != "rePaint")
        {
        	popUp.removeMe(); 	
		}
	}
      
 	private function drawLines(dagNode : DAGNode,toX : int,toY : int,nodeName:String):void
  	{
  		//Alert.show("INdrawLines");
	  	var fromX : int= dagNode.x + dagNode.width;
  	 	var fromY : int = dagNode.y + (dagNode.height / 2);
  	 	//Removing the existing line
  	 	var existingLine : UIComponent = mainPanel.getChildByName(dagNode.nodeNumber + "_" + nodeName) as UIComponent;
  	 	if(existingLine != null)
  	 	{
  	 		mainPanel.removeChild(existingLine);
  	 	}
  	 
  	 	//Redrawing the line
  	 	var line: UIComponent = new UIComponent (); 
	  	line.graphics.lineStyle(2, 0x0000FF, .5)
  	 	line.graphics.moveTo(fromX, fromY);
  	 	line.graphics.lineTo(toX, toY+25);

     	//See the name given to line that is added between customNode and any selected Node   
  	 	line.name = dagNode.nodeNumber + "_" + nodeName;
  	 	line.graphics.endFill();
  	 	mainPanel.addChild(line);    
  	 	//Alert.show("16 line " + line.name);  	 
  	}
      
	private function doSingleNodeCustomNodeDrag(event : MouseEvent) : void
    {
    	var dragInitiator : SingleNodeCustomFormulaNode = SingleNodeCustomFormulaNode(event.currentTarget);
      	var ds:DragSource = new DragSource();
      	 
      	var nodeProxy : SingleNodeCustomFormulaNode = new SingleNodeCustomFormulaNode();
      	nodeProxy.customFormulaString = dragInitiator.formulaLabel.text;
      	 
      	var pointOffSet:Point = new Point(dragInitiator.mouseX,dragInitiator.mouseY);
		ds.addData(pointOffSet,"point");
         
        DragManager.doDrag(dragInitiator,ds,event,nodeProxy,0,0);
         
        nodeSelected = "singleCustomFormulaNode";    
	}
      
      
    private function doCustomFormulaNodeDrag(event:MouseEvent):void
    {
    	//Retrieving the node to drag 
      	var dragInitiator : CustomFormulaNode = CustomFormulaNode(event.currentTarget);
      	var ds:DragSource = new DragSource();
      	
      	var nodeProxy : CustomFormulaNode = new CustomFormulaNode();
      	nodeProxy.customFormula = dragInitiator.formulaLabel.text;
      	 
      	var pointOffSet:Point = new Point(dragInitiator.mouseX,dragInitiator.mouseY);
		ds.addData(pointOffSet,"point");
		 
		DragManager.doDrag(dragInitiator,ds,event,nodeProxy,0,0);
		 
		nodeSelected = "customFormulaNode";
	}
      
    private function doJoinQueryNodeDrag(event:MouseEvent):void
    {
    	//Retrieving the node to drag 
      	// Alert.show("13 doJoinQueryNodeDrag start ");
      	var dragInitiator : JoinQueryNode = JoinQueryNode(event.currentTarget);
      	var ds:DragSource = new DragSource();
      	 
      	var nodeProxy : JoinQueryNode = new JoinQueryNode();
      	nodeProxy.joinFormula = dragInitiator.formulaLabel.text;
      	
      	var pointOffSet:Point = new Point(dragInitiator.mouseX, dragInitiator.mouseY);
		ds.addData(pointOffSet,"point");
		 
		DragManager.doDrag(dragInitiator,ds,event,nodeProxy,0,0);
		 
		nodeSelected = "joinQueryNode";
		//Alert.show("13 doJoinQueryNodeDrag end ");
	}
      
    private function customFormulaNodeDragEnter(event:DragEvent) : void
    {
    	DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
	}
      
    private function customFormulaNodeDragDrop() : void
    {}
      
	public function deleteSingleNodeCustomNode(customNodeName : String ,line1 : String) : void
    { 
    	var customNode : SingleNodeCustomFormulaNode =  mainPanel.getChildByName(customNodeName) as SingleNodeCustomFormulaNode;
      	if(customNode != null)
      	{
      		mainPanel.removeChild(customNode);
      	}
      	var line : UIComponent = mainPanel.getChildByName(line1)as UIComponent;
        if(line != null)
        {
			mainPanel.removeChild(line);           	
        }
	}	
      
    /*
  	This method is invoked from CustomFormulaNode file to delete the Custom Node on click of delete menu  
  	*/

    public function deleteCustomNode(customNodeName : String ,line1 : String,line2 :String) : void
    {
    	var customNode : CustomFormulaNode = mainPanel.getChildByName(customNodeName) as CustomFormulaNode;
        var line : UIComponent= null; 
        if(customNode != null)
        {
        	mainPanel.removeChild(customNode);
        }
           
		line = mainPanel.getChildByName(line1)as UIComponent;
        if(line != null)
        {
			mainPanel.removeChild(line);           	
        }
        line = mainPanel.getChildByName(line2)as UIComponent;
        if(line != null)
        {
        	mainPanel.removeChild(line);  
        }
        // rpcService.removeCustomFormula();
	}
      
    public function deleteJoinQueryNode(JoinNodeName: String , line1: String, line2: String): void
    {
    	//Alert("in deleteJoinQueryNode");
    	var joinQueryNode : JoinQueryNode = mainPanel.getChildByName(JoinNodeName) as JoinQueryNode;
        var line : UIComponent= null; 
        if(joinQueryNode != null)
        {
        	mainPanel.removeChild(joinQueryNode);
		}
           
        line = mainPanel.getChildByName(line1)as UIComponent;
        if(line != null)
        {
			mainPanel.removeChild(line);           	
        }
        line = mainPanel.getChildByName(line2)as UIComponent;
        if(line != null)
        {
        	mainPanel.removeChild(line);  
		}  
        //rpcService.removeCustomFormula();
	}
      
    private function onStageResize():void
    {
    	if(popUp)
      	{
      		PopUpManager.centerPopUp(popUp);
      		if (popUp.parentApplication.width < popUp.width)
      				popUp.x = 0;
      		if (popUp.parentApplication.height < popUp.height)
      				popUp.y = 0;
      	}
      	if(singleNodeTQPope)
      	{
      		PopUpManager.centerPopUp(singleNodeTQPope);
      		if (singleNodeTQPope.parentApplication.width < singleNodeTQPope.width)
      				singleNodeTQPope.x = 0;
      		if (singleNodeTQPope.parentApplication.height < singleNodeTQPope.height)
      				singleNodeTQPope.y = 0;
      	}
      	if(popUpForJoinQuery)
      	{
      		PopUpManager.centerPopUp(popUpForJoinQuery);
      		if (popUpForJoinQuery.parentApplication.width < popUpForJoinQuery.width)
      				popUpForJoinQuery.x = 0;
      		if (popUpForJoinQuery.parentApplication.height < popUpForJoinQuery.height)
      				popUpForJoinQuery.y = 0;
      	}	
	}
]]>
</mx:Script>
<mx:RemoteObject id="rpcService" destination="queryService" fault="faultHandler(event);">
</mx:RemoteObject>

<mx:VBox width="100%" height="100%" backgroundColor="#f9e886" horizontalGap="0" verticalGap="0">
		<mx:VBox backgroundColor="white" id="mainPanelx" verticalGap="0" width="100%" height="100%" fontSize="11">
			<mx:Label text="Diagrammatic View" fontSize="11" fontWeight="bold" x="0" y="0" width="150"/>
			<mx:ApplicationControlBar top="0" dock="true" height="5%" width="100%" fillAlphas="[1.0, 1.0]" fillColors="[#f9e886, #f9e886]">
				<mx:Button label="Add Link"  id="addLinkBtn" click="drawLine()" fontSize="9" toolTip="Add Link to nodes"/>
				<mx:Button label="Clear All Paths" id="clrPathsBtn" click="clearPaths()" fontSize="9" toolTip="Clear All Paths"/>
				<mx:Button label="Temporal Query" id="TQBtn" click="openTQPopUp()" fontSize="9" toolTip="Create temporal query on selected nodes"/>
				<mx:Button label="Join Query" id="JoinQueryBtn" click="openJoinQueryPopUp()" fontSize="9" toolTip="Create Join query on selected nodes"/>				
			</mx:ApplicationControlBar>
			<mx:Canvas id="mainPanel" width="100%" height="95%" borderStyle="none">
			</mx:Canvas>
		</mx:VBox>	
	<mx:Label id="currentExp" fontFamily="Courier New" fontSize="11" fontWeight="bold"/>
</mx:VBox>

</mx:Application>