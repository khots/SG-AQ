<?xml version="1.0" encoding="utf-8"?>
<mx:Box xmlns:mx="http://www.adobe.com/2006/mxml"
	borderThickness="2"  width="330" height="88" color="black" backgroundColor="white"
	implements="flash.utils.IExternalizable"
	borderColor="#0000FF" borderStyle="solid">

	<mx:Script>
		<![CDATA[

		import mx.rpc.events.ResultEvent;
		import mx.rpc.events.FaultEvent;
		import mx.events.MenuEvent;
		import mx.controls.Menu;
		import mx.controls.Alert;
		import mx.collections.ArrayCollection;

		private var firstEntityName: String = null;

		private var secondEntityName: String = null;

		private var operation: String = null;

		private var firstNodeExpressionId: int = 0;

		private var secondNodeExpressionId: int = 0;

		private var joinFormulaNodeList: ArrayCollection = null;

		private var nodeView : String = "";

		[Bindable]
		public var myMenuData:Array = [
		    {label: "Delete", type: "radio", toggled: false,enabled:true},
		    {label: "Edit", type: "radio", toggled: false,enabled:true}];

		[Bindable]
		public var outputMenuData:Array = [
			{label: "Edit", type: "radio", toggled: false,enabled:false},
			{label: "Delete", type: "radio", toggled: false,enabled:false}];

		[Bindable]
  		public var joinFormula : String = null;

  		[Bindable]
  		public var currentJoinQueryNode : JoinQueryNode = null;

  		[Bindable]
  		public var obj : Object = null;


		public function setFirstNodeEntityName(firstEntityName: String): void
		{
			this.firstEntityName = firstEntityName;
		}

		public function getFirstNodeEntityName(): String
		{
			return firstEntityName;
		}

		public function setSecondNodeEntityName(secondEntityName: String): void
		{
			this.secondEntityName = secondEntityName;
		}

		public function getSecondNodeEntityName(): String
		{
			return secondEntityName;
		}

		public function setFirstNodeExpressionId(firstNodeExpressionId: int): void
		{
			this.firstNodeExpressionId = firstNodeExpressionId;
		}

		public function getFirstNodeExpressionId(): int
		{
			return firstNodeExpressionId;
		}

		public function setSecondNodeExpressionId(secondNodeExpressionId: int): void
		{
			this.secondNodeExpressionId = secondNodeExpressionId;
		}

		public function getSecondNodeExpressionId(): int
		{
			return secondNodeExpressionId;
		}

		public function setJoinFormulaNodeList(joinFormulaNodeList: ArrayCollection): void
		{
			this.joinFormulaNodeList = joinFormulaNodeList;
		}

		public function getJoinFormulaNodeList(): ArrayCollection
		{
			return joinFormulaNodeList;
		}

		public function setOperation(operation: String): void
		{
			this.operation = operation;
		}

		public function getOperation(): String
		{
			return this.operation;
		}

		public function setNodeView(nodeView : String) : void
        {
        	this.nodeView = nodeView;
        }

        public function getNodeView() : String
        {
        	return this.nodeView;
        }

        public function initializeNode(x:int,y:int,name :String) : void
  		{
  			this.x = x;
  			this.y = y;
  			this.name = name;
  		}
        /**
		* Read serialized data.
		*/
		public function readExternal(input:IDataInput): void
		{
			this.name = input.readUTF();
			this.firstNodeExpressionId = input.readInt();
			this.secondNodeExpressionId = input.readInt();
			this.firstEntityName = input.readUTF();
			this.secondEntityName = input.readUTF();
			this.operation = input.readUTF();
			this.joinFormulaNodeList = input.readObject();
			this.nodeView = input.readUTF();
		}

        /**
         *  Write Searialized Data.
         */
        public function writeExternal(out:IDataOutput): void
        {
        	//Alert.show("in write");
        	//Alert.show(this.firstEntityName);
        	out.writeUTF(this.name);
        	out.writeInt(this.firstNodeExpressionId);
        	out.writeInt(this.secondNodeExpressionId);
        	out.writeUTF(this.firstEntityName);
        	out.writeUTF(this.secondEntityName);
        	out.writeUTF(this.operation);
        	out.writeObject(this.joinFormulaNodeList);
        	out.writeUTF(this.nodeView);
        }

		/**
		 * This method creates a menu on Join Query box on UI.
		 */
		private function createMyMenu(event:MouseEvent):void
  		{
  			var myNewMenu: Menu = null;
  			//Alert.show("Node-> " + this.getNodeView() + "Parent View-> "+ this.parentApplication.view);
  			if(this.getNodeView() != this.parentApplication.view)
  			{
  				//This is the case when view is Result, so menu should be different and editing should be disabled
  				myNewMenu = Menu.createMenu(this, outputMenuData, true);
  			}
  			else
  			{
  				myNewMenu = Menu.createMenu(this, myMenuData, true);
  			}

  			myNewMenu.show(event.stageX,event.stageY);
			myNewMenu.addEventListener(MenuEvent.ITEM_CLICK, handleMenuEvent);
			myNewMenu.addEventListener(FaultEvent.FAULT, faultHandler);
  	   	}

  	   	/**
  	     * Handler method for Mouse click event on the Edit/Delete Menu.
  	     */
  	   	private function handleMenuEvent(event:MenuEvent):void
  	   	{
  	   		if(event.label == DAGConstants.DELETE)
  	   	  	{
  	   	    	//To delete the Join Query Node
  	   	      	deleteCustomNode();
  	   	  	}
  	   	  	else
  	   	  	{
  	   	  		//To edit the Join Query Node
  	   	  	 	editCustomFormula();
  	   	  	}
  	   	}

  	    /**
  	     * This method deletes the Join Query Node from backend.
  	     */
  	   	private function deleteCustomNode() : void
  	   	{
  	   		var nodeName : String = this.name;
  	   	  	this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, nodeRemoveHandler);
  	   	  	this.parentApplication.rpcService.removeJoinFormula(nodeName);
          	//this.parentApplication.rpcService.addEventListener(FaultEvent.FAULT, faultHandler);
  	   	}

  	    /**
  	     * This method deletes the Join Query Node from UI.
  	     */
  	   	private function nodeRemoveHandler(event : ResultEvent) : void
  	   	{
  	   		var joinQueryNodeName : String = this.name;

  	   	  	//Deriving line object Names which attaches the DagNode and Custom formula node
          	var nodesNumbers : Array = joinQueryNodeName.split("_");
          	var line1 : String = nodesNumbers[1] + "_" + joinQueryNodeName;
  	   	  	var line2 : String = nodesNumbers[2] + "_" + joinQueryNodeName;
  	   	  	//Alert.show("line, line2 -> " + line1 + " , " + line2);

  	      	//this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT,nodeRemoveHandler);
  	    	//Deleting the Custom Formula Node and corresponding connecting Nodes
          	this.parentApplication.deleteJoinQueryNode(joinQueryNodeName, line1, line2);
  	   	}


		private function editCustomFormula() : void
  	   	{
			var joinQueryNode : JoinQueryNode = this;
			currentJoinQueryNode = joinQueryNode;
			this.parentApplication.operationforView = "edit"; //to get popwindow fields values
			this.parentApplication.rpcService.retrieveEditJoinQueryData(joinQueryNode);
			this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT, nodeRemoveHandler);
			this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, editNodeHandler);
			//this.parentApplication.rpcService.addEventListener(FaultEvent.FAULT, faultHandler);
  	   	}

  	   	private function editNodeHandler(event : ResultEvent) : void
  	   	{
	  	   	obj = event.result as Object;
			this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT, editNodeHandler);
  	   		this.parentApplication.rpcService.getFormattedLabelForJQ(currentJoinQueryNode);
  	   		this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, handlerFormattedLabelForJQ);
  	   	}

		private function handlerFormattedLabelForJQ(event : ResultEvent): void
	  	{
	  		var formattedLabelList: ArrayCollection = event.result as ArrayCollection;
			this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT, handlerFormattedLabelForJQ);
			this.parentApplication.createAndPopulateJoinQueryPopUp(obj,
	  	   		"edit", currentJoinQueryNode, formattedLabelList);

	  	}

  	   	private function faultHandler (event:FaultEvent):void
	  	{
			Alert.show(event.fault.faultString, 'Error');
	 	}

	 ]]>
	</mx:Script>

	<mx:HBox id="dNodeFormula" height="100%" width="100%" textAlign="center" horizontalGap="0">
    	<mx:Label id="formulaLabel" text="{joinFormula}" height="100%" width="95%"/>

     	<mx:VBox height="100%" verticalAlign="middle">
  	 		<mx:Button  label=">"  id="menuButton" width="5%" click="createMyMenu(event)"/>
  	 	</mx:VBox>
	</mx:HBox>

</mx:Box>