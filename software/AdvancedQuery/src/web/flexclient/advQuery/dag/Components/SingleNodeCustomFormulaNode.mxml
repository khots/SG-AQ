<?xml version="1.0" encoding="utf-8"?>
<mx:Box xmlns:mx="http://www.adobe.com/2006/mxml" width="330" height="88" color="black" backgroundColor="white"
	implements="flash.utils.IExternalizable" borderColor="#0000FF" borderStyle="solid">

	<mx:Script>
		<![CDATA[
		import mx.controls.Menu;
        import mx.events.MenuEvent;
        import Components.DAGConstants;
        import mx.rpc.events.ResultEvent;
        import mx.rpc.events.FaultEvent;
	    import mx.controls.Alert;
	    [Bindable]
	    public var customFormulaString  : String = "";

	    [Bindable]
  		public var currentCustomNode : SingleNodeCustomFormulaNode = null;



	    [Bindable]
		public var myMenuData:Array = [
		    {label: "Delete", type: "radio", toggled: false,enabled:true},
		    {label: "Edit", type: "radio", toggled: false,enabled:true}
		];

	    [Bindable]
		public var outputMenuData:Array = [
			{label: "Edit", type: "radio", toggled: false,enabled:false},
			{label: "Delete", type: "radio", toggled: false,enabled:false}
		];

		//private var  nodeName : String = "";

		//tHIS IS TO DISTINGUISH  WHEATHER IT'S SINGLE NODE TQ OR TWO NODE TQ
		private var nodeType : String = "";
		private var attributeID : String = "";
		private var attributeType : String = "";
        private var attributeName : String = "";
        private var entityName : String = ""; //Name of the corresponding Entity
        private var nodeExpressionId : int = 0; //Expression id of the Entity
        private var selectedArithmeticOp : String = "";
        private var selectedLogicalOp : String = "";
        private var timeValue : String = "";
        private var timeInterval : String = "";
        private var lhsTimeValue : String = "";
        private var lhsTimeInterval : String = "";
        private var operation : String = "";
        private var customColumnName : String = "";
        private var nodeView : String = "";
        private var qAttrInterval: String = "";
        private var ccInterval : String = "";

        public function setCCInterval(ccInterval : String):void
        {
        	this.ccInterval = ccInterval;
        }
        public function getCCInterval() : String
        {
        	return this.ccInterval;
        }



        public function setQAttrInterval(qAttrInterval : String) : void
        {
        	this.qAttrInterval = qAttrInterval;
        }

        public function getQAttrInterval () : String
        {
        	return this.qAttrInterval;
        }


        public function setNodeView(nodeView : String) : void
        {
        	this.nodeView = nodeView;
        }

        public function getNodeView() : String
        {
        	return this.nodeView
        }


       // private var customFormulaString : String = "";

        public function setCustomFormulaString(customFormulaString : String) : void
        {
           this.customFormulaString =  customFormulaString;
        }
        public function getCustomFormulaString()  : String
        {
        	return this.customFormulaString;
        }

        public function setLhsTimeValue(lhsTimeValue : String) : void
        {
        	this.lhsTimeValue = lhsTimeValue;
        }
        public function getLhsTimeValue() : String
        {
        	return lhsTimeValue;
        }

        public function setLhsTimeInterval(lhsTimeInterval : String) : void
        {
        	this.lhsTimeInterval = lhsTimeInterval;
        }

        public function getLhsTimeInterval() : String
        {
        	return lhsTimeInterval;
        }
        public function initializeNode(x:int,y:int,name :String) : void
  		{
  			this.x = x;
  			this.y = y;
  			this.name = name;
  		}
        public function setCustomColumnName(customColumnName : String) : void
        {
        	this.customColumnName = customColumnName;
        }

        public function getCustomColumnName () : String
        {
        	return this.customColumnName;
        }
        public function setOperation(operation : String) : void
        {
         	this.operation = operation;
        }

        public function getOperation() : String
        {
            return this.operation;
        }

	    public function setNodeType(nodeType : String) : void
	    {
	    	this.nodeType = nodeType;
	    }
		public function getNodeType() : String
		{
		 	return this.nodeType;
		}

		public function setAttributeID(attributeID : String) : void
		{
			this.attributeID = attributeID;
		}

		public function getAttributeID() : String
		{
			return attributeID;
		}


		public function setAttributeType(attributeType : String) : void
		{
			this.attributeType = attributeType;
		}

		public function getAtributeType() : String
		{
			return attributeType;
		}

        public function setAttributeName(attributeName : String) : void
        {
        	this.attributeName =attributeName;
        }

		public function getAtributeName()  : String
		{
			return attributeName;
		}

		public function setEntityName(entityName : String) : void
		{
		    this.entityName = entityName;
		}
		public function	getEntityName() : String
		{
			return  entityName;
		}

        public function setNodeExpressionId(nodeExpressionId : int) : void
        {
        	this.nodeExpressionId = nodeExpressionId;
        }

        public function getNodeExpressionId() : int
        {
        	return nodeExpressionId;
        }

  		public function setSelectedArithmeticOp(selectedArithmeticOp : String) : void
  		{
  			this.selectedArithmeticOp = selectedArithmeticOp;
  		}

  		public function getSelectedArithmeticOp() : String
  		{
  			return this.selectedArithmeticOp;
  		}

  		public function setSelectedLogicalOp(selectedLogicalOp : String) : void
  		{
  			this.selectedLogicalOp = selectedLogicalOp;
  		}
  		public function getSelectedLogicalOp() : String
  		{
  			return this.selectedLogicalOp;
  		}

  		public function setTimeValue(timeValue : String) : void
  		{
  			this.timeValue = timeValue;
  		}
  		public function getTimeValue() : String
  		{
  			return this.timeValue;
  		}

  		public function setTimeInterval(timeInterval : String) : void
  		{
  			this.timeInterval = timeInterval;
  		}
  		public function getTimeInterval() : String
  		{
  			return this.timeInterval;
  		}


  		public function  readExternal(input:IDataInput):void
  		{
  			this.name = input.readUTF();
  			nodeType = input.readUTF();
  			attributeID = input.readUTF();
  			attributeType = input.readUTF();
  			attributeName = input.readUTF();
  			entityName = input.readUTF();
  			nodeExpressionId = input.readInt();
  			selectedArithmeticOp = input.readUTF();
  			selectedLogicalOp = input.readUTF();
  			timeValue = input.readUTF();
  			timeInterval = input.readUTF();
  			lhsTimeValue = input.readUTF();
  			lhsTimeInterval = input.readUTF();
  			operation = input.readUTF();
  			customColumnName = input.readUTF();
  			customFormulaString = input.readUTF();
  			nodeView = input.readUTF();
            qAttrInterval = input.readUTF();
            ccInterval = input.readUTF();
  		}

       public function writeExternal(out:IDataOutput):void
       {
       	  out.writeUTF(this.name);
       	  out.writeUTF(nodeType);
       	  out.writeUTF(attributeID);
       	  out.writeUTF(attributeType);
       	  out.writeUTF(attributeName);
       	  out.writeUTF(entityName);
       	  out.writeInt(nodeExpressionId);
       	  out.writeUTF(selectedArithmeticOp);
       	  out.writeUTF(selectedLogicalOp);
       	  out.writeUTF(timeValue);
       	  out.writeUTF(timeInterval);
       	  out.writeUTF(lhsTimeValue);
       	  out.writeUTF(lhsTimeInterval);
       	  out.writeUTF(operation);
       	  out.writeUTF(customColumnName);
       	  out.writeUTF(customFormulaString);
       	  out.writeUTF(nodeView);
          out.writeUTF(qAttrInterval);
          out.writeUTF(ccInterval);
       }

       private function createMyMenu(event:MouseEvent):void
  	   {
  			var myNewMenu:Menu=null;
  			if(this.getNodeView() != this.parentApplication.view)
  			{
  				myNewMenu = Menu.createMenu(this, outputMenuData, true);
  			}
  			else
  			{
  				myNewMenu = Menu.createMenu(this, myMenuData, true);
  			}
  			//myNewMenu = Menu.createMenu(this, myMenuData, true);
  			myNewMenu.show(event.stageX,event.stageY);
			myNewMenu.addEventListener(MenuEvent.ITEM_CLICK,handleMenuEvent);
			myNewMenu.addEventListener(FaultEvent.FAULT, faultHandler);
  	   }

  	   private function handleMenuEvent(event:MenuEvent):void
  	   {
  	   	  if(event.label == DAGConstants.DELETE)
  	   	  {
  	   	      //To delete the Custom Formula Node
  	   	      deleteCustomNode();
  	   	  }
  	   	  else
  	   	  {
  	   	  	 editCustomFormula();
  	   	  }
  	   }

      private function faultHandler (event:FaultEvent):void
	  {
		  AlertManager.showError(event.fault.faultString);
	  }

	  private function deleteNodeHandler(event : ResultEvent) : void
	  {
	  	  var customNodeName : String = this.name;
	  	  var nodeExpressionId : int = this.nodeExpressionId;
	  	  var line : String = nodeExpressionId + "_" + customNodeName;

	  	  this.parentApplication.deleteSingleNodeCustomNode(customNodeName,line);
	  }

       private function deleteCustomNode() : void
       {
       	   var nodeName : String = this.name;
       	   this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT,deleteNodeHandler);
       	   this.parentApplication.rpcService.removeCustomFormula(nodeName);
       }

       private function editNodeHandler(event : ResultEvent) : void
       {
       	    this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,editNodeHandler);
       	    this.parentApplication.createAndPopulateSingleNodeTq(event.result as Object, "edit", currentCustomNode);

       }
       private function editCustomFormula() : void
       {
       	   var node : SingleNodeCustomFormulaNode = this;
       	   currentCustomNode = node;
       	   this.parentApplication.operationforView="edit"; //to get popwindow fields values
       	   this.parentApplication.rpcService.getSingleNodeEditData(node);
       	   this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT,editNodeHandler);
		   //this.parentApplication.rpcService.addEventListener(FaultEvent.FAULT, faultHandler);
       }
       /*private function changeBgColor() : void{
       	if(this.parentApplication.view=="Result"){
       		sNodeFormula.setStyle("backgroundColor","#e7ddfa");
       	}else{
       		sNodeFormula.setStyle("backgroundColor","#FFFFFF");
       	}
       } */

		]]>
	</mx:Script>

  <mx:HBox id="sNodeFormula" height="100%" width="100%" textAlign="center" horizontalGap="0">
     <mx:Label id="formulaLabel" text="{customFormulaString}" height="100%" width="95%"/>
  	 <mx:VBox height="100%" verticalAlign="middle">
  	 	<mx:Button  label=">" id="singleNodeMenuBtn" width="5%" click="createMyMenu(event)"/>
  	 </mx:VBox>

  </mx:HBox>

</mx:Box>
