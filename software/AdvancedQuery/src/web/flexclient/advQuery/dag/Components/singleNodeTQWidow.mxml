<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="700" height="255"
	showCloseButton="true" close="removeMe();" borderColor="#0000FF" backgroundColor="white" 
	left="0" right="0" borderThicknessLeft="2" borderThicknessRight="2" borderThicknessBottom="2"
	borderThicknessTop="5" creationComplete="removeComponent()">
	<mx:Script>
		<![CDATA[
		import mx.states.SetStyle;
		import mx.events.ChildExistenceChangedEvent;
		import mx.events.FlexEvent;
		import mx.events.ValidationResultEvent;
		import mx.validators.StringValidator;
		import mx.rpc.events.ResultEvent;
		import mx.collections.ArrayCollection;
		import Components.DAGConstants;
		import mx.managers.PopUpManager;
		import mx.controls.List;		
		 [Bindable]
		 public var entityLabelString : String = null;	
		
		 [Bindable]
		 public var buttonLabel : String = "OK"; 
		
		 [Bindable]
		 public var datePickerLabel : String = "Select Date";
		 
		 [Bindable]
		 public var entityName : String = "";
		 
		 [Bindable]
		 public var entityExpressionId  : int = 0; 
		 
		 [Bindable]
		 public var customNodeName : String = "";
		
		[Bindable]
		public var arithmeticOpDp : ArrayCollection ;
		[Bindable]
		public var attributesDp : ArrayCollection;
		[Bindable]
		public var relationalDp : ArrayCollection;
		[Bindable]
		public var timeIntervalsDp : ArrayCollection;
		
		[Bindable]
		public var entityDp : Object;
		
		[Bindable]
	 	private var arithmeticLabel : String = "Arithmetic" + "\n" +"Operators"; 
	 	    
	 	[Bindable]
	 	private var relationalLabel : String  = "Relational" + "\n" + "Operators";
	 	    
	 	[Bindable]
	 	private var timeValueLabel : String = "Time" + "\n" + "Value";
	 	    
	 	[Bindable]
	 	private var timeIntrvalLabel : String = "Time" + "\n" + "Interval" ;
	      		
     	private var existingTextBox : TextInput = null;	
        private var existingTimeIntervalCb : ComboBox = null;
	    private var existingValueLabel : Label = null;
	 	private var existingIntervalLabel : Label = null; 
	 	private var existingRHSDatePicker : DateField = null;
	    private var existingRHSPickerLabel : Label = null; 
	 	private var existingLHSDatePicker : DateField =  null;  
		private var existingfirstOpComboBox : ComboBox = null;
		private var existingTimeStampText : TextInput = null;
		private var existingTimeLabel : Label = null;
		
		public function removeMe():void 
	 	{
           PopUpManager.removePopUp(this);
           this.parentApplication.operationforView=""; //to overcome from edit mode
        }
		
		private function submitData() : void
		{
			var flag:Boolean = validateColumnName();
           	  if(flag == false) 
           	  	 return;           	  	 
           	  	 
			var rhsTimeValue : String = "";
          	var rhsTimeIntervalValue : String =  "";
           	var customFormulaString : String = "";
            
            var lhsTimeValue : String = "";
            var lhsTimeIntervalValue : String = "";
            var month : String =  "";
            var day : String = "";
            var singleNodeCustomFormula : SingleNodeCustomFormulaNode = new SingleNodeCustomFormulaNode(); 
            existingLHSDatePicker = myBox.getChildByName("leftDatePicker")as DateField;
            
            if(existingLHSDatePicker != null)
             {
             	//If there exists date Picker on Lefty hand side, the lhs time value will be Date only
             	 month = (existingLHSDatePicker.selectedDate.getMonth()+1).toString();
           	 	 if(month.length == 1)
           	 	 {
           	 	    month = "0"+month;
           	 	 }
           	 	    
           	 	 day = existingLHSDatePicker.selectedDate.getDate().toString();
           	 	 if(day.length == 1)
           	 	 {
           	 	     day = "0"+day;
           	 	 }
           	 	 lhsTimeValue = month + "/" + day +"/" + existingLHSDatePicker.selectedDate.getFullYear();
                 singleNodeCustomFormula.setLhsTimeValue(lhsTimeValue);
                 singleNodeCustomFormula.setLhsTimeInterval("null");
             }
             else
             {
             
             }	   
		     
		     //Setting the selected arithmatic op
		     singleNodeCustomFormula.setSelectedArithmeticOp(arithmaticOpsCb.selectedItem.toString());

             //Setting the attribute's properties
             singleNodeCustomFormula.setAttributeName(attributesCb.selectedItem.toString());
             
             var attributeDataList : ArrayCollection = entityDp[attributesCb.selectedItem.toString()];
             singleNodeCustomFormula.setAttributeType(String(attributeDataList.getItemAt(1)));
             singleNodeCustomFormula.setAttributeID(String(attributeDataList.getItemAt(0)));
             //Setting the Entity Datails
             singleNodeCustomFormula.setEntityName(entityName);
             singleNodeCustomFormula.setNodeExpressionId(entityExpressionId);
             
             if(this.parentApplication.view == "Result")
             {
	             //Setting the relational Op blank for calculate query
	             singleNodeCustomFormula.setSelectedLogicalOp("null");
             }else
             {
             	//Setting the relational Op
	             singleNodeCustomFormula.setSelectedLogicalOp(relationalOpsCb.selectedItem.toString());
             }
             
             //Handling RHS time value and Intervals
             existingTextBox = myBox.getChildByName("timeInputBox") as TextInput;
             if(existingTextBox != null)
             {
             	if(this.parentApplication.view == "Result")
             	{
             		singleNodeCustomFormula.setTimeValue("null");
             		singleNodeCustomFormula.setTimeInterval("null");
             	}else
             	{
	             	//Means there exists the Time Intervals also
	             	rhsTimeValue = existingTextBox.text;
	             	singleNodeCustomFormula.setTimeValue(rhsTimeValue);
	             	existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox;
	               	if(existingTimeIntervalCb != null)
	                {
	                   rhsTimeIntervalValue = existingTimeIntervalCb.selectedItem.toString();
	                   singleNodeCustomFormula.setTimeInterval(rhsTimeIntervalValue);
	                }
	                else
	                {
	                	//This condition should not exist if text Input is there 
	                	singleNodeCustomFormula.setTimeInterval("null");
	                }	                
                }
             }
             else
             {
             	if(this.parentApplication.view == "Result")
             	{
           	  	   singleNodeCustomFormula.setTimeValue("null");
           	  	   singleNodeCustomFormula.setTimeInterval("null");
           	  	}else
           	  	{
	             	//Means there exists the Date Picker, so get the Date Picker
	             	existingRHSDatePicker = myBox.getChildByName("rhsDatePicker") as DateField;
	             	existingTimeStampText = myBox.getChildByName("iTimeStampText") as TextInput;
	                if(existingRHSDatePicker != null)
	                {
	                	month = (existingRHSDatePicker.selectedDate.getMonth()+1).toString();
	           	 	 	if(month.length == 1)
	           	 	 	{
	           	 	    	month = "0"+month;
	           	 	 	}
	           	 	    
	           	 	 	day = existingRHSDatePicker.selectedDate.getDate().toString();
	           	 	 	if(day.length == 1)
	           	 	 	{
	           	 	    	 day = "0"+day;
	           	 	 	}
						//timeStamp is added to the datePicker	
						if(existingTimeStampText != null){           	 	 
	           	 	 		rhsTimeValue = month + "/" + day +"/" + existingRHSDatePicker.selectedDate.getFullYear() + " " + existingTimeStampText.text;
	     				}else{
	     					rhsTimeValue = month + "/" + day +"/" + existingRHSDatePicker.selectedDate.getFullYear();
	     				}	           	 	 	
	           	 	 	singleNodeCustomFormula.setTimeValue(rhsTimeValue);
	           	 	 	singleNodeCustomFormula.setTimeInterval("null");
	                }
                }             	
             	
             }
             
            
	             var lhsTime :  String = "";
	             //Creating custom Formula String 
	             if(lhsTimeIntervalValue != null && lhsTimeIntervalValue != "")
	             {
	             	lhsTime = lhsTimeValue + "\n" +  lhsTimeIntervalValue;
	             }
	             else
	             {
	             	lhsTime = lhsTimeValue;
	             }
	             
	             if(this.parentApplication.view != "Result") 
	             {
		             var rhsTime : String = "";
		             if(rhsTimeIntervalValue != null && rhsTimeIntervalValue != "")
		             {
		             	rhsTime = rhsTimeValue + rhsTimeIntervalValue;
		             }
		             else
		             {
		             	rhsTime = rhsTimeValue;
		             }
		             customFormulaString =  lhsTimeValue + "\n" + arithmaticOpsCb.selectedItem.toString() + "\n" 
		             +  entityName + "." + attributesCb.selectedItem.toString() + "\n" + relationalOpsCb.selectedItem.toString() 
		             + "\n" + rhsTime;
	             	 
	             	 //Setting the custom Column Name             
	             	 singleNodeCustomFormula.setCustomColumnName(customColumnName.text);
	             	 singleNodeCustomFormula.setCCInterval("null");
	             }
	             else
	             {
	             	customFormulaString = lhsTimeValue + "\n" + arithmaticOpsCb.selectedItem.toString() + "\n" +entityName;
    	            //Setting the custom Column Name and customformula interval            
		            singleNodeCustomFormula.setCustomColumnName(customColumnName.text);
		            singleNodeCustomFormula.setCCInterval(timeIntervalCb6.selectedItem.toString());
	             }
             
             this.parentApplication.singleNodecustomFormulaString = customFormulaString;
             singleNodeCustomFormula.setCustomFormulaString(customFormulaString);
              
             singleNodeCustomFormula.name = customNodeName;
             
             //Setting node Type
             singleNodeCustomFormula.setNodeType("singleNodeCustomNode");
             

             existingfirstOpComboBox= firstComboPlace.getChildByName("fstOpComboBox") as ComboBox;             
			 if(existingfirstOpComboBox != null)
			 {
			 	singleNodeCustomFormula.setQAttrInterval(existingfirstOpComboBox.selectedItem.toString());	
			 }
			 else
			 {
			 	singleNodeCustomFormula.setQAttrInterval("null");	
			 }
			 
			  //Setting the node view
             singleNodeCustomFormula.setNodeView(this.parentApplication.view);
             
             //Invoking the RPC Method
             if(submitButton1.label == "OK")
             {
             	
             	this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, createCustomNodeHandler);
             	singleNodeCustomFormula.setOperation("create");
             	this.parentApplication.rpcService.formSingleNodeFormula(singleNodeCustomFormula, "add");
             }
             else
             {
             	this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, editCustomNodeHandler);
             	singleNodeCustomFormula.setOperation("edit");
             	this.parentApplication.rpcService.formSingleNodeFormula(singleNodeCustomFormula, "edit");
             	this.parentApplication.operationforView=""; //to overcome from edit mode
             }
             
		}
		private function editCustomNodeHandler(event : ResultEvent) : void
		{
			var node  : SingleNodeCustomFormulaNode = event.result as SingleNodeCustomFormulaNode;
			this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT, editCustomNodeHandler);
			this.parentApplication.addSingleNodeCustomNode(node); 
		}
		
		private function createCustomNodeHandler(event : ResultEvent) : void
		{					
			var node  : SingleNodeCustomFormulaNode = event.result as SingleNodeCustomFormulaNode;
            this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT, createCustomNodeHandler);
            this.parentApplication.addSingleNodeCustomNode(node);
            			
		}
		private function validate() : void
		{
			var operandType : String  = null;  //Specifies the type of Attribute either date or NonDate 
			var operand : String = ""; //Specifies selected attrinbute 
			var nodeAttributeId : String = null; //
			var nodeList : ArrayCollection =  null;
			var arithmeticOperand : String = null;
			
			if(attributesCb.selectedIndex > -1){
		 		operand  =  attributesCb.selectedItem.toString();
				nodeList = entityDp[operand];
				operandType = String(nodeList.getItemAt(1));
       		}       		
       		           		
       	 	if(operandType == "Integer") 
       	 	{
       	 	    //Creating the ComboBox
          			existingfirstOpComboBox= firstComboPlace.getChildByName("fstOpComboBox") as ComboBox;
          			if(existingfirstOpComboBox == null)
    	        	{
    	        		var firstOpComboBox : ComboBox =  new ComboBox();
	   	       			firstOpComboBox.id = "fstOpComboBox";
	   	       			firstOpComboBox.name = "fstOpComboBox";
	   	       			firstOpComboBox.dataProvider = timeIntervalsDp;       	       		  	              
	   	              	firstOpComboBox.rowCount = 10;
	   	       			//Adding datePicket as childs
	   	 	   			firstComboPlace.addChild(firstOpComboBox);       	 	   			 
    	     		}	
       	 	}else{
       	 		existingfirstOpComboBox= firstComboPlace.getChildByName("fstOpComboBox") as ComboBox;
				if(existingfirstOpComboBox != null){  
    	        		firstComboPlace.removeChild(existingfirstOpComboBox);
    				}
       	 	}
       	 	
			if(arithmaticOpsCb.selectedIndex > -1 && attributesCb.selectedIndex > -1)
			{
				operand  =  attributesCb.selectedItem.toString();
				nodeList = entityDp[operand];
				operandType = String(nodeList.getItemAt(1));				
			    arithmeticOperand = arithmaticOpsCb.selectedItem.toString();
           	 		
			    existingLHSDatePicker = myBox.getChildByName("leftDatePicker") as DateField;
			    if(existingLHSDatePicker != null)
			    {   
			    	if(arithmeticOperand == "+" && operandType == "Date")
				    {
				    	AlertManager.showWarning("A date/timestamp may only be subtracted from another date/timestamp.  Please change the operator to a minus sign.");
           	 	    	        createBigTip("A date/timestamp may only be subtracted from another date/timestamp.  Please change the operator to a minus sign.");
        			}else if (arithmeticOperand == "-" && operandType == "Date")
        			{
					    		destroyBigTip();
							    //Selected attribute type is of Date type , then on LHS it should be a text Input and TimeInterval drop down 
							    addTextAndTimeIntervals();    
					    	
        			}else if(operandType == "Integer")
				    {
				    	destroyBigTip();
					 	//If Selected attribute type is not of Date type
                    	//Removing the Text boxes and Time Intervals 
                    	removeLHSTxtAndIntervals();
                    	if(this.parentApplication.view != "Result"){
	                    	//Add Date Picker for RHS 
	                    	addRHSDatePicker();
                    	}
					}
        			else if(operandType == "TimeStamp")
				    {
				    	destroyBigTip();
					 	//If Selected attribute type is not of Date type
                    	//Removing the Text boxes and Time Intervals 
                    	removeLHSTxtAndIntervals();
                    	if(this.parentApplication.view != "Result"){
	                    	//Add Date Picker for RHS 
	                    	addRHSDatePicker();
	                    	addRHSTimePicker();
                    	}
					}else{
						destroyBigTip();						
					}
					
			    }
			    else
			    {
			    	//If there dosen't exists any date Picker on left hand side
			    }
			}
			else
			{
			}
		}
		
		private function addTextAndTimeIntervals() : void
		{
			
			 //Remove Date Picker and corresponding Labels
			 existingRHSDatePicker = myBox.getChildByName("rhsDatePicker") as DateField;
			 if(existingRHSDatePicker != null)
			 {
			 	myBox.removeChild(existingRHSDatePicker);
			 }
			 
			 //IN case of subtraction of two dates, it should be something integer
           	 existingTimeStampText = myBox.getChildByName("iTimeStampText") as TextInput;
           	 existingTimeLabel = labelHBox.getChildByName("rhsTimeLabel") as Label;
           	 if(existingTimeStampText != null)
			 {
	           	 myBox.removeChild(existingTimeStampText);
	           	 labelHBox.removeChild(existingTimeLabel);
	   		 }
			 
			 existingRHSPickerLabel = labelHBox.getChildByName("rhsDatePickerLabel") as Label;
			 if(existingRHSPickerLabel != null)
			 {
			 	labelHBox.removeChild(existingRHSPickerLabel);
			 }
			 
			 //Add Text Input box and Time Interval Labels
           	 existingValueLabel = labelHBox.getChildByName("label5") as Label;
           	 if(existingValueLabel == null)
           	 {
           	 	 //Add New label
           	 	 var valueLabel  : Label= new Label();
           	 	 valueLabel.id = "lb5";
           	 	 valueLabel.name = "label5";
           	 	 valueLabel.text = "Time Value";
           	 	 valueLabel.width = 100;
           	 	 valueLabel.buttonMode = true;
           	 	 valueLabel.setStyle("color","#0000FF");   				
   				 valueLabel.setStyle("fontWeight","bold");           	 	  
           	 	 labelHBox.addChild(valueLabel);
           	 }
             existingIntervalLabel = labelHBox.getChildByName("label6") as Label;
           	 if(existingIntervalLabel == null)
           	 {
           	 	 var intervalLabel : Label = new Label();
           	 	 intervalLabel.id = "lb6";
           	 	 intervalLabel.name ="label6";
           	 	 intervalLabel.text = "Time Interval";
           	 	 intervalLabel.width = 100;
           	 	 intervalLabel.buttonMode = true; 
           	 	 intervalLabel.setStyle("color","#0000FF");   				
   				 intervalLabel.setStyle("fontWeight","bold");          	 	          
           	 	 labelHBox.addChild(intervalLabel);
           	 }
           	 
           	 //Adding text Input Box and Time Intervals 
           	 existingTextBox = myBox.getChildByName("timeInputBox") as TextInput;
           	 if(existingTextBox == null)
             {
           	 	//If no text input exists, create text input
           	 	var textBox : TextInput = new TextInput();
           	    textBox.id = "timeInputBox";
           	    textBox.name = "timeInputBox"
			 	textBox.width = 100;
			 	textBox.setStyle("borderColor","#000FF");
           	    myBox.addChild(textBox);
           	}
           	existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox;   
            if(existingTimeIntervalCb == null)
            {
                var comboBox : ComboBox = new ComboBox();
                comboBox.id = "cb5";
                comboBox.name = "timeIntervalCb";
                comboBox.width = 100;
                comboBox.dataProvider = timeIntervalsDp;
                comboBox.rowCount = 10;
                comboBox.setStyle("borderColor","#000FF");
                myBox.addChild(comboBox);
           }
		}
		
		//This method is made public as it is invoked from Parent class to remove TextInput etc in case of EDIT
		public function removeLHSTxtAndIntervals() : void
		{
			//Removing text Box
           	existingTextBox = myBox.getChildByName("timeInputBox") as TextInput;
           	var value : String =  null;
           	if(existingTextBox != null)
           	{
           	    value = existingTextBox.text;
           	   	myBox.removeChild(existingTextBox);
           	   	   				
           	   	 //Remove the Time Value Label
	           	 existingValueLabel = labelHBox.getChildByName("label5") as Label;
	           	 if(existingValueLabel != null)
	           	 {
	           	 	 labelHBox.removeChild(existingValueLabel);
	           	 }
           	}
           	        	
           	//Removing time interval ComboBox
            existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox; 
            if(existingTimeIntervalCb != null)
           	{
           	   myBox.removeChild(existingTimeIntervalCb);
           	       				
           	   //Remove the Time Interval Label
           	   existingIntervalLabel = labelHBox.getChildByName("label6") as Label;
           	   if(existingIntervalLabel != null)
           	    {
           	        labelHBox.removeChild(existingIntervalLabel);	
           	    }
           	}
		} 
		
		public function addRHSDatePicker() : DateField
		{
			existingRHSDatePicker= myBox.getChildByName("rhsDatePicker") as DateField;
           	var datePicker : DateField = null;
           	if(existingRHSDatePicker == null)
           	{
           	 	datePicker =  new DateField();
	           	datePicker.id = "rhsDatePicker";
	           	datePicker.name = "rhsDatePicker";
	           	datePicker.width = 100;
	           	datePicker.focusEnabled = true;
	           	datePicker.formatString = "MM/DD/YYYY";
	           	datePicker.showToday = true;
	           	datePicker.yearNavigationEnabled = true;
	           	datePicker.setStyle("borderColor","#0000FF");   				
	           	datePicker.addEventListener(FlexEvent.CREATION_COMPLETE,showTodayDateHandler);    	
	           	
	           	//Adding datePicket as childs
	            myBox.addChild(datePicker); 
	         }
	         //Creating the DatePicker Label
	         existingRHSPickerLabel = labelHBox.getChildByName("rhsDatePickerLabel") as Label;
           	 if(existingRHSPickerLabel == null)
           	 {
           	 	var pickerLabel : Label = new Label();
           	 	pickerLabel.name = "rhsDatePickerLabel";
           	 	pickerLabel.text = "Select Date"; 	 	   				
   				pickerLabel.setStyle("color","#0000FF");   				
   				pickerLabel.setStyle("fontWeight","bold");
           	 	labelHBox.addChild(pickerLabel);
           	 }
           	 
           	 return datePicker;
		}	
		public function addRHSTimePicker() : TextInput
		{
			existingTimeStampText= myBox.getChildByName("iTimeStampText") as TextInput;
           	var timeStampText : TextInput = null;
           	if(existingRHSDatePicker == null)
           	{  	
	           	timeStampText =  new TextInput();
      			timeStampText.id = "iTimeStampText";
      			timeStampText.name = "iTimeStampText";
      			timeStampText.width = 100;
      			timeStampText.focusEnabled = true;
      			timeStampText.text = "00:00:00";
      			timeStampText.setStyle("borderColor","#0000FF");
      			//Adding datePicket as childs	            
	            myBox.addChild(timeStampText);
	             
      			var pickerLabel : Label = new Label();
           	 	pickerLabel.name = "rhsTimeLabel";
           	 	pickerLabel.text = "Select Time(HH:MM:SS)";
           	 	pickerLabel.width = 100; 	 	   				
   				pickerLabel.setStyle("color","#0000FF");   				
   				pickerLabel.setStyle("fontWeight","bold");
   				//Adding label as childs
           	 	labelHBox.addChild(pickerLabel);             
	           	
	         }          	 
           	 return timeStampText;
		}	
           
        private function myDataTipFunction(item:Object):String
        { 
            return String(item);       
       
        }
        
        /**
			   truncateLongText function is doing the truncatation of Label and create a elipses like "..." 
			   and set value to comboBox text.  
			*/				
    		public function truncateLongText(e : Event):void{   
    					 
    			var txt:String = e.currentTarget.itemToLabel(e.currentTarget.selectedItem);  			
    			e.currentTarget.toolTip=txt; 
    			if(txt.length >= 11)
    				e.currentTarget.text =  txt.substring(0,9).toString() + "...";    			 		   		       		    
    		}
    		
    		/**
    			validateComboboxText function is create to validate first element of arraylist
    			here if a dropdown list contains only on item then it will show in comboBox as selected item
    			if item length is more than 1 then i will show prompt like "-select-" and store item text to myToolTip variable for further refrence.    			 
    		*/ 		
    		public function validateComboboxText():void{    			
    			if(this.parentApplication.operationforView==""){ 	     			   			
	    			 if(arithmeticOpDp.length <= 1){
		    			 arithmaticOpsCb.selectedIndex = 0;
		    			 arithmaticOpsCb.toolTip=arithmaticOpsCb.selectedLabel.toString();
		    		 }else{
	    				arithmaticOpsCb.selectedIndex = -1;
	    				arithmaticOpsCb.toolTip=arithmaticOpsCb.selectedLabel.toString();
		    		 }
	    			 
	    			 if(attributesDp.length <= 1){
	    				attributesCb.selectedIndex = 0;
	    				attributesCb.toolTip=attributesCb.selectedLabel.toString();
	    			 }else{
	    				attributesCb.selectedIndex = -1;
	    				attributesCb.toolTip=attributesCb.selectedLabel.toString();
	    			 }
	    			    			 
	    			 if(relationalDp.length <= 1){
	    				relationalOpsCb.selectedIndex = 0;
	    				relationalOpsCb.toolTip=relationalOpsCb.selectedLabel.toString();
	    			 }else{
	    				relationalOpsCb.selectedIndex = -1;
	    				relationalOpsCb.toolTip=relationalOpsCb.selectedLabel.toString();
	    			 }
	    			
	    			 if(timeIntervalsDp.length <= 1){
	    				timeIntervalCb.selectedIndex = 0;
	    				timeIntervalCb.toolTip=timeIntervalCb.selectedLabel.toString();
	    			 }else{
	    				timeIntervalCb.selectedIndex = -1;
	    				timeIntervalCb.toolTip=timeIntervalCb.selectedLabel.toString();
	    			 }
	    		}
    		}
    		
    		private function validateColumnName():Boolean{    			
    			var strVal:StringValidator = new StringValidator();    			
                strVal.source = customColumnName;
                strVal.property = "text";
                strVal.required = true;
                
                var event:ValidationResultEvent = strVal.validate();
				var currentControlIsValid:Boolean = (event.type == ValidationResultEvent.VALID);
				return currentControlIsValid;                                         	           	  				
    		}    		    		
			
			/**
    			createBigTip function is create a errorString which is displayed while validation messages appears.
    			it will disable submitButton control.    			  
    		*/ 	
		    private function createBigTip(s:String):void {		      
		      submitButton1.enabled=false;
		      submitButton1.errorString = s;		           
		    }
			
			/**
    			destroyBigTip function is remove a errorString which was displayed while validation messages appears.
    			it will enable submitButton control.    			  
    		*/
		    private function destroyBigTip():void {
		      submitButton1.enabled=true;
		      submitButton1.errorString="";		      
		      
		    }
		    /**
		       for calculare query remove component
		    */
		    private function removeComponent():void {
		      if(this.parentApplication.view=="Result"){
		      	relationalOpsCb.visible = false;
		      	timeIntervalCb.visible = false;
		      	timeInputBox.visible = false;
		      	relationalOpsLabel.visible = false;
		      	lb5.visible = false;
		      	lb6.visible = false;
		      	timeIntervalCb6.visible = true;
		      	lb7.visible = true;
		      }else{
		      	relationalOpsCb.visible = true;
		      	timeIntervalCb.visible = true;
		      	timeInputBox.visible = true;
		      	relationalOpsLabel.visible = true;
		      	lb5.visible = true;
		      	lb6.visible = true;
		      	timeIntervalCb6.visible = false;
		      	lb7.visible = false;
		      }
		    }
		    /**
		       setting default values for today date and current time
		    */
		    private function showTodayDateHandler(event:FlexEvent):void{
		    	if(this.parentApplication.operationforView != "edit"){        	
	           		existingRHSDatePicker= myBox.getChildByName("rhsDatePicker") as DateField;
	           		existingRHSDatePicker.selectedDate = new Date();        		
      			}           		
           	} 
           	/**
		       setting default values for today date
		    */
           	private function showTodayDate():void{
           		if(this.parentApplication.operationforView != "edit"){           			
           			datePicker.selectedDate = new Date();
           		}
           	}     
			
		]]>
	</mx:Script>
	<!--customColumnName field validation it is a mandatory field -->  
    <mx:StringValidator id="fieldVal" source="{customColumnName}" property="text" required="true"/>
	<mx:DateFormatter id="timeFormatter" formatString="HH:MM:SS" />
	
	<mx:VBox x="20" y="20" width="100%" height="100%" bottom="15" top="15" right="15" left="15"> 
		 <!--Specifying Labels -->
		<mx:HBox x="20" y="20" id="labelHBox" width="100%">
			<mx:Label id="leftDatePicker" name="leftDatePickerLabel" width="100" height="50"  text="{datePickerLabel}"  color="blue" fontStyle="normal" fontWeight="bold" buttonMode="true" />
			<mx:Label id="arithmeticOpLabel" name="arithmeticOpLabel" width="100"  height="50" color="blue" text="{arithmeticLabel}" fontStyle="normal" fontWeight="bold" buttonMode="true"/>
			<mx:Label id="entityLabel" name="entityLabel" width="100" height="50" color="blue" text="{entityLabelString}" fontStyle="normal" fontWeight="bold" buttonMode="true"/>
	    	<mx:Label id="relationalOpsLabel" name="relationalOpsLabel" width="100" height="50" color="blue" text="{relationalLabel}" fontStyle="normal" fontWeight="bold" buttonMode="true" />
	    	<mx:Label id="lb5" name="label5" width="100"  height="50" color="blue" text="{timeValueLabel}" fontStyle="normal" fontWeight="bold"/>
	    	<mx:Label id="lb6" name="label6" width="100"  height="50" color="blue" text="{timeIntrvalLabel}" fontStyle="normal" fontWeight="bold"/>
       </mx:HBox>
	
		<!--Specifying Controls -->
		<mx:HBox id ="myBox" x="20" y="60" creationComplete="validateComboboxText()" width="100%" >
			<mx:DateField id="datePicker" name="leftDatePicker" width="100" showToday="true" 
				formatString="MM/DD/YYYY" creationComplete="showTodayDate()" yearNavigationEnabled="true"/>
			<mx:ComboBox id="arithmaticOpsCb" dataProvider="{arithmeticOpDp}" width="100"  textAlign="center" 
				borderThickness="0" borderColor="blue" prompt="--Select--" change="validate()" 
				itemRenderer="mx.controls.Label" rowCount="10" close="truncateLongText(event)" toolTip=""/>
			<mx:VBox id="firstComboPlace" width="100" height="100%" horizontalGap="0">					
				<mx:ComboBox id="attributesCb" dataProvider="{attributesDp}" width="100" 
					borderThickness="0" borderColor="blue" prompt="--Select--"  change="validate()" 
					itemRenderer="mx.controls.Label" rowCount="10" close="truncateLongText(event)" toolTip=""/>	
			</mx:VBox>	
			<mx:ComboBox id="relationalOpsCb" dataProvider="{relationalDp}" width="100" 
				borderThickness="0" borderColor="blue"  prompt="--Select--" itemRenderer="mx.controls.Label" 
				rowCount="10" close="truncateLongText(event)" toolTip=""/>
			<mx:TextInput id="timeInputBox" name="timeInputBox"  width="100" restrict="0-9" borderColor="blue"/> 
	    	<mx:ComboBox id="timeIntervalCb" name="timeIntervalCb" dataProvider="{timeIntervalsDp}" 
	    		width="100"  borderThickness="0" borderColor="blue" prompt="--Select--" 
	    		itemRenderer="mx.controls.Label" rowCount="10" close="truncateLongText(event)" toolTip=""/>
        </mx:HBox>
        <mx:Spacer height="5"/>          
	    <mx:HBox x="20" horizontalGap="6" width="100%">
         <mx:Label id="columnLabel" width="170" text="Please Enter Column Name :"  fontWeight="bold" color="blue"/>
              
         <mx:TextInput id="customColumnName" width="250" restrict="0-9 A-Z a-z" borderColor="blue" focusOut="validateColumnName()"/>
         <mx:ComboBox id="timeIntervalCb6" name="timeIntervalCb6" dataProvider="{timeIntervalsDp}" 
         	width="100"  borderThickness="0" borderColor="blue" prompt="--Select--" 
         	itemRenderer="mx.controls.Label" rowCount="10" close="truncateLongText(event)" toolTip="" visible="false"/>
         <mx:Label id="lb7" name="label6" width="100"  height="50" color="blue" text="{timeIntrvalLabel}" fontStyle="normal" 
         	fontWeight="bold" paddingTop="0" visible="false"/>
	   </mx:HBox>
	 
	   <mx:HBox x="20" y="50">
	      <mx:Button id="submitButton1" label="{buttonLabel}" click="submitData();"/>
          <mx:Button id="cancelButton1" label="Cancel" click="removeMe();"/>  
	    </mx:HBox>
	
	</mx:VBox>

</mx:TitleWindow>
